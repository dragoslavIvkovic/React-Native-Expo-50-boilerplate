/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddUserDataAndAddressDto
 */
export interface AddUserDataAndAddressDto {
    /**
     * 
     * @type {string}
     * @memberof AddUserDataAndAddressDto
     */
    'companyUserAdminId': string;
    /**
     * 
     * @type {string}
     * @memberof AddUserDataAndAddressDto
     */
    'companyAddressId': string;
}
/**
 * 
 * @export
 * @interface AddressAdminResponse
 */
export interface AddressAdminResponse {
    /**
     * Name of the address
     * @type {string}
     * @memberof AddressAdminResponse
     */
    'name'?: string;
    /**
     * Street 1
     * @type {string}
     * @memberof AddressAdminResponse
     */
    'street_1': string;
    /**
     * Street 2
     * @type {string}
     * @memberof AddressAdminResponse
     */
    'street_2'?: string;
    /**
     * Postal Code
     * @type {string}
     * @memberof AddressAdminResponse
     */
    'post_code': string;
    /**
     * City ID
     * @type {number}
     * @memberof AddressAdminResponse
     */
    'cityId': number;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof AddressAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
}
/**
 * 
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
    /**
     * Name of the address
     * @type {string}
     * @memberof AddressDto
     */
    'name'?: string;
    /**
     * Street 1
     * @type {string}
     * @memberof AddressDto
     */
    'street_1': string;
    /**
     * Street 2
     * @type {string}
     * @memberof AddressDto
     */
    'street_2'?: string;
    /**
     * Postal Code
     * @type {string}
     * @memberof AddressDto
     */
    'post_code': string;
    /**
     * City ID
     * @type {number}
     * @memberof AddressDto
     */
    'cityId': number;
    /**
     * Indicates if this is the main address
     * @type {boolean}
     * @memberof AddressDto
     */
    'main_address'?: boolean;
}
/**
 * 
 * @export
 * @interface AddressForCompanyResponse
 */
export interface AddressForCompanyResponse {
    /**
     * Name of the address
     * @type {string}
     * @memberof AddressForCompanyResponse
     */
    'name'?: string;
    /**
     * Street 1
     * @type {string}
     * @memberof AddressForCompanyResponse
     */
    'street_1': string;
    /**
     * Street 2
     * @type {string}
     * @memberof AddressForCompanyResponse
     */
    'street_2'?: string;
    /**
     * Postal Code
     * @type {string}
     * @memberof AddressForCompanyResponse
     */
    'post_code': string;
    /**
     * City ID
     * @type {number}
     * @memberof AddressForCompanyResponse
     */
    'cityId': number;
    /**
     * 
     * @type {string}
     * @memberof AddressForCompanyResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface AddressResponse
 */
export interface AddressResponse {
    /**
     * Name of the address
     * @type {string}
     * @memberof AddressResponse
     */
    'name'?: string;
    /**
     * Street 1
     * @type {string}
     * @memberof AddressResponse
     */
    'street_1': string;
    /**
     * Street 2
     * @type {string}
     * @memberof AddressResponse
     */
    'street_2'?: string;
    /**
     * Postal Code
     * @type {string}
     * @memberof AddressResponse
     */
    'post_code': string;
    /**
     * Indicates if this is the main address
     * @type {boolean}
     * @memberof AddressResponse
     */
    'main_address'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddressResponse
     */
    'id': string;
    /**
     * 
     * @type {CityResponse}
     * @memberof AddressResponse
     */
    'city': CityResponse;
}
/**
 * 
 * @export
 * @interface AddressWithoutCityResponse
 */
export interface AddressWithoutCityResponse {
    /**
     * Name of the address
     * @type {string}
     * @memberof AddressWithoutCityResponse
     */
    'name'?: string;
    /**
     * Street 1
     * @type {string}
     * @memberof AddressWithoutCityResponse
     */
    'street_1': string;
    /**
     * Street 2
     * @type {string}
     * @memberof AddressWithoutCityResponse
     */
    'street_2'?: string;
    /**
     * Postal Code
     * @type {string}
     * @memberof AddressWithoutCityResponse
     */
    'post_code': string;
    /**
     * City ID
     * @type {number}
     * @memberof AddressWithoutCityResponse
     */
    'cityId': number;
    /**
     * Indicates if this is the main address
     * @type {boolean}
     * @memberof AddressWithoutCityResponse
     */
    'main_address'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddressWithoutCityResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface AffectedCountResponse
 */
export interface AffectedCountResponse {
    /**
     * 
     * @type {number}
     * @memberof AffectedCountResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof AffectedCountResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AffectedCountResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {AffectedCountResponseData}
     * @memberof AffectedCountResponse
     */
    'data': AffectedCountResponseData;
}
/**
 * 
 * @export
 * @interface AffectedCountResponseData
 */
export interface AffectedCountResponseData {
    /**
     * 
     * @type {number}
     * @memberof AffectedCountResponseData
     */
    'affected': number;
}
/**
 * 
 * @export
 * @interface AsssignMealsBody
 */
export interface AsssignMealsBody {
    /**
     * 
     * @type {Array<MenuMealResponseForMenu>}
     * @memberof AsssignMealsBody
     */
    'menuMeals': Array<MenuMealResponseForMenu>;
}
/**
 * 
 * @export
 * @interface CancelOrderDateMealBodyDto
 */
export interface CancelOrderDateMealBodyDto {
    /**
     * 
     * @type {Array<CancelOrderDateMealDto>}
     * @memberof CancelOrderDateMealBodyDto
     */
    'orderMealsToCancel'?: Array<CancelOrderDateMealDto>;
}
/**
 * 
 * @export
 * @interface CancelOrderDateMealDto
 */
export interface CancelOrderDateMealDto {
    /**
     * 
     * @type {string}
     * @memberof CancelOrderDateMealDto
     */
    'mealId': string;
    /**
     * 
     * @type {string}
     * @memberof CancelOrderDateMealDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CancelOrderDateMealDto
     */
    'dayOfWeek'?: CancelOrderDateMealDtoDayOfWeekEnum;
}

export const CancelOrderDateMealDtoDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type CancelOrderDateMealDtoDayOfWeekEnum = typeof CancelOrderDateMealDtoDayOfWeekEnum[keyof typeof CancelOrderDateMealDtoDayOfWeekEnum];

/**
 * 
 * @export
 * @interface CityDto
 */
export interface CityDto {
    /**
     * The English name of the city.
     * @type {string}
     * @memberof CityDto
     */
    'nameEnglish': string;
    /**
     * The full English name of the city.
     * @type {string}
     * @memberof CityDto
     */
    'fullNameEnglish': string;
    /**
     * The local name of the city.
     * @type {Array<string>}
     * @memberof CityDto
     */
    'nameLocal': Array<string>;
    /**
     * The full local name of the city.
     * @type {Array<string>}
     * @memberof CityDto
     */
    'fullNameLocal': Array<string>;
    /**
     * The postal code of the city.
     * @type {string}
     * @memberof CityDto
     */
    'postalCode': string;
    /**
     * The status of the city.
     * @type {string}
     * @memberof CityDto
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof CityDto
     */
    'countryId': number;
}
/**
 * 
 * @export
 * @interface CityResponse
 */
export interface CityResponse {
    /**
     * The English name of the city.
     * @type {string}
     * @memberof CityResponse
     */
    'nameEnglish': string;
    /**
     * The full English name of the city.
     * @type {string}
     * @memberof CityResponse
     */
    'fullNameEnglish': string;
    /**
     * The local name of the city.
     * @type {Array<string>}
     * @memberof CityResponse
     */
    'nameLocal': Array<string>;
    /**
     * The full local name of the city.
     * @type {Array<string>}
     * @memberof CityResponse
     */
    'fullNameLocal': Array<string>;
    /**
     * The postal code of the city.
     * @type {string}
     * @memberof CityResponse
     */
    'postalCode': string;
    /**
     * The status of the city.
     * @type {string}
     * @memberof CityResponse
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof CityResponse
     */
    'id': number;
    /**
     * 
     * @type {CountryWithoutLanguagesResponse}
     * @memberof CityResponse
     */
    'country': CountryWithoutLanguagesResponse;
}
/**
 * 
 * @export
 * @interface CityStatusBodyDto
 */
export interface CityStatusBodyDto {
    /**
     * 
     * @type {string}
     * @memberof CityStatusBodyDto
     */
    'status': CityStatusBodyDtoStatusEnum;
}

export const CityStatusBodyDtoStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE',
    WaitingDeactivation: 'WAITING_DEACTIVATION'
} as const;

export type CityStatusBodyDtoStatusEnum = typeof CityStatusBodyDtoStatusEnum[keyof typeof CityStatusBodyDtoStatusEnum];

/**
 * 
 * @export
 * @interface CityWithoutCountryResponse
 */
export interface CityWithoutCountryResponse {
    /**
     * The English name of the city.
     * @type {string}
     * @memberof CityWithoutCountryResponse
     */
    'nameEnglish': string;
    /**
     * The full English name of the city.
     * @type {string}
     * @memberof CityWithoutCountryResponse
     */
    'fullNameEnglish': string;
    /**
     * The local name of the city.
     * @type {Array<string>}
     * @memberof CityWithoutCountryResponse
     */
    'nameLocal': Array<string>;
    /**
     * The full local name of the city.
     * @type {Array<string>}
     * @memberof CityWithoutCountryResponse
     */
    'fullNameLocal': Array<string>;
    /**
     * The postal code of the city.
     * @type {string}
     * @memberof CityWithoutCountryResponse
     */
    'postalCode': string;
    /**
     * The status of the city.
     * @type {string}
     * @memberof CityWithoutCountryResponse
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof CityWithoutCountryResponse
     */
    'countryId': number;
    /**
     * 
     * @type {number}
     * @memberof CityWithoutCountryResponse
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CompanyAdminDto
 */
export interface CompanyAdminDto {
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminDto
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminDto
     */
    'email': string;
    /**
     * 
     * @type {AddressForCompanyResponse}
     * @memberof CompanyAdminDto
     */
    'address': AddressForCompanyResponse;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminDto
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminDto
     */
    'taxId': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminDto
     */
    'internalPhoneNumber'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyAdminDto
     */
    'contractIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CompanyAdminResponse
 */
export interface CompanyAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'email': string;
    /**
     * 
     * @type {AddressForCompanyResponse}
     * @memberof CompanyAdminResponse
     */
    'address': AddressForCompanyResponse;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'taxId': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'internalPhoneNumber'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyAdminResponse
     */
    'contractIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAdminResponse
     */
    'status': CompanyAdminResponseStatusEnum;
    /**
     * 
     * @type {UserWithoutPhoneNumbersResponse}
     * @memberof CompanyAdminResponse
     */
    'main_admin': UserWithoutPhoneNumbersResponse;
    /**
     * 
     * @type {Array<UserWithoutPhoneNumbersResponse>}
     * @memberof CompanyAdminResponse
     */
    'personnel': Array<UserWithoutPhoneNumbersResponse>;
}

export const CompanyAdminResponseStatusEnum = {
    InActivationProcess: 'IN_ACTIVATION_PROCESS',
    Active: 'ACTIVE',
    Blocked: 'BLOCKED',
    Removed: 'REMOVED'
} as const;

export type CompanyAdminResponseStatusEnum = typeof CompanyAdminResponseStatusEnum[keyof typeof CompanyAdminResponseStatusEnum];

/**
 * 
 * @export
 * @interface CompanyFeedResponse
 */
export interface CompanyFeedResponse {
    /**
     * 
     * @type {number}
     * @memberof CompanyFeedResponse
     */
    'averageRating': number;
    /**
     * 
     * @type {string}
     * @memberof CompanyFeedResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyFeedResponse
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyFeedResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyFeedResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyFeedResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyFeedResponse
     */
    'addressId': string;
}
/**
 * 
 * @export
 * @interface CompanyPaginatedResults
 */
export interface CompanyPaginatedResults {
    /**
     * 
     * @type {Array<CompanyFeedResponse>}
     * @memberof CompanyPaginatedResults
     */
    'items': Array<CompanyFeedResponse>;
    /**
     * 
     * @type {PaginationMeta}
     * @memberof CompanyPaginatedResults
     */
    'meta': PaginationMeta;
}
/**
 * 
 * @export
 * @interface CompanyResponse
 */
export interface CompanyResponse {
    /**
     * 
     * @type {string}
     * @memberof CompanyResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyResponse
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyResponse
     */
    'email': string;
    /**
     * 
     * @type {AddressForCompanyResponse}
     * @memberof CompanyResponse
     */
    'address': AddressForCompanyResponse;
    /**
     * 
     * @type {string}
     * @memberof CompanyResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CompanyStatusBodyDto
 */
export interface CompanyStatusBodyDto {
    /**
     * 
     * @type {string}
     * @memberof CompanyStatusBodyDto
     */
    'status': CompanyStatusBodyDtoStatusEnum;
}

export const CompanyStatusBodyDtoStatusEnum = {
    InActivationProcess: 'IN_ACTIVATION_PROCESS',
    Active: 'ACTIVE',
    Blocked: 'BLOCKED',
    Removed: 'REMOVED'
} as const;

export type CompanyStatusBodyDtoStatusEnum = typeof CompanyStatusBodyDtoStatusEnum[keyof typeof CompanyStatusBodyDtoStatusEnum];

/**
 * 
 * @export
 * @interface CompanyWithMainAdminBasicResponse
 */
export interface CompanyWithMainAdminBasicResponse {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'email': string;
    /**
     * 
     * @type {AddressForCompanyResponse}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'address': AddressForCompanyResponse;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'taxId': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'internalPhoneNumber'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'contractIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'status': CompanyWithMainAdminBasicResponseStatusEnum;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof CompanyWithMainAdminBasicResponse
     */
    'main_admin': UserBasicResponse;
}

export const CompanyWithMainAdminBasicResponseStatusEnum = {
    InActivationProcess: 'IN_ACTIVATION_PROCESS',
    Active: 'ACTIVE',
    Blocked: 'BLOCKED',
    Removed: 'REMOVED'
} as const;

export type CompanyWithMainAdminBasicResponseStatusEnum = typeof CompanyWithMainAdminBasicResponseStatusEnum[keyof typeof CompanyWithMainAdminBasicResponseStatusEnum];

/**
 * 
 * @export
 * @interface CompanyWithoutAddressResponse
 */
export interface CompanyWithoutAddressResponse {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutAddressResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutAddressResponse
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutAddressResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutAddressResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutAddressResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CompanyWithoutPersonnelAdminResponse
 */
export interface CompanyWithoutPersonnelAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'email': string;
    /**
     * 
     * @type {AddressForCompanyResponse}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'address': AddressForCompanyResponse;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'taxId': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'internalPhoneNumber'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'contractIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAdminResponse
     */
    'status': CompanyWithoutPersonnelAdminResponseStatusEnum;
}

export const CompanyWithoutPersonnelAdminResponseStatusEnum = {
    InActivationProcess: 'IN_ACTIVATION_PROCESS',
    Active: 'ACTIVE',
    Blocked: 'BLOCKED',
    Removed: 'REMOVED'
} as const;

export type CompanyWithoutPersonnelAdminResponseStatusEnum = typeof CompanyWithoutPersonnelAdminResponseStatusEnum[keyof typeof CompanyWithoutPersonnelAdminResponseStatusEnum];

/**
 * 
 * @export
 * @interface CompanyWithoutPersonnelAndAddressAdminResponse
 */
export interface CompanyWithoutPersonnelAndAddressAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'taxId': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'internalPhoneNumber'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'contractIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutPersonnelAndAddressAdminResponse
     */
    'status': CompanyWithoutPersonnelAndAddressAdminResponseStatusEnum;
}

export const CompanyWithoutPersonnelAndAddressAdminResponseStatusEnum = {
    InActivationProcess: 'IN_ACTIVATION_PROCESS',
    Active: 'ACTIVE',
    Blocked: 'BLOCKED',
    Removed: 'REMOVED'
} as const;

export type CompanyWithoutPersonnelAndAddressAdminResponseStatusEnum = typeof CompanyWithoutPersonnelAndAddressAdminResponseStatusEnum[keyof typeof CompanyWithoutPersonnelAndAddressAdminResponseStatusEnum];

/**
 * 
 * @export
 * @interface CountryResponse
 */
export interface CountryResponse {
    /**
     * The English name of the country.
     * @type {string}
     * @memberof CountryResponse
     */
    'nameEnglish': string;
    /**
     * The full English name of the country.
     * @type {string}
     * @memberof CountryResponse
     */
    'fullNameEnglish': string;
    /**
     * The local name of the country.
     * @type {Array<string>}
     * @memberof CountryResponse
     */
    'nameLocal': Array<string>;
    /**
     * The full local name of the country.
     * @type {Array<string>}
     * @memberof CountryResponse
     */
    'fullNameLocal': Array<string>;
    /**
     * The ISO2 code of the country. (Alpha-2)
     * @type {string}
     * @memberof CountryResponse
     */
    'iso2': string;
    /**
     * The ISO3 code of the country. (Alpha-3)
     * @type {string}
     * @memberof CountryResponse
     */
    'iso3': string;
    /**
     * The status of the country.
     * @type {string}
     * @memberof CountryResponse
     */
    'status': string;
    /**
     * The enabled status of the country.
     * @type {boolean}
     * @memberof CountryResponse
     */
    'enabled': boolean;
    /**
     * 
     * @type {number}
     * @memberof CountryResponse
     */
    'id': number;
    /**
     * The languages of the country.
     * @type {Array<LanguageResponse>}
     * @memberof CountryResponse
     */
    'languages': Array<LanguageResponse>;
}
/**
 * 
 * @export
 * @interface CountryStatusBodyDto
 */
export interface CountryStatusBodyDto {
    /**
     * The new status of the country
     * @type {string}
     * @memberof CountryStatusBodyDto
     */
    'status': CountryStatusBodyDtoStatusEnum;
}

export const CountryStatusBodyDtoStatusEnum = {
    Available: 'AVAILABLE',
    Unavailable: 'UNAVAILABLE'
} as const;

export type CountryStatusBodyDtoStatusEnum = typeof CountryStatusBodyDtoStatusEnum[keyof typeof CountryStatusBodyDtoStatusEnum];

/**
 * 
 * @export
 * @interface CountryWithoutLanguagesResponse
 */
export interface CountryWithoutLanguagesResponse {
    /**
     * The English name of the country.
     * @type {string}
     * @memberof CountryWithoutLanguagesResponse
     */
    'nameEnglish': string;
    /**
     * The full English name of the country.
     * @type {string}
     * @memberof CountryWithoutLanguagesResponse
     */
    'fullNameEnglish': string;
    /**
     * The local name of the country.
     * @type {Array<string>}
     * @memberof CountryWithoutLanguagesResponse
     */
    'nameLocal': Array<string>;
    /**
     * The full local name of the country.
     * @type {Array<string>}
     * @memberof CountryWithoutLanguagesResponse
     */
    'fullNameLocal': Array<string>;
    /**
     * The ISO2 code of the country. (Alpha-2)
     * @type {string}
     * @memberof CountryWithoutLanguagesResponse
     */
    'iso2': string;
    /**
     * The ISO3 code of the country. (Alpha-3)
     * @type {string}
     * @memberof CountryWithoutLanguagesResponse
     */
    'iso3': string;
    /**
     * The status of the country.
     * @type {string}
     * @memberof CountryWithoutLanguagesResponse
     */
    'status': string;
    /**
     * The enabled status of the country.
     * @type {boolean}
     * @memberof CountryWithoutLanguagesResponse
     */
    'enabled': boolean;
    /**
     * 
     * @type {number}
     * @memberof CountryWithoutLanguagesResponse
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOrderDto
     */
    'menuMealIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'addressId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'fromDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'toDate': string;
}
/**
 * 
 * @export
 * @interface CreateTemplateDto
 */
export interface CreateTemplateDto {
    /**
     * The name of the template
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'name': string;
    /**
     * The HTML content of the template
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'html': string;
    /**
     * The template engine to be used
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'engine'?: CreateTemplateDtoEngineEnum;
    /**
     * The ID of the layout associated with the template
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'layoutId': string;
    /**
     * The ID of the language associated with the template
     * @type {string}
     * @memberof CreateTemplateDto
     */
    'languageId'?: string;
}

export const CreateTemplateDtoEngineEnum = {
    Twig: 'TWIG',
    Hbs: 'HBS',
    Unrecognized: 'UNRECOGNIZED'
} as const;

export type CreateTemplateDtoEngineEnum = typeof CreateTemplateDtoEngineEnum[keyof typeof CreateTemplateDtoEngineEnum];

/**
 * 
 * @export
 * @interface EditOrderDto
 */
export interface EditOrderDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof EditOrderDto
     */
    'newMenuMealIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EditOrderDto
     */
    'newFromDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditOrderDto
     */
    'newToDate'?: string;
}
/**
 * 
 * @export
 * @interface FeedResponse
 */
export interface FeedResponse {
    /**
     * 
     * @type {CompanyPaginatedResults}
     * @memberof FeedResponse
     */
    'companies': CompanyPaginatedResults;
    /**
     * 
     * @type {MealPaginatedResults}
     * @memberof FeedResponse
     */
    'meals': MealPaginatedResults;
}
/**
 * 
 * @export
 * @interface ForgottenPasswordDto
 */
export interface ForgottenPasswordDto {
    /**
     * The email of the user
     * @type {string}
     * @memberof ForgottenPasswordDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GenericAddressAdminResponse
 */
export interface GenericAddressAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericAddressAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericAddressAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericAddressAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {AddressAdminResponse}
     * @memberof GenericAddressAdminResponse
     */
    'data': AddressAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericAddressResponse
 */
export interface GenericAddressResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericAddressResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericAddressResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericAddressResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {AddressResponse}
     * @memberof GenericAddressResponse
     */
    'data': AddressResponse;
}
/**
 * 
 * @export
 * @interface GenericCityResponse
 */
export interface GenericCityResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericCityResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericCityResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericCityResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {CityResponse}
     * @memberof GenericCityResponse
     */
    'data': CityResponse;
}
/**
 * 
 * @export
 * @interface GenericCompanyAdminResponse
 */
export interface GenericCompanyAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericCompanyAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericCompanyAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericCompanyAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {CompanyAdminResponse}
     * @memberof GenericCompanyAdminResponse
     */
    'data': CompanyAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericCompanyResponse
 */
export interface GenericCompanyResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericCompanyResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericCompanyResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericCompanyResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {CompanyResponse}
     * @memberof GenericCompanyResponse
     */
    'data': CompanyResponse;
}
/**
 * 
 * @export
 * @interface GenericCompanyWithMainAdminBasicResponse
 */
export interface GenericCompanyWithMainAdminBasicResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericCompanyWithMainAdminBasicResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericCompanyWithMainAdminBasicResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericCompanyWithMainAdminBasicResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {CompanyWithMainAdminBasicResponse}
     * @memberof GenericCompanyWithMainAdminBasicResponse
     */
    'data': CompanyWithMainAdminBasicResponse;
}
/**
 * 
 * @export
 * @interface GenericCountryResponse
 */
export interface GenericCountryResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericCountryResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericCountryResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericCountryResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {CountryResponse}
     * @memberof GenericCountryResponse
     */
    'data': CountryResponse;
}
/**
 * 
 * @export
 * @interface GenericFeedResponse
 */
export interface GenericFeedResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericFeedResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericFeedResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericFeedResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {FeedResponse}
     * @memberof GenericFeedResponse
     */
    'data': FeedResponse;
}
/**
 * 
 * @export
 * @interface GenericLanguageResponse
 */
export interface GenericLanguageResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericLanguageResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericLanguageResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericLanguageResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {LanguageResponse}
     * @memberof GenericLanguageResponse
     */
    'data': LanguageResponse;
}
/**
 * 
 * @export
 * @interface GenericMealAdminResponse
 */
export interface GenericMealAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMealAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMealAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMealAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MealAdminResponse}
     * @memberof GenericMealAdminResponse
     */
    'data': MealAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericMealRatingAdminResponse
 */
export interface GenericMealRatingAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMealRatingAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMealRatingAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMealRatingAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MealRatingAdminResponse}
     * @memberof GenericMealRatingAdminResponse
     */
    'data': MealRatingAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericMealRatingResponseExternal
 */
export interface GenericMealRatingResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof GenericMealRatingResponseExternal
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMealRatingResponseExternal
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMealRatingResponseExternal
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MealRatingResponseExternal}
     * @memberof GenericMealRatingResponseExternal
     */
    'data': MealRatingResponseExternal;
}
/**
 * 
 * @export
 * @interface GenericMealRatingWithoutUserResponse
 */
export interface GenericMealRatingWithoutUserResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMealRatingWithoutUserResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMealRatingWithoutUserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMealRatingWithoutUserResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MealRatingWithoutUserResponse}
     * @memberof GenericMealRatingWithoutUserResponse
     */
    'data': MealRatingWithoutUserResponse;
}
/**
 * 
 * @export
 * @interface GenericMealResponse
 */
export interface GenericMealResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMealResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMealResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMealResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MealResponse}
     * @memberof GenericMealResponse
     */
    'data': MealResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuAdminResponse
 */
export interface GenericMenuAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuAdminResponse}
     * @memberof GenericMenuAdminResponse
     */
    'data': MenuAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuConstraintResponse
 */
export interface GenericMenuConstraintResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuConstraintResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuConstraintResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuConstraintResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuConstraintResponse}
     * @memberof GenericMenuConstraintResponse
     */
    'data': MenuConstraintResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuMealArrayResponse
 */
export interface GenericMenuMealArrayResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuMealArrayResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuMealArrayResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuMealArrayResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuMealResponse>}
     * @memberof GenericMenuMealArrayResponse
     */
    'data': Array<MenuMealResponse>;
}
/**
 * 
 * @export
 * @interface GenericMenuRatingAdminResponse
 */
export interface GenericMenuRatingAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuRatingAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuRatingAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuRatingAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuRatingAdminResponse}
     * @memberof GenericMenuRatingAdminResponse
     */
    'data': MenuRatingAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuRatingResponseExternal
 */
export interface GenericMenuRatingResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuRatingResponseExternal
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuRatingResponseExternal
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuRatingResponseExternal
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuRatingResponseExternal}
     * @memberof GenericMenuRatingResponseExternal
     */
    'data': MenuRatingResponseExternal;
}
/**
 * 
 * @export
 * @interface GenericMenuRatingWithoutUserResponse
 */
export interface GenericMenuRatingWithoutUserResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuRatingWithoutUserResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuRatingWithoutUserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuRatingWithoutUserResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuRatingWithoutUserResponse}
     * @memberof GenericMenuRatingWithoutUserResponse
     */
    'data': MenuRatingWithoutUserResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuResponse
 */
export interface GenericMenuResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuResponse}
     * @memberof GenericMenuResponse
     */
    'data': MenuResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuTypeResponse
 */
export interface GenericMenuTypeResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuTypeResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuTypeResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuTypeResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuTypeResponse}
     * @memberof GenericMenuTypeResponse
     */
    'data': MenuTypeResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuTypeWithoutMenusResponse
 */
export interface GenericMenuTypeWithoutMenusResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuTypeWithoutMenusResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuTypeWithoutMenusResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuTypeWithoutMenusResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof GenericMenuTypeWithoutMenusResponse
     */
    'data': MenuTypeWithoutMenusResponse;
}
/**
 * 
 * @export
 * @interface GenericMenuWithoutCompanyAdminResponse
 */
export interface GenericMenuWithoutCompanyAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericMenuWithoutCompanyAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericMenuWithoutCompanyAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericMenuWithoutCompanyAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {MenuWithoutCompanyAdminResponse}
     * @memberof GenericMenuWithoutCompanyAdminResponse
     */
    'data': MenuWithoutCompanyAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericOrderAdminResponse
 */
export interface GenericOrderAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericOrderAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericOrderAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericOrderAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {OrderAdminResponse}
     * @memberof GenericOrderAdminResponse
     */
    'data': OrderAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericOrderDateAdminResponse
 */
export interface GenericOrderDateAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericOrderDateAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericOrderDateAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericOrderDateAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {OrderDateAdminResponse}
     * @memberof GenericOrderDateAdminResponse
     */
    'data': OrderDateAdminResponse;
}
/**
 * 
 * @export
 * @interface GenericOrderResponse
 */
export interface GenericOrderResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericOrderResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericOrderResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericOrderResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {OrderResponse}
     * @memberof GenericOrderResponse
     */
    'data': OrderResponse;
}
/**
 * 
 * @export
 * @interface GenericOrdersAdminResponse
 */
export interface GenericOrdersAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericOrdersAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericOrdersAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericOrdersAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<OrderAdminResponse>}
     * @memberof GenericOrdersAdminResponse
     */
    'data': Array<OrderAdminResponse>;
}
/**
 * 
 * @export
 * @interface GenericPhoneNumberResponse
 */
export interface GenericPhoneNumberResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericPhoneNumberResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericPhoneNumberResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericPhoneNumberResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {PhoneNumberResponse}
     * @memberof GenericPhoneNumberResponse
     */
    'data': PhoneNumberResponse;
}
/**
 * 
 * @export
 * @interface GenericTagResponse
 */
export interface GenericTagResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericTagResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericTagResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericTagResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {TagResponse}
     * @memberof GenericTagResponse
     */
    'data': TagResponse;
}
/**
 * 
 * @export
 * @interface GenericUserResponse
 */
export interface GenericUserResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericUserResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericUserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericUserResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {UserResponse}
     * @memberof GenericUserResponse
     */
    'data': UserResponse;
}
/**
 * 
 * @export
 * @interface GenericUserWithRoleResponse
 */
export interface GenericUserWithRoleResponse {
    /**
     * 
     * @type {number}
     * @memberof GenericUserWithRoleResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericUserWithRoleResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericUserWithRoleResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {UserWithRoleResponse}
     * @memberof GenericUserWithRoleResponse
     */
    'data': UserWithRoleResponse;
}
/**
 * 
 * @export
 * @interface LanguageResponse
 */
export interface LanguageResponse {
    /**
     * The name of the language
     * @type {string}
     * @memberof LanguageResponse
     */
    'name': string;
    /**
     * The local name of the language
     * @type {string}
     * @memberof LanguageResponse
     */
    'nameLocal': string;
    /**
     * The code of the language
     * @type {string}
     * @memberof LanguageResponse
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof LanguageResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ListAddressAdminResponse
 */
export interface ListAddressAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListAddressAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListAddressAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListAddressAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<AddressAdminResponse>}
     * @memberof ListAddressAdminResponse
     */
    'data': Array<AddressAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListAddressAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListAddressWithoutCityResponse
 */
export interface ListAddressWithoutCityResponse {
    /**
     * 
     * @type {number}
     * @memberof ListAddressWithoutCityResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListAddressWithoutCityResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListAddressWithoutCityResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<AddressWithoutCityResponse>}
     * @memberof ListAddressWithoutCityResponse
     */
    'data': Array<AddressWithoutCityResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListAddressWithoutCityResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListCityWithoutCountryResponse
 */
export interface ListCityWithoutCountryResponse {
    /**
     * 
     * @type {number}
     * @memberof ListCityWithoutCountryResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListCityWithoutCountryResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCityWithoutCountryResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<CityWithoutCountryResponse>}
     * @memberof ListCityWithoutCountryResponse
     */
    'data': Array<CityWithoutCountryResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListCityWithoutCountryResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListCompanyResponse
 */
export interface ListCompanyResponse {
    /**
     * 
     * @type {number}
     * @memberof ListCompanyResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListCompanyResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCompanyResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<CompanyResponse>}
     * @memberof ListCompanyResponse
     */
    'data': Array<CompanyResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListCompanyResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListCompanyWithoutPersonnelAdminResponse
 */
export interface ListCompanyWithoutPersonnelAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListCompanyWithoutPersonnelAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListCompanyWithoutPersonnelAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCompanyWithoutPersonnelAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<CompanyWithoutPersonnelAdminResponse>}
     * @memberof ListCompanyWithoutPersonnelAdminResponse
     */
    'data': Array<CompanyWithoutPersonnelAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListCompanyWithoutPersonnelAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListCountriesResponse
 */
export interface ListCountriesResponse {
    /**
     * 
     * @type {number}
     * @memberof ListCountriesResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListCountriesResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCountriesResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<CountryResponse>}
     * @memberof ListCountriesResponse
     */
    'data': Array<CountryResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListCountriesResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListLanguagesResponse
 */
export interface ListLanguagesResponse {
    /**
     * 
     * @type {number}
     * @memberof ListLanguagesResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListLanguagesResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListLanguagesResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<LanguageResponse>}
     * @memberof ListLanguagesResponse
     */
    'data': Array<LanguageResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListLanguagesResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealAdminResponse
 */
export interface ListMealAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMealAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealAdminResponse>}
     * @memberof ListMealAdminResponse
     */
    'data': Array<MealAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealRatingWithoutCompanyAdminResponse
 */
export interface ListMealRatingWithoutCompanyAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMealRatingWithoutCompanyAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealRatingWithoutCompanyAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealRatingWithoutCompanyAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealRatingWithoutCompanyAdminResponse>}
     * @memberof ListMealRatingWithoutCompanyAdminResponse
     */
    'data': Array<MealRatingWithoutCompanyAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealRatingWithoutCompanyAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealRatingWithoutCompanyResponseExternal
 */
export interface ListMealRatingWithoutCompanyResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof ListMealRatingWithoutCompanyResponseExternal
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealRatingWithoutCompanyResponseExternal
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealRatingWithoutCompanyResponseExternal
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealRatingWithoutCompanyResponseExternal>}
     * @memberof ListMealRatingWithoutCompanyResponseExternal
     */
    'data': Array<MealRatingWithoutCompanyResponseExternal>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealRatingWithoutCompanyResponseExternal
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealRatingWithoutMealAdminResponse
 */
export interface ListMealRatingWithoutMealAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMealRatingWithoutMealAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealRatingWithoutMealAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealRatingWithoutMealAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealRatingWithoutMealAdminResponse>}
     * @memberof ListMealRatingWithoutMealAdminResponse
     */
    'data': Array<MealRatingWithoutMealAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealRatingWithoutMealAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealRatingWithoutMealResponseExternal
 */
export interface ListMealRatingWithoutMealResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof ListMealRatingWithoutMealResponseExternal
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealRatingWithoutMealResponseExternal
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealRatingWithoutMealResponseExternal
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealRatingWithoutMealResponseExternal>}
     * @memberof ListMealRatingWithoutMealResponseExternal
     */
    'data': Array<MealRatingWithoutMealResponseExternal>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealRatingWithoutMealResponseExternal
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealRatingWithoutUserAdminResponse
 */
export interface ListMealRatingWithoutUserAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMealRatingWithoutUserAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealRatingWithoutUserAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealRatingWithoutUserAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealRatingWithoutUserAdminResponse>}
     * @memberof ListMealRatingWithoutUserAdminResponse
     */
    'data': Array<MealRatingWithoutUserAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealRatingWithoutUserAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealRatingWithoutUserResponse
 */
export interface ListMealRatingWithoutUserResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMealRatingWithoutUserResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealRatingWithoutUserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealRatingWithoutUserResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealRatingWithoutUserResponse>}
     * @memberof ListMealRatingWithoutUserResponse
     */
    'data': Array<MealRatingWithoutUserResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealRatingWithoutUserResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealResponse
 */
export interface ListMealResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMealResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealResponse>}
     * @memberof ListMealResponse
     */
    'data': Array<MealResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMealWithoutCompanyResponse
 */
export interface ListMealWithoutCompanyResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMealWithoutCompanyResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMealWithoutCompanyResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMealWithoutCompanyResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MealWithoutCompanyResponse>}
     * @memberof ListMealWithoutCompanyResponse
     */
    'data': Array<MealWithoutCompanyResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMealWithoutCompanyResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuAdminResponse
 */
export interface ListMenuAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuAdminResponse>}
     * @memberof ListMenuAdminResponse
     */
    'data': Array<MenuAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuConstraintResponse
 */
export interface ListMenuConstraintResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuConstraintResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuConstraintResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuConstraintResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuConstraintResponse>}
     * @memberof ListMenuConstraintResponse
     */
    'data': Array<MenuConstraintResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuConstraintResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuConstraintWithoutMenuResponse
 */
export interface ListMenuConstraintWithoutMenuResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuConstraintWithoutMenuResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuConstraintWithoutMenuResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuConstraintWithoutMenuResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuConstraintWithoutMenuResponse>}
     * @memberof ListMenuConstraintWithoutMenuResponse
     */
    'data': Array<MenuConstraintWithoutMenuResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuConstraintWithoutMenuResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuMealResponse
 */
export interface ListMenuMealResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuMealResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuMealResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuMealResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuMealResponse>}
     * @memberof ListMenuMealResponse
     */
    'data': Array<MenuMealResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuMealResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuRatingWithoutCompanyAdminResponse
 */
export interface ListMenuRatingWithoutCompanyAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuRatingWithoutCompanyAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuRatingWithoutCompanyAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuRatingWithoutCompanyAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuRatingWithoutCompanyAdminResponse>}
     * @memberof ListMenuRatingWithoutCompanyAdminResponse
     */
    'data': Array<MenuRatingWithoutCompanyAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuRatingWithoutCompanyAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuRatingWithoutCompanyResponseExternal
 */
export interface ListMenuRatingWithoutCompanyResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof ListMenuRatingWithoutCompanyResponseExternal
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuRatingWithoutCompanyResponseExternal
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuRatingWithoutCompanyResponseExternal
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuRatingWithoutCompanyResponseExternal>}
     * @memberof ListMenuRatingWithoutCompanyResponseExternal
     */
    'data': Array<MenuRatingWithoutCompanyResponseExternal>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuRatingWithoutCompanyResponseExternal
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuRatingWithoutMenuAdminResponse
 */
export interface ListMenuRatingWithoutMenuAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuRatingWithoutMenuAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuRatingWithoutMenuAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuRatingWithoutMenuAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuRatingWithoutMenuAdminResponse>}
     * @memberof ListMenuRatingWithoutMenuAdminResponse
     */
    'data': Array<MenuRatingWithoutMenuAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuRatingWithoutMenuAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuRatingWithoutMenuResponseExternal
 */
export interface ListMenuRatingWithoutMenuResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof ListMenuRatingWithoutMenuResponseExternal
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuRatingWithoutMenuResponseExternal
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuRatingWithoutMenuResponseExternal
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuRatingWithoutMenuResponseExternal>}
     * @memberof ListMenuRatingWithoutMenuResponseExternal
     */
    'data': Array<MenuRatingWithoutMenuResponseExternal>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuRatingWithoutMenuResponseExternal
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuRatingWithoutUserAdminResponse
 */
export interface ListMenuRatingWithoutUserAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuRatingWithoutUserAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuRatingWithoutUserAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuRatingWithoutUserAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuRatingWithoutUserAdminResponse>}
     * @memberof ListMenuRatingWithoutUserAdminResponse
     */
    'data': Array<MenuRatingWithoutUserAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuRatingWithoutUserAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuRatingWithoutUserResponse
 */
export interface ListMenuRatingWithoutUserResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuRatingWithoutUserResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuRatingWithoutUserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuRatingWithoutUserResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuRatingWithoutUserResponse>}
     * @memberof ListMenuRatingWithoutUserResponse
     */
    'data': Array<MenuRatingWithoutUserResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuRatingWithoutUserResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuResponse
 */
export interface ListMenuResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuResponse>}
     * @memberof ListMenuResponse
     */
    'data': Array<MenuResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuTypeResponse
 */
export interface ListMenuTypeResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuTypeResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuTypeResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuTypeResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuTypeResponse>}
     * @memberof ListMenuTypeResponse
     */
    'data': Array<MenuTypeResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuTypeResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuTypeWithoutMenusResponse
 */
export interface ListMenuTypeWithoutMenusResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuTypeWithoutMenusResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuTypeWithoutMenusResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuTypeWithoutMenusResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuTypeWithoutMenusResponse>}
     * @memberof ListMenuTypeWithoutMenusResponse
     */
    'data': Array<MenuTypeWithoutMenusResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuTypeWithoutMenusResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuWithoutCompanyAdminResponse
 */
export interface ListMenuWithoutCompanyAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuWithoutCompanyAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuWithoutCompanyAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuWithoutCompanyAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuWithoutCompanyAdminResponse>}
     * @memberof ListMenuWithoutCompanyAdminResponse
     */
    'data': Array<MenuWithoutCompanyAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuWithoutCompanyAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListMenuWithoutCompanyResponse
 */
export interface ListMenuWithoutCompanyResponse {
    /**
     * 
     * @type {number}
     * @memberof ListMenuWithoutCompanyResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListMenuWithoutCompanyResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListMenuWithoutCompanyResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<MenuWithoutCompanyResponse>}
     * @memberof ListMenuWithoutCompanyResponse
     */
    'data': Array<MenuWithoutCompanyResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListMenuWithoutCompanyResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListOrderAdminWithoutCompanyAndMealsResponse
 */
export interface ListOrderAdminWithoutCompanyAndMealsResponse {
    /**
     * 
     * @type {number}
     * @memberof ListOrderAdminWithoutCompanyAndMealsResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListOrderAdminWithoutCompanyAndMealsResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListOrderAdminWithoutCompanyAndMealsResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<OrderAdminWithoutCompanyAndMealsResponse>}
     * @memberof ListOrderAdminWithoutCompanyAndMealsResponse
     */
    'data': Array<OrderAdminWithoutCompanyAndMealsResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListOrderAdminWithoutCompanyAndMealsResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListOrderDateWithoutMealsAdminResponse
 */
export interface ListOrderDateWithoutMealsAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof ListOrderDateWithoutMealsAdminResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListOrderDateWithoutMealsAdminResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListOrderDateWithoutMealsAdminResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<OrderDateWithoutMealsAdminResponse>}
     * @memberof ListOrderDateWithoutMealsAdminResponse
     */
    'data': Array<OrderDateWithoutMealsAdminResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListOrderDateWithoutMealsAdminResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListOrderDateWithoutOrderIdResponse
 */
export interface ListOrderDateWithoutOrderIdResponse {
    /**
     * 
     * @type {number}
     * @memberof ListOrderDateWithoutOrderIdResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListOrderDateWithoutOrderIdResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListOrderDateWithoutOrderIdResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<OrderDateWithoutOrderIdResponse>}
     * @memberof ListOrderDateWithoutOrderIdResponse
     */
    'data': Array<OrderDateWithoutOrderIdResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListOrderDateWithoutOrderIdResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListOrderWithoutMealsResponse
 */
export interface ListOrderWithoutMealsResponse {
    /**
     * 
     * @type {number}
     * @memberof ListOrderWithoutMealsResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListOrderWithoutMealsResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListOrderWithoutMealsResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<OrderWithoutMealsResponse>}
     * @memberof ListOrderWithoutMealsResponse
     */
    'data': Array<OrderWithoutMealsResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListOrderWithoutMealsResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListResponsePagination
 */
export interface ListResponsePagination {
    /**
     * 
     * @type {number}
     * @memberof ListResponsePagination
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ListResponsePagination
     */
    'limit': number;
    /**
     * 
     * @type {number}
     * @memberof ListResponsePagination
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof ListResponsePagination
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof ListResponsePagination
     */
    'totalItems': number;
    /**
     * 
     * @type {object}
     * @memberof ListResponsePagination
     */
    'extra': object;
}
/**
 * 
 * @export
 * @interface ListTagResponse
 */
export interface ListTagResponse {
    /**
     * 
     * @type {number}
     * @memberof ListTagResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListTagResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListTagResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<TagResponse>}
     * @memberof ListTagResponse
     */
    'data': Array<TagResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListTagResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListUserResponse
 */
export interface ListUserResponse {
    /**
     * 
     * @type {number}
     * @memberof ListUserResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListUserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListUserResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<UserResponse>}
     * @memberof ListUserResponse
     */
    'data': Array<UserResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListUserResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListUserWithRoleAndCompanyResponse
 */
export interface ListUserWithRoleAndCompanyResponse {
    /**
     * 
     * @type {number}
     * @memberof ListUserWithRoleAndCompanyResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListUserWithRoleAndCompanyResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListUserWithRoleAndCompanyResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<UserWithRoleAndCompanyResponse>}
     * @memberof ListUserWithRoleAndCompanyResponse
     */
    'data': Array<UserWithRoleAndCompanyResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListUserWithRoleAndCompanyResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface ListUserWithRoleResponse
 */
export interface ListUserWithRoleResponse {
    /**
     * 
     * @type {number}
     * @memberof ListUserWithRoleResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof ListUserWithRoleResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListUserWithRoleResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {Array<UserWithRoleResponse>}
     * @memberof ListUserWithRoleResponse
     */
    'data': Array<UserWithRoleResponse>;
    /**
     * 
     * @type {ListResponsePagination}
     * @memberof ListUserWithRoleResponse
     */
    'pagination': ListResponsePagination;
}
/**
 * 
 * @export
 * @interface LoginData
 */
export interface LoginData {
    /**
     * 
     * @type {string}
     * @memberof LoginData
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof LoginData
     */
    'refreshToken': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginData
     */
    'userRoles': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LoginData
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginRequest
     */
    'rememberMe'?: boolean;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {number}
     * @memberof LoginResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {LoginData}
     * @memberof LoginResponse
     */
    'data': LoginData;
}
/**
 * 
 * @export
 * @interface MealAdminResponse
 */
export interface MealAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof MealAdminResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MealAdminResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MealAdminResponse
     */
    'type': MealAdminResponseTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealAdminResponse
     */
    'sizes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealAdminResponse
     */
    'kCalories': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MealAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealAdminResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {Array<TagWithoutMealsResponse>}
     * @memberof MealAdminResponse
     */
    'tags': Array<TagWithoutMealsResponse>;
}

export const MealAdminResponseTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type MealAdminResponseTypeEnum = typeof MealAdminResponseTypeEnum[keyof typeof MealAdminResponseTypeEnum];

/**
 * 
 * @export
 * @interface MealDto
 */
export interface MealDto {
    /**
     * 
     * @type {string}
     * @memberof MealDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MealDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MealDto
     */
    'type': MealDtoTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealDto
     */
    'sizes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealDto
     */
    'kCalories': Array<string>;
}

export const MealDtoTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type MealDtoTypeEnum = typeof MealDtoTypeEnum[keyof typeof MealDtoTypeEnum];

/**
 * 
 * @export
 * @interface MealFeedResponse
 */
export interface MealFeedResponse {
    /**
     * 
     * @type {number}
     * @memberof MealFeedResponse
     */
    'averageRating': number;
    /**
     * 
     * @type {string}
     * @memberof MealFeedResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MealFeedResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MealFeedResponse
     */
    'type': MealFeedResponseTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealFeedResponse
     */
    'sizes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealFeedResponse
     */
    'kCalories': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MealFeedResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealFeedResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MealFeedResponse
     */
    'companyId': string;
}

export const MealFeedResponseTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type MealFeedResponseTypeEnum = typeof MealFeedResponseTypeEnum[keyof typeof MealFeedResponseTypeEnum];

/**
 * 
 * @export
 * @interface MealPaginatedResults
 */
export interface MealPaginatedResults {
    /**
     * 
     * @type {Array<MealFeedResponse>}
     * @memberof MealPaginatedResults
     */
    'items': Array<MealFeedResponse>;
    /**
     * 
     * @type {PaginationMeta}
     * @memberof MealPaginatedResults
     */
    'meta': PaginationMeta;
}
/**
 * 
 * @export
 * @interface MealRatingAdminResponse
 */
export interface MealRatingAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MealRatingAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MealRatingAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealRatingAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof MealRatingAdminResponse
     */
    'createdBy': UserBasicResponse;
    /**
     * 
     * @type {string}
     * @memberof MealRatingAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {MealWithoutCompanyResponse}
     * @memberof MealRatingAdminResponse
     */
    'meal': MealWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MealRatingDto
 */
export interface MealRatingDto {
    /**
     * 
     * @type {number}
     * @memberof MealRatingDto
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingDto
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MealRatingDto
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealRatingDto
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MealRatingDto
     */
    'createdBy': UserResponseExternal;
}
/**
 * 
 * @export
 * @interface MealRatingResponseExternal
 */
export interface MealRatingResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof MealRatingResponseExternal
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingResponseExternal
     */
    'comment': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealRatingResponseExternal
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MealRatingResponseExternal
     */
    'createdBy': UserResponseExternal;
    /**
     * 
     * @type {string}
     * @memberof MealRatingResponseExternal
     */
    'id': string;
    /**
     * 
     * @type {MealWithoutCompanyResponse}
     * @memberof MealRatingResponseExternal
     */
    'meal': MealWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MealRatingWithoutCompanyAdminResponse
 */
export interface MealRatingWithoutCompanyAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MealRatingWithoutCompanyAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutCompanyAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutCompanyAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof MealRatingWithoutCompanyAdminResponse
     */
    'createdBy': UserBasicResponse;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutCompanyAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {MealWithoutCompanyResponse}
     * @memberof MealRatingWithoutCompanyAdminResponse
     */
    'meal': MealWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MealRatingWithoutCompanyResponseExternal
 */
export interface MealRatingWithoutCompanyResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof MealRatingWithoutCompanyResponseExternal
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutCompanyResponseExternal
     */
    'comment': string;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MealRatingWithoutCompanyResponseExternal
     */
    'createdBy': UserResponseExternal;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutCompanyResponseExternal
     */
    'id': string;
    /**
     * 
     * @type {MealWithoutCompanyResponse}
     * @memberof MealRatingWithoutCompanyResponseExternal
     */
    'meal': MealWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MealRatingWithoutMealAdminResponse
 */
export interface MealRatingWithoutMealAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MealRatingWithoutMealAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutMealAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutMealAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealRatingWithoutMealAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof MealRatingWithoutMealAdminResponse
     */
    'createdBy': UserBasicResponse;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutMealAdminResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MealRatingWithoutMealResponseExternal
 */
export interface MealRatingWithoutMealResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof MealRatingWithoutMealResponseExternal
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutMealResponseExternal
     */
    'comment': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealRatingWithoutMealResponseExternal
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MealRatingWithoutMealResponseExternal
     */
    'createdBy': UserResponseExternal;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutMealResponseExternal
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MealRatingWithoutUserAdminResponse
 */
export interface MealRatingWithoutUserAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MealRatingWithoutUserAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutUserAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutUserAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealRatingWithoutUserAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutUserAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {MealWithoutCompanyResponse}
     * @memberof MealRatingWithoutUserAdminResponse
     */
    'meal': MealWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MealRatingWithoutUserResponse
 */
export interface MealRatingWithoutUserResponse {
    /**
     * 
     * @type {number}
     * @memberof MealRatingWithoutUserResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutUserResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutUserResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealRatingWithoutUserResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {string}
     * @memberof MealRatingWithoutUserResponse
     */
    'id': string;
    /**
     * 
     * @type {MealWithoutCompanyResponse}
     * @memberof MealRatingWithoutUserResponse
     */
    'meal': MealWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MealResponse
 */
export interface MealResponse {
    /**
     * 
     * @type {string}
     * @memberof MealResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MealResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MealResponse
     */
    'type': MealResponseTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealResponse
     */
    'sizes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealResponse
     */
    'kCalories': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MealResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealResponse
     */
    'tags': Array<string>;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealResponse
     */
    'company': CompanyWithoutAddressResponse;
}

export const MealResponseTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type MealResponseTypeEnum = typeof MealResponseTypeEnum[keyof typeof MealResponseTypeEnum];

/**
 * 
 * @export
 * @interface MealWithoutCompanyAndTagsResponse
 */
export interface MealWithoutCompanyAndTagsResponse {
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyAndTagsResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyAndTagsResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyAndTagsResponse
     */
    'type': MealWithoutCompanyAndTagsResponseTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutCompanyAndTagsResponse
     */
    'sizes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutCompanyAndTagsResponse
     */
    'kCalories': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyAndTagsResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutCompanyAndTagsResponse
     */
    'pictures': Array<string>;
}

export const MealWithoutCompanyAndTagsResponseTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type MealWithoutCompanyAndTagsResponseTypeEnum = typeof MealWithoutCompanyAndTagsResponseTypeEnum[keyof typeof MealWithoutCompanyAndTagsResponseTypeEnum];

/**
 * 
 * @export
 * @interface MealWithoutCompanyResponse
 */
export interface MealWithoutCompanyResponse {
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyResponse
     */
    'type': MealWithoutCompanyResponseTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutCompanyResponse
     */
    'sizes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutCompanyResponse
     */
    'kCalories': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutCompanyResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutCompanyResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutCompanyResponse
     */
    'tags': Array<string>;
}

export const MealWithoutCompanyResponseTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type MealWithoutCompanyResponseTypeEnum = typeof MealWithoutCompanyResponseTypeEnum[keyof typeof MealWithoutCompanyResponseTypeEnum];

/**
 * 
 * @export
 * @interface MealWithoutTagsResponse
 */
export interface MealWithoutTagsResponse {
    /**
     * 
     * @type {string}
     * @memberof MealWithoutTagsResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutTagsResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutTagsResponse
     */
    'type': MealWithoutTagsResponseTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutTagsResponse
     */
    'sizes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutTagsResponse
     */
    'kCalories': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MealWithoutTagsResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MealWithoutTagsResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MealWithoutTagsResponse
     */
    'company': CompanyWithoutAddressResponse;
}

export const MealWithoutTagsResponseTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type MealWithoutTagsResponseTypeEnum = typeof MealWithoutTagsResponseTypeEnum[keyof typeof MealWithoutTagsResponseTypeEnum];

/**
 * 
 * @export
 * @interface MenuAdminResponse
 */
export interface MenuAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuAdminResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuAdminResponse
     */
    'description': string;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof MenuAdminResponse
     */
    'type': MenuTypeWithoutMenusResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuAdminResponse
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAdminResponse
     */
    'until'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAdminResponse
     */
    'status': MenuAdminResponseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MenuAdminResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {Array<MenuMealAdminResponseForMenu>}
     * @memberof MenuAdminResponse
     */
    'menuMeals': Array<MenuMealAdminResponseForMenu>;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
}

export const MenuAdminResponseStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type MenuAdminResponseStatusEnum = typeof MenuAdminResponseStatusEnum[keyof typeof MenuAdminResponseStatusEnum];

/**
 * 
 * @export
 * @interface MenuConstraintDto
 */
export interface MenuConstraintDto {
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintDto
     */
    'breakfast': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintDto
     */
    'lunch': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintDto
     */
    'dinner': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintDto
     */
    'snack': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintDto
     */
    'dessert': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintDto
     */
    'other': number;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintDto
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintDto
     */
    'orderDay'?: MenuConstraintDtoOrderDayEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintDto
     */
    'menuId': string;
    /**
     * 
     * @type {MenuWithoutTypeIdResponse}
     * @memberof MenuConstraintDto
     */
    'menu': MenuWithoutTypeIdResponse;
}

export const MenuConstraintDtoOrderDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuConstraintDtoOrderDayEnum = typeof MenuConstraintDtoOrderDayEnum[keyof typeof MenuConstraintDtoOrderDayEnum];

/**
 * 
 * @export
 * @interface MenuConstraintResponse
 */
export interface MenuConstraintResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintResponse
     */
    'breakfast': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintResponse
     */
    'lunch': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintResponse
     */
    'dinner': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintResponse
     */
    'snack': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintResponse
     */
    'dessert': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintResponse
     */
    'other': number;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintResponse
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintResponse
     */
    'orderDay'?: MenuConstraintResponseOrderDayEnum;
    /**
     * 
     * @type {MenuWithoutTypeIdResponse}
     * @memberof MenuConstraintResponse
     */
    'menu': MenuWithoutTypeIdResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintResponse
     */
    'id': string;
}

export const MenuConstraintResponseOrderDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuConstraintResponseOrderDayEnum = typeof MenuConstraintResponseOrderDayEnum[keyof typeof MenuConstraintResponseOrderDayEnum];

/**
 * 
 * @export
 * @interface MenuConstraintWithoutMenuResponse
 */
export interface MenuConstraintWithoutMenuResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'breakfast': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'lunch': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'dinner': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'snack': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'dessert': number;
    /**
     * 
     * @type {number}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'other': number;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'orderDay'?: MenuConstraintWithoutMenuResponseOrderDayEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuConstraintWithoutMenuResponse
     */
    'id': string;
}

export const MenuConstraintWithoutMenuResponseOrderDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuConstraintWithoutMenuResponseOrderDayEnum = typeof MenuConstraintWithoutMenuResponseOrderDayEnum[keyof typeof MenuConstraintWithoutMenuResponseOrderDayEnum];

/**
 * 
 * @export
 * @interface MenuDto
 */
export interface MenuDto {
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'typeId': string;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof MenuDto
     */
    'type': MenuTypeWithoutMenusResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'until'?: string;
}
/**
 * 
 * @export
 * @interface MenuMealAdminResponseForMenu
 */
export interface MenuMealAdminResponseForMenu {
    /**
     * 
     * @type {string}
     * @memberof MenuMealAdminResponseForMenu
     */
    'mealId': string;
    /**
     * 
     * @type {MealWithoutCompanyAndTagsResponse}
     * @memberof MenuMealAdminResponseForMenu
     */
    'meal': MealWithoutCompanyAndTagsResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuMealAdminResponseForMenu
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuMealAdminResponseForMenu
     */
    'dayOfWeek'?: MenuMealAdminResponseForMenuDayOfWeekEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuMealAdminResponseForMenu
     */
    'deliverOnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuMealAdminResponseForMenu
     */
    'deliverOnDay'?: MenuMealAdminResponseForMenuDeliverOnDayEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuMealAdminResponseForMenu
     */
    'id': string;
}

export const MenuMealAdminResponseForMenuDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuMealAdminResponseForMenuDayOfWeekEnum = typeof MenuMealAdminResponseForMenuDayOfWeekEnum[keyof typeof MenuMealAdminResponseForMenuDayOfWeekEnum];
export const MenuMealAdminResponseForMenuDeliverOnDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuMealAdminResponseForMenuDeliverOnDayEnum = typeof MenuMealAdminResponseForMenuDeliverOnDayEnum[keyof typeof MenuMealAdminResponseForMenuDeliverOnDayEnum];

/**
 * 
 * @export
 * @interface MenuMealResponse
 */
export interface MenuMealResponse {
    /**
     * 
     * @type {MealWithoutCompanyAndTagsResponse}
     * @memberof MenuMealResponse
     */
    'meal': MealWithoutCompanyAndTagsResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponse
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponse
     */
    'dayOfWeek'?: MenuMealResponseDayOfWeekEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponse
     */
    'deliverOnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponse
     */
    'deliverOnDay'?: MenuMealResponseDeliverOnDayEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponse
     */
    'id': string;
}

export const MenuMealResponseDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuMealResponseDayOfWeekEnum = typeof MenuMealResponseDayOfWeekEnum[keyof typeof MenuMealResponseDayOfWeekEnum];
export const MenuMealResponseDeliverOnDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuMealResponseDeliverOnDayEnum = typeof MenuMealResponseDeliverOnDayEnum[keyof typeof MenuMealResponseDeliverOnDayEnum];

/**
 * 
 * @export
 * @interface MenuMealResponseForMenu
 */
export interface MenuMealResponseForMenu {
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponseForMenu
     */
    'mealId': string;
    /**
     * 
     * @type {MealWithoutCompanyAndTagsResponse}
     * @memberof MenuMealResponseForMenu
     */
    'meal': MealWithoutCompanyAndTagsResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponseForMenu
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponseForMenu
     */
    'dayOfWeek'?: MenuMealResponseForMenuDayOfWeekEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponseForMenu
     */
    'deliverOnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuMealResponseForMenu
     */
    'deliverOnDay'?: MenuMealResponseForMenuDeliverOnDayEnum;
}

export const MenuMealResponseForMenuDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuMealResponseForMenuDayOfWeekEnum = typeof MenuMealResponseForMenuDayOfWeekEnum[keyof typeof MenuMealResponseForMenuDayOfWeekEnum];
export const MenuMealResponseForMenuDeliverOnDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type MenuMealResponseForMenuDeliverOnDayEnum = typeof MenuMealResponseForMenuDeliverOnDayEnum[keyof typeof MenuMealResponseForMenuDeliverOnDayEnum];

/**
 * 
 * @export
 * @interface MenuRatingAdminResponse
 */
export interface MenuRatingAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuRatingAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof MenuRatingAdminResponse
     */
    'createdBy': UserBasicResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {MenuWithoutCompanyResponse}
     * @memberof MenuRatingAdminResponse
     */
    'menu': MenuWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MenuRatingDto
 */
export interface MenuRatingDto {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingDto
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingDto
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingDto
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuRatingDto
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MenuRatingDto
     */
    'createdBy': UserResponseExternal;
}
/**
 * 
 * @export
 * @interface MenuRatingResponseExternal
 */
export interface MenuRatingResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingResponseExternal
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingResponseExternal
     */
    'comment': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuRatingResponseExternal
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MenuRatingResponseExternal
     */
    'createdBy': UserResponseExternal;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingResponseExternal
     */
    'id': string;
    /**
     * 
     * @type {MenuWithoutCompanyResponse}
     * @memberof MenuRatingResponseExternal
     */
    'menu': MenuWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MenuRatingWithoutCompanyAdminResponse
 */
export interface MenuRatingWithoutCompanyAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingWithoutCompanyAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutCompanyAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutCompanyAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof MenuRatingWithoutCompanyAdminResponse
     */
    'createdBy': UserBasicResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutCompanyAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {MenuWithoutCompanyResponse}
     * @memberof MenuRatingWithoutCompanyAdminResponse
     */
    'menu': MenuWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MenuRatingWithoutCompanyResponseExternal
 */
export interface MenuRatingWithoutCompanyResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingWithoutCompanyResponseExternal
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutCompanyResponseExternal
     */
    'comment': string;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MenuRatingWithoutCompanyResponseExternal
     */
    'createdBy': UserResponseExternal;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutCompanyResponseExternal
     */
    'id': string;
    /**
     * 
     * @type {MenuWithoutCompanyResponse}
     * @memberof MenuRatingWithoutCompanyResponseExternal
     */
    'menu': MenuWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MenuRatingWithoutMenuAdminResponse
 */
export interface MenuRatingWithoutMenuAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingWithoutMenuAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutMenuAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutMenuAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuRatingWithoutMenuAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof MenuRatingWithoutMenuAdminResponse
     */
    'createdBy': UserBasicResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutMenuAdminResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MenuRatingWithoutMenuResponseExternal
 */
export interface MenuRatingWithoutMenuResponseExternal {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingWithoutMenuResponseExternal
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutMenuResponseExternal
     */
    'comment': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuRatingWithoutMenuResponseExternal
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {UserResponseExternal}
     * @memberof MenuRatingWithoutMenuResponseExternal
     */
    'createdBy': UserResponseExternal;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutMenuResponseExternal
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MenuRatingWithoutUserAdminResponse
 */
export interface MenuRatingWithoutUserAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingWithoutUserAdminResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutUserAdminResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutUserAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuRatingWithoutUserAdminResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutUserAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {MenuWithoutCompanyResponse}
     * @memberof MenuRatingWithoutUserAdminResponse
     */
    'menu': MenuWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MenuRatingWithoutUserResponse
 */
export interface MenuRatingWithoutUserResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuRatingWithoutUserResponse
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutUserResponse
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutUserResponse
     */
    'orderId': string;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuRatingWithoutUserResponse
     */
    'company': CompanyWithoutAddressResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuRatingWithoutUserResponse
     */
    'id': string;
    /**
     * 
     * @type {MenuWithoutCompanyResponse}
     * @memberof MenuRatingWithoutUserResponse
     */
    'menu': MenuWithoutCompanyResponse;
}
/**
 * 
 * @export
 * @interface MenuResponse
 */
export interface MenuResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'description': string;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof MenuResponse
     */
    'type': MenuTypeWithoutMenusResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'until'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MenuResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {CompanyWithoutAddressResponse}
     * @memberof MenuResponse
     */
    'company': CompanyWithoutAddressResponse;
}
/**
 * 
 * @export
 * @interface MenuTypeDto
 */
export interface MenuTypeDto {
    /**
     * 
     * @type {string}
     * @memberof MenuTypeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuTypeDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface MenuTypeResponse
 */
export interface MenuTypeResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuTypeResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuTypeResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MenuTypeResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<MenuWithoutTypeAndCompanyResponse>}
     * @memberof MenuTypeResponse
     */
    'menus': Array<MenuWithoutTypeAndCompanyResponse>;
}
/**
 * 
 * @export
 * @interface MenuTypeWithoutMenusResponse
 */
export interface MenuTypeWithoutMenusResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuTypeWithoutMenusResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuTypeWithoutMenusResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MenuTypeWithoutMenusResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MenuWithoutCompanyAdminResponse
 */
export interface MenuWithoutCompanyAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'description': string;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'type': MenuTypeWithoutMenusResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'until'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'status': MenuWithoutCompanyAdminResponseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'pictures': Array<string>;
    /**
     * 
     * @type {Array<MenuMealAdminResponseForMenu>}
     * @memberof MenuWithoutCompanyAdminResponse
     */
    'menuMeals': Array<MenuMealAdminResponseForMenu>;
}

export const MenuWithoutCompanyAdminResponseStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type MenuWithoutCompanyAdminResponseStatusEnum = typeof MenuWithoutCompanyAdminResponseStatusEnum[keyof typeof MenuWithoutCompanyAdminResponseStatusEnum];

/**
 * 
 * @export
 * @interface MenuWithoutCompanyResponse
 */
export interface MenuWithoutCompanyResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyResponse
     */
    'description': string;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof MenuWithoutCompanyResponse
     */
    'type': MenuTypeWithoutMenusResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyResponse
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyResponse
     */
    'until'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutCompanyResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MenuWithoutCompanyResponse
     */
    'pictures': Array<string>;
}
/**
 * 
 * @export
 * @interface MenuWithoutTypeAndCompanyResponse
 */
export interface MenuWithoutTypeAndCompanyResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeAndCompanyResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeAndCompanyResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeAndCompanyResponse
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeAndCompanyResponse
     */
    'until'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeAndCompanyResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MenuWithoutTypeAndCompanyResponse
     */
    'pictures': Array<string>;
}
/**
 * 
 * @export
 * @interface MenuWithoutTypeIdResponse
 */
export interface MenuWithoutTypeIdResponse {
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeIdResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeIdResponse
     */
    'description': string;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof MenuWithoutTypeIdResponse
     */
    'type': MenuTypeWithoutMenusResponse;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeIdResponse
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeIdResponse
     */
    'until'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuWithoutTypeIdResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface OrderAdminResponse
 */
export interface OrderAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'fromDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'toDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {CompanyResponse}
     * @memberof OrderAdminResponse
     */
    'company': CompanyResponse;
    /**
     * 
     * @type {AddressWithoutCityResponse}
     * @memberof OrderAdminResponse
     */
    'addressCopy': AddressWithoutCityResponse;
    /**
     * 
     * @type {MenuWithoutTypeIdResponse}
     * @memberof OrderAdminResponse
     */
    'menuCopy': MenuWithoutTypeIdResponse;
    /**
     * 
     * @type {Array<MealWithoutCompanyResponse>}
     * @memberof OrderAdminResponse
     */
    'mealsCopy': Array<MealWithoutCompanyResponse>;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'paidAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'cancelledAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'refundedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof OrderAdminResponse
     */
    'user': UserBasicResponse;
}
/**
 * 
 * @export
 * @interface OrderAdminWithoutCompanyAndMealsResponse
 */
export interface OrderAdminWithoutCompanyAndMealsResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'fromDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'toDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'id': string;
    /**
     * 
     * @type {AddressWithoutCityResponse}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'addressCopy': AddressWithoutCityResponse;
    /**
     * 
     * @type {MenuWithoutTypeIdResponse}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'menuCopy': MenuWithoutTypeIdResponse;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'paidAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'cancelledAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'refundedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {UserBasicResponse}
     * @memberof OrderAdminWithoutCompanyAndMealsResponse
     */
    'user': UserBasicResponse;
}
/**
 * 
 * @export
 * @interface OrderDateAdminResponse
 */
export interface OrderDateAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderDateAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDateAdminResponse
     */
    'deliveryId': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDateAdminResponse
     */
    'dateForDelivery': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateAdminResponse
     */
    'deliveredAt': string;
    /**
     * 
     * @type {Array<OrderDateMealResponse>}
     * @memberof OrderDateAdminResponse
     */
    'orderDateMeals': Array<OrderDateMealResponse>;
    /**
     * 
     * @type {string}
     * @memberof OrderDateAdminResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateAdminResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface OrderDateMealResponse
 */
export interface OrderDateMealResponse {
    /**
     * 
     * @type {MealWithoutCompanyResponse}
     * @memberof OrderDateMealResponse
     */
    'mealCopy': MealWithoutCompanyResponse;
    /**
     * 
     * @type {string}
     * @memberof OrderDateMealResponse
     */
    'cancelledAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateMealResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateMealResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface OrderDateWithoutMealsAdminResponse
 */
export interface OrderDateWithoutMealsAdminResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutMealsAdminResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutMealsAdminResponse
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDateWithoutMealsAdminResponse
     */
    'deliveryId': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutMealsAdminResponse
     */
    'dateForDelivery': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutMealsAdminResponse
     */
    'deliveredAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutMealsAdminResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutMealsAdminResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface OrderDateWithoutOrderIdResponse
 */
export interface OrderDateWithoutOrderIdResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutOrderIdResponse
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDateWithoutOrderIdResponse
     */
    'deliveryId': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutOrderIdResponse
     */
    'dateForDelivery': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutOrderIdResponse
     */
    'deliveredAt': string;
    /**
     * 
     * @type {Array<OrderDateMealResponse>}
     * @memberof OrderDateWithoutOrderIdResponse
     */
    'orderDateMeals': Array<OrderDateMealResponse>;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutOrderIdResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDateWithoutOrderIdResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'fromDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'toDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'id': string;
    /**
     * 
     * @type {CompanyResponse}
     * @memberof OrderResponse
     */
    'company': CompanyResponse;
    /**
     * 
     * @type {AddressWithoutCityResponse}
     * @memberof OrderResponse
     */
    'addressCopy': AddressWithoutCityResponse;
    /**
     * 
     * @type {MenuWithoutTypeIdResponse}
     * @memberof OrderResponse
     */
    'menuCopy': MenuWithoutTypeIdResponse;
    /**
     * 
     * @type {Array<MealWithoutCompanyResponse>}
     * @memberof OrderResponse
     */
    'mealsCopy': Array<MealWithoutCompanyResponse>;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'paidAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'cancelledAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'refundedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface OrderWithoutMealsResponse
 */
export interface OrderWithoutMealsResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'fromDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'toDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'id': string;
    /**
     * 
     * @type {CompanyResponse}
     * @memberof OrderWithoutMealsResponse
     */
    'company': CompanyResponse;
    /**
     * 
     * @type {AddressWithoutCityResponse}
     * @memberof OrderWithoutMealsResponse
     */
    'addressCopy': AddressWithoutCityResponse;
    /**
     * 
     * @type {MenuWithoutTypeIdResponse}
     * @memberof OrderWithoutMealsResponse
     */
    'menuCopy': MenuWithoutTypeIdResponse;
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'paidAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'cancelledAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'refundedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithoutMealsResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface PaginationMeta
 */
export interface PaginationMeta {
    /**
     * 
     * @type {number}
     * @memberof PaginationMeta
     */
    'currentPage': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationMeta
     */
    'itemsPerPage': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationMeta
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationMeta
     */
    'totalItems': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationMeta
     */
    'itemCount': number;
    /**
     * 
     * @type {object}
     * @memberof PaginationMeta
     */
    'extra': object;
}
/**
 * 
 * @export
 * @interface PhoneNumberDto
 */
export interface PhoneNumberDto {
    /**
     * Phone number without country code.
     * @type {string}
     * @memberof PhoneNumberDto
     */
    'number': string;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumberDto
     */
    'isMain'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberDto
     */
    'countryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDto
     */
    'countryNumberPrefix'?: string;
}
/**
 * 
 * @export
 * @interface PhoneNumberResponse
 */
export interface PhoneNumberResponse {
    /**
     * Phone number without country code.
     * @type {string}
     * @memberof PhoneNumberResponse
     */
    'number': string;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumberResponse
     */
    'isMain'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberResponse
     */
    'id': string;
    /**
     * 
     * @type {CountryWithoutLanguagesResponse}
     * @memberof PhoneNumberResponse
     */
    'country': CountryWithoutLanguagesResponse;
}
/**
 * 
 * @export
 * @interface PhoneNumberWithoutCountryResponse
 */
export interface PhoneNumberWithoutCountryResponse {
    /**
     * Phone number without country code.
     * @type {string}
     * @memberof PhoneNumberWithoutCountryResponse
     */
    'number': string;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumberWithoutCountryResponse
     */
    'isMain'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberWithoutCountryResponse
     */
    'countryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberWithoutCountryResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface RefreshTokenData
 */
export interface RefreshTokenData {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenData
     */
    'accessToken': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefreshTokenData
     */
    'userRoles': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenData
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * The refresh token
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface RefreshTokenResponse
 */
export interface RefreshTokenResponse {
    /**
     * 
     * @type {number}
     * @memberof RefreshTokenResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof RefreshTokenResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefreshTokenResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {RefreshTokenData}
     * @memberof RefreshTokenResponse
     */
    'data': RefreshTokenData;
}
/**
 * 
 * @export
 * @interface RequestEmailVerificationDto
 */
export interface RequestEmailVerificationDto {
    /**
     * The email to verify
     * @type {string}
     * @memberof RequestEmailVerificationDto
     */
    'email': string;
    /**
     * The user id
     * @type {string}
     * @memberof RequestEmailVerificationDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface RequestSmsVerificationDto
 */
export interface RequestSmsVerificationDto {
    /**
     * The user id
     * @type {string}
     * @memberof RequestSmsVerificationDto
     */
    'userId': string;
    /**
     * The phone number id
     * @type {string}
     * @memberof RequestSmsVerificationDto
     */
    'phoneNumberId': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
    /**
     * The reset password token
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'resetPasswordToken': string;
    /**
     * The new password of the user
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface SuccessDeterminationResponse
 */
export interface SuccessDeterminationResponse {
    /**
     * 
     * @type {number}
     * @memberof SuccessDeterminationResponse
     */
    'code': number;
    /**
     * 
     * @type {boolean}
     * @memberof SuccessDeterminationResponse
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof SuccessDeterminationResponse
     */
    'errors': Array<string>;
    /**
     * 
     * @type {SuccessDeterminationResponseData}
     * @memberof SuccessDeterminationResponse
     */
    'data': SuccessDeterminationResponseData;
}
/**
 * 
 * @export
 * @interface SuccessDeterminationResponseData
 */
export interface SuccessDeterminationResponseData {
    /**
     * 
     * @type {boolean}
     * @memberof SuccessDeterminationResponseData
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface TagDto
 */
export interface TagDto {
    /**
     * 
     * @type {string}
     * @memberof TagDto
     */
    'name': string;
    /**
     * 
     * @type {Array<MealWithoutTagsResponse>}
     * @memberof TagDto
     */
    'meals': Array<MealWithoutTagsResponse>;
}
/**
 * 
 * @export
 * @interface TagResponse
 */
export interface TagResponse {
    /**
     * 
     * @type {string}
     * @memberof TagResponse
     */
    'name': string;
    /**
     * 
     * @type {Array<MealWithoutTagsResponse>}
     * @memberof TagResponse
     */
    'meals': Array<MealWithoutTagsResponse>;
    /**
     * 
     * @type {string}
     * @memberof TagResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TagWithoutMealsResponse
 */
export interface TagWithoutMealsResponse {
    /**
     * 
     * @type {string}
     * @memberof TagWithoutMealsResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TagWithoutMealsResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UnassignMenuMealsBody
 */
export interface UnassignMenuMealsBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnassignMenuMealsBody
     */
    'menuMealIds': Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateAddressDto
 */
export interface UpdateAddressDto {
    /**
     * Name of the address
     * @type {string}
     * @memberof UpdateAddressDto
     */
    'name'?: string;
    /**
     * Street 1
     * @type {string}
     * @memberof UpdateAddressDto
     */
    'street_1'?: string;
    /**
     * Street 2
     * @type {string}
     * @memberof UpdateAddressDto
     */
    'street_2'?: string;
    /**
     * Postal Code
     * @type {string}
     * @memberof UpdateAddressDto
     */
    'post_code'?: string;
    /**
     * City ID
     * @type {number}
     * @memberof UpdateAddressDto
     */
    'cityId'?: number;
    /**
     * Indicates if this is the main address
     * @type {boolean}
     * @memberof UpdateAddressDto
     */
    'main_address'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateCompanyAdminDto
 */
export interface UpdateCompanyAdminDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyAdminDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyAdminDto
     */
    'publicPhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyAdminDto
     */
    'email'?: string;
    /**
     * 
     * @type {AddressForCompanyResponse}
     * @memberof UpdateCompanyAdminDto
     */
    'address'?: AddressForCompanyResponse;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyAdminDto
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyAdminDto
     */
    'taxId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyAdminDto
     */
    'internalPhoneNumber'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateCompanyAdminDto
     */
    'contractIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateLanguageDto
 */
export interface UpdateLanguageDto {
    /**
     * The name of the language
     * @type {string}
     * @memberof UpdateLanguageDto
     */
    'name'?: string;
    /**
     * The local name of the language
     * @type {string}
     * @memberof UpdateLanguageDto
     */
    'nameLocal'?: string;
    /**
     * The code of the language
     * @type {string}
     * @memberof UpdateLanguageDto
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMealDto
 */
export interface UpdateMealDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMealDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMealDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMealDto
     */
    'type'?: UpdateMealDtoTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateMealDto
     */
    'sizes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateMealDto
     */
    'kCalories'?: Array<string>;
}

export const UpdateMealDtoTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER',
    Snack: 'SNACK',
    Dessert: 'DESSERT',
    Other: 'OTHER'
} as const;

export type UpdateMealDtoTypeEnum = typeof UpdateMealDtoTypeEnum[keyof typeof UpdateMealDtoTypeEnum];

/**
 * 
 * @export
 * @interface UpdateMenuConstraintDto
 */
export interface UpdateMenuConstraintDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateMenuConstraintDto
     */
    'breakfast'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMenuConstraintDto
     */
    'lunch'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMenuConstraintDto
     */
    'dinner'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMenuConstraintDto
     */
    'snack'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMenuConstraintDto
     */
    'dessert'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMenuConstraintDto
     */
    'other'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuConstraintDto
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuConstraintDto
     */
    'orderDay'?: UpdateMenuConstraintDtoOrderDayEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuConstraintDto
     */
    'menuId'?: string;
    /**
     * 
     * @type {MenuWithoutTypeIdResponse}
     * @memberof UpdateMenuConstraintDto
     */
    'menu'?: MenuWithoutTypeIdResponse;
}

export const UpdateMenuConstraintDtoOrderDayEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type UpdateMenuConstraintDtoOrderDayEnum = typeof UpdateMenuConstraintDtoOrderDayEnum[keyof typeof UpdateMenuConstraintDtoOrderDayEnum];

/**
 * 
 * @export
 * @interface UpdateMenuDto
 */
export interface UpdateMenuDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuDto
     */
    'typeId'?: string;
    /**
     * 
     * @type {MenuTypeWithoutMenusResponse}
     * @memberof UpdateMenuDto
     */
    'type'?: MenuTypeWithoutMenusResponse;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuDto
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuDto
     */
    'until'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuDto
     */
    'status'?: UpdateMenuDtoStatusEnum;
}

export const UpdateMenuDtoStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type UpdateMenuDtoStatusEnum = typeof UpdateMenuDtoStatusEnum[keyof typeof UpdateMenuDtoStatusEnum];

/**
 * 
 * @export
 * @interface UpdateMenuTypeDto
 */
export interface UpdateMenuTypeDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuTypeDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMenuTypeDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface UpdateTagDto
 */
export interface UpdateTagDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateTagDto
     */
    'name'?: string;
    /**
     * 
     * @type {Array<MealWithoutTagsResponse>}
     * @memberof UpdateTagDto
     */
    'meals'?: Array<MealWithoutTagsResponse>;
}
/**
 * 
 * @export
 * @interface UpdateUserBySuperAdminDto
 */
export interface UpdateUserBySuperAdminDto {
    /**
     * Title of the user
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'title'?: UpdateUserBySuperAdminDtoTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'name'?: string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'surname'?: string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'gender'?: UpdateUserBySuperAdminDtoGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'birthDate'?: string;
    /**
     * 
     * @type {AddressDto}
     * @memberof UpdateUserBySuperAdminDto
     */
    'address'?: AddressDto;
    /**
     * 
     * @type {UserRegisterPhoneNumberDto}
     * @memberof UpdateUserBySuperAdminDto
     */
    'userRegisterPhoneNumber'?: UserRegisterPhoneNumberDto;
    /**
     * The preferred language of the user
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'preferredLanguageCode'?: string;
    /**
     * Company id of the user
     * @type {string}
     * @memberof UpdateUserBySuperAdminDto
     */
    'companyId'?: string;
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof UpdateUserBySuperAdminDto
     */
    'role'?: UserRoleEnum;
}

export const UpdateUserBySuperAdminDtoTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UpdateUserBySuperAdminDtoTitleEnum = typeof UpdateUserBySuperAdminDtoTitleEnum[keyof typeof UpdateUserBySuperAdminDtoTitleEnum];
export const UpdateUserBySuperAdminDtoGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UpdateUserBySuperAdminDtoGenderEnum = typeof UpdateUserBySuperAdminDtoGenderEnum[keyof typeof UpdateUserBySuperAdminDtoGenderEnum];

/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * Title of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'title'?: UpdateUserDtoTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'name'?: string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'surname'?: string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'gender'?: UpdateUserDtoGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'birthDate'?: string;
    /**
     * The preferred language of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'preferredLanguageCode'?: string;
}

export const UpdateUserDtoTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UpdateUserDtoTitleEnum = typeof UpdateUserDtoTitleEnum[keyof typeof UpdateUserDtoTitleEnum];
export const UpdateUserDtoGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UpdateUserDtoGenderEnum = typeof UpdateUserDtoGenderEnum[keyof typeof UpdateUserDtoGenderEnum];

/**
 * 
 * @export
 * @interface UserBasicResponse
 */
export interface UserBasicResponse {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserBasicResponse
     */
    'title': UserBasicResponseTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserBasicResponse
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserBasicResponse
     */
    'surname': string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UserBasicResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserBasicResponse
     */
    'gender'?: UserBasicResponseGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UserBasicResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserBasicResponse
     */
    'id': string;
}

export const UserBasicResponseTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserBasicResponseTitleEnum = typeof UserBasicResponseTitleEnum[keyof typeof UserBasicResponseTitleEnum];
export const UserBasicResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserBasicResponseGenderEnum = typeof UserBasicResponseGenderEnum[keyof typeof UserBasicResponseGenderEnum];

/**
 * 
 * @export
 * @interface UserCreationBySuperAdminDto
 */
export interface UserCreationBySuperAdminDto {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'title': UserCreationBySuperAdminDtoTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'surname': string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'gender'?: UserCreationBySuperAdminDtoGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'birthDate'?: string;
    /**
     * 
     * @type {AddressDto}
     * @memberof UserCreationBySuperAdminDto
     */
    'address'?: AddressDto;
    /**
     * 
     * @type {UserRegisterPhoneNumberDto}
     * @memberof UserCreationBySuperAdminDto
     */
    'userRegisterPhoneNumber'?: UserRegisterPhoneNumberDto;
    /**
     * The preferred language of the user
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'preferredLanguageCode'?: string;
    /**
     * Company id of the user
     * @type {string}
     * @memberof UserCreationBySuperAdminDto
     */
    'companyId'?: string;
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof UserCreationBySuperAdminDto
     */
    'role': UserRoleEnum;
}

export const UserCreationBySuperAdminDtoTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserCreationBySuperAdminDtoTitleEnum = typeof UserCreationBySuperAdminDtoTitleEnum[keyof typeof UserCreationBySuperAdminDtoTitleEnum];
export const UserCreationBySuperAdminDtoGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserCreationBySuperAdminDtoGenderEnum = typeof UserCreationBySuperAdminDtoGenderEnum[keyof typeof UserCreationBySuperAdminDtoGenderEnum];

/**
 * 
 * @export
 * @interface UserRegisterPhoneNumberDto
 */
export interface UserRegisterPhoneNumberDto {
    /**
     * Phone number without country code.
     * @type {string}
     * @memberof UserRegisterPhoneNumberDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterPhoneNumberDto
     */
    'countryNumberPrefix': string;
}
/**
 * 
 * @export
 * @interface UserRegistrationDto
 */
export interface UserRegistrationDto {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'title': UserRegistrationDtoTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'surname': string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'gender'?: UserRegistrationDtoGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'birthDate'?: string;
    /**
     * The password of the user
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'password': string;
    /**
     * 
     * @type {AddressDto}
     * @memberof UserRegistrationDto
     */
    'address'?: AddressDto;
    /**
     * 
     * @type {UserRegisterPhoneNumberDto}
     * @memberof UserRegistrationDto
     */
    'userRegisterPhoneNumber'?: UserRegisterPhoneNumberDto;
    /**
     * The preferred language of the user
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'preferredLanguageCode'?: string;
}

export const UserRegistrationDtoTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserRegistrationDtoTitleEnum = typeof UserRegistrationDtoTitleEnum[keyof typeof UserRegistrationDtoTitleEnum];
export const UserRegistrationDtoGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserRegistrationDtoGenderEnum = typeof UserRegistrationDtoGenderEnum[keyof typeof UserRegistrationDtoGenderEnum];

/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserResponse
     */
    'title': UserResponseTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserResponse
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserResponse
     */
    'surname': string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UserResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'gender'?: UserResponseGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UserResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<PhoneNumberWithoutCountryResponse>}
     * @memberof UserResponse
     */
    'phoneNumbers': Array<PhoneNumberWithoutCountryResponse>;
    /**
     * 
     * @type {Array<AddressWithoutCityResponse>}
     * @memberof UserResponse
     */
    'addresses': Array<AddressWithoutCityResponse>;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'preferredLanguageId': string;
}

export const UserResponseTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserResponseTitleEnum = typeof UserResponseTitleEnum[keyof typeof UserResponseTitleEnum];
export const UserResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserResponseGenderEnum = typeof UserResponseGenderEnum[keyof typeof UserResponseGenderEnum];

/**
 * 
 * @export
 * @interface UserResponseExternal
 */
export interface UserResponseExternal {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserResponseExternal
     */
    'title': UserResponseExternalTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserResponseExternal
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserResponseExternal
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseExternal
     */
    'gender'?: UserResponseExternalGenderEnum;
}

export const UserResponseExternalTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserResponseExternalTitleEnum = typeof UserResponseExternalTitleEnum[keyof typeof UserResponseExternalTitleEnum];
export const UserResponseExternalGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserResponseExternalGenderEnum = typeof UserResponseExternalGenderEnum[keyof typeof UserResponseExternalGenderEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const UserRoleEnum = {
    SuperAdmin: 'SUPER_ADMIN',
    CompanyMainAdmin: 'COMPANY_MAIN_ADMIN',
    CompanyAdmin: 'COMPANY_ADMIN',
    Driver: 'DRIVER',
    Worker: 'WORKER',
    Client: 'CLIENT'
} as const;

export type UserRoleEnum = typeof UserRoleEnum[keyof typeof UserRoleEnum];


/**
 * 
 * @export
 * @interface UserWithRoleAndCompanyResponse
 */
export interface UserWithRoleAndCompanyResponse {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'title': UserWithRoleAndCompanyResponseTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'surname': string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'gender'?: UserWithRoleAndCompanyResponseGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<PhoneNumberWithoutCountryResponse>}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'phoneNumbers': Array<PhoneNumberWithoutCountryResponse>;
    /**
     * 
     * @type {Array<AddressWithoutCityResponse>}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'addresses': Array<AddressWithoutCityResponse>;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'preferredLanguageId': string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'role': UserWithRoleAndCompanyResponseRoleEnum;
    /**
     * 
     * @type {CompanyWithoutPersonnelAndAddressAdminResponse}
     * @memberof UserWithRoleAndCompanyResponse
     */
    'company': CompanyWithoutPersonnelAndAddressAdminResponse;
}

export const UserWithRoleAndCompanyResponseTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserWithRoleAndCompanyResponseTitleEnum = typeof UserWithRoleAndCompanyResponseTitleEnum[keyof typeof UserWithRoleAndCompanyResponseTitleEnum];
export const UserWithRoleAndCompanyResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserWithRoleAndCompanyResponseGenderEnum = typeof UserWithRoleAndCompanyResponseGenderEnum[keyof typeof UserWithRoleAndCompanyResponseGenderEnum];
export const UserWithRoleAndCompanyResponseRoleEnum = {
    SuperAdmin: 'SUPER_ADMIN',
    CompanyMainAdmin: 'COMPANY_MAIN_ADMIN',
    CompanyAdmin: 'COMPANY_ADMIN',
    Driver: 'DRIVER',
    Worker: 'WORKER',
    Client: 'CLIENT'
} as const;

export type UserWithRoleAndCompanyResponseRoleEnum = typeof UserWithRoleAndCompanyResponseRoleEnum[keyof typeof UserWithRoleAndCompanyResponseRoleEnum];

/**
 * 
 * @export
 * @interface UserWithRoleResponse
 */
export interface UserWithRoleResponse {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'title': UserWithRoleResponseTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'surname': string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'gender'?: UserWithRoleResponseGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<PhoneNumberWithoutCountryResponse>}
     * @memberof UserWithRoleResponse
     */
    'phoneNumbers': Array<PhoneNumberWithoutCountryResponse>;
    /**
     * 
     * @type {Array<AddressWithoutCityResponse>}
     * @memberof UserWithRoleResponse
     */
    'addresses': Array<AddressWithoutCityResponse>;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'preferredLanguageId': string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRoleResponse
     */
    'role': UserWithRoleResponseRoleEnum;
}

export const UserWithRoleResponseTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserWithRoleResponseTitleEnum = typeof UserWithRoleResponseTitleEnum[keyof typeof UserWithRoleResponseTitleEnum];
export const UserWithRoleResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserWithRoleResponseGenderEnum = typeof UserWithRoleResponseGenderEnum[keyof typeof UserWithRoleResponseGenderEnum];
export const UserWithRoleResponseRoleEnum = {
    SuperAdmin: 'SUPER_ADMIN',
    CompanyMainAdmin: 'COMPANY_MAIN_ADMIN',
    CompanyAdmin: 'COMPANY_ADMIN',
    Driver: 'DRIVER',
    Worker: 'WORKER',
    Client: 'CLIENT'
} as const;

export type UserWithRoleResponseRoleEnum = typeof UserWithRoleResponseRoleEnum[keyof typeof UserWithRoleResponseRoleEnum];

/**
 * 
 * @export
 * @interface UserWithoutPhoneNumbersResponse
 */
export interface UserWithoutPhoneNumbersResponse {
    /**
     * Title of the user
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'title': UserWithoutPhoneNumbersResponseTitleEnum;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'name': string;
    /**
     * Surname of the user
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'surname': string;
    /**
     * The email address of the user
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'gender'?: UserWithoutPhoneNumbersResponseGenderEnum;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<AddressWithoutCityResponse>}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'addresses': Array<AddressWithoutCityResponse>;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPhoneNumbersResponse
     */
    'preferredLanguageId': string;
}

export const UserWithoutPhoneNumbersResponseTitleEnum = {
    Mr: 'MR',
    Ms: 'MS',
    Mrs: 'MRS',
    Miss: 'MISS',
    Dr: 'DR',
    Prof: 'PROF'
} as const;

export type UserWithoutPhoneNumbersResponseTitleEnum = typeof UserWithoutPhoneNumbersResponseTitleEnum[keyof typeof UserWithoutPhoneNumbersResponseTitleEnum];
export const UserWithoutPhoneNumbersResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserWithoutPhoneNumbersResponseGenderEnum = typeof UserWithoutPhoneNumbersResponseGenderEnum[keyof typeof UserWithoutPhoneNumbersResponseGenderEnum];

/**
 * 
 * @export
 * @interface VerifyEmailDto
 */
export interface VerifyEmailDto {
    /**
     * The email to verify
     * @type {string}
     * @memberof VerifyEmailDto
     */
    'email': string;
    /**
     * The verification token
     * @type {string}
     * @memberof VerifyEmailDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface VerifyPhoneDto
 */
export interface VerifyPhoneDto {
    /**
     * Country number prefix
     * @type {string}
     * @memberof VerifyPhoneDto
     */
    'countryNumberPrefix': string;
    /**
     * The phone number without country prefix
     * @type {string}
     * @memberof VerifyPhoneDto
     */
    'phoneNumber': string;
    /**
     * The verification token
     * @type {number}
     * @memberof VerifyPhoneDto
     */
    'token': number;
}

/**
 * AddressExternalApi - axios parameter creator
 * @export
 */
export const AddressExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an address
         * @summary Create an address
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerCreate: async (addressDto: AddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressDto' is not null or undefined
            assertParamExists('addressControllerCreate', 'addressDto', addressDto)
            const localVarPath = `/api/v1/external/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete address by id
         * @summary Delete address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerDeleteOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressControllerDeleteOne', 'id', id)
            const localVarPath = `/api/v1/external/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all addresses
         * @summary Get all addresses
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {AddressControllerFindAllOrderEnum} [order] 
         * @param {AddressControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerFindAll: async (page?: number, limit?: number, search?: string, order?: AddressControllerFindAllOrderEnum, sortBy?: AddressControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get address details by id
         * @summary Get address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerGetAddressById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressControllerGetAddressById', 'id', id)
            const localVarPath = `/api/v1/external/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update address by id
         * @summary Update address by id
         * @param {string} id 
         * @param {UpdateAddressDto} updateAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerUpdateOne: async (id: string, updateAddressDto: UpdateAddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressControllerUpdateOne', 'id', id)
            // verify required parameter 'updateAddressDto' is not null or undefined
            assertParamExists('addressControllerUpdateOne', 'updateAddressDto', updateAddressDto)
            const localVarPath = `/api/v1/external/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAddressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressExternalApi - functional programming interface
 * @export
 */
export const AddressExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an address
         * @summary Create an address
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerCreate(addressDto: AddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerCreate(addressDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete address by id
         * @summary Delete address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerDeleteOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerDeleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all addresses
         * @summary Get all addresses
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {AddressControllerFindAllOrderEnum} [order] 
         * @param {AddressControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerFindAll(page?: number, limit?: number, search?: string, order?: AddressControllerFindAllOrderEnum, sortBy?: AddressControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAddressWithoutCityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerFindAll(page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get address details by id
         * @summary Get address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerGetAddressById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerGetAddressById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update address by id
         * @summary Update address by id
         * @param {string} id 
         * @param {UpdateAddressDto} updateAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerUpdateOne(id: string, updateAddressDto: UpdateAddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerUpdateOne(id, updateAddressDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressExternalApi - factory interface
 * @export
 */
export const AddressExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressExternalApiFp(configuration)
    return {
        /**
         * Create an address
         * @summary Create an address
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerCreate(addressDto: AddressDto, options?: any): AxiosPromise<GenericAddressResponse> {
            return localVarFp.addressControllerCreate(addressDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete address by id
         * @summary Delete address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerDeleteOne(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.addressControllerDeleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all addresses
         * @summary Get all addresses
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {AddressControllerFindAllOrderEnum} [order] 
         * @param {AddressControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerFindAll(page?: number, limit?: number, search?: string, order?: AddressControllerFindAllOrderEnum, sortBy?: AddressControllerFindAllSortByEnum, options?: any): AxiosPromise<ListAddressWithoutCityResponse> {
            return localVarFp.addressControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get address details by id
         * @summary Get address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerGetAddressById(id: string, options?: any): AxiosPromise<GenericAddressResponse> {
            return localVarFp.addressControllerGetAddressById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update address by id
         * @summary Update address by id
         * @param {string} id 
         * @param {UpdateAddressDto} updateAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerUpdateOne(id: string, updateAddressDto: UpdateAddressDto, options?: any): AxiosPromise<GenericAddressResponse> {
            return localVarFp.addressControllerUpdateOne(id, updateAddressDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressExternalApi - object-oriented interface
 * @export
 * @class AddressExternalApi
 * @extends {BaseAPI}
 */
export class AddressExternalApi extends BaseAPI {
    /**
     * Create an address
     * @summary Create an address
     * @param {AddressDto} addressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressExternalApi
     */
    public addressControllerCreate(addressDto: AddressDto, options?: AxiosRequestConfig) {
        return AddressExternalApiFp(this.configuration).addressControllerCreate(addressDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete address by id
     * @summary Delete address by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressExternalApi
     */
    public addressControllerDeleteOne(id: string, options?: AxiosRequestConfig) {
        return AddressExternalApiFp(this.configuration).addressControllerDeleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all addresses
     * @summary Get all addresses
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {AddressControllerFindAllOrderEnum} [order] 
     * @param {AddressControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressExternalApi
     */
    public addressControllerFindAll(page?: number, limit?: number, search?: string, order?: AddressControllerFindAllOrderEnum, sortBy?: AddressControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return AddressExternalApiFp(this.configuration).addressControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get address details by id
     * @summary Get address by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressExternalApi
     */
    public addressControllerGetAddressById(id: string, options?: AxiosRequestConfig) {
        return AddressExternalApiFp(this.configuration).addressControllerGetAddressById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update address by id
     * @summary Update address by id
     * @param {string} id 
     * @param {UpdateAddressDto} updateAddressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressExternalApi
     */
    public addressControllerUpdateOne(id: string, updateAddressDto: UpdateAddressDto, options?: AxiosRequestConfig) {
        return AddressExternalApiFp(this.configuration).addressControllerUpdateOne(id, updateAddressDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AddressControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AddressControllerFindAllOrderEnum = typeof AddressControllerFindAllOrderEnum[keyof typeof AddressControllerFindAllOrderEnum];
/**
 * @export
 */
export const AddressControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    City: 'city',
    Street1: 'street_1',
    Street2: 'street_2',
    PostCode: 'post_code'
} as const;
export type AddressControllerFindAllSortByEnum = typeof AddressControllerFindAllSortByEnum[keyof typeof AddressControllerFindAllSortByEnum];


/**
 * AddressInternalApi - axios parameter creator
 * @export
 */
export const AddressInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an address by ketering admin
         * @summary Create an address by ketering admin
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerCreate: async (addressDto: AddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressDto' is not null or undefined
            assertParamExists('addressAdminControllerCreate', 'addressDto', addressDto)
            const localVarPath = `/api/v1/internal/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete address by id
         * @summary Delete address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerDeleteOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressAdminControllerDeleteOne', 'id', id)
            const localVarPath = `/api/v1/internal/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all addresses
         * @summary Get all addresses
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {AddressAdminControllerFindAllOrderEnum} [order] 
         * @param {AddressAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerFindAll: async (page?: number, limit?: number, search?: string, order?: AddressAdminControllerFindAllOrderEnum, sortBy?: AddressAdminControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get address details by id
         * @summary Get address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerGetAddressById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressAdminControllerGetAddressById', 'id', id)
            const localVarPath = `/api/v1/internal/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update address by id
         * @summary Update address by id
         * @param {string} id 
         * @param {UpdateAddressDto} updateAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerUpdateOne: async (id: string, updateAddressDto: UpdateAddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressAdminControllerUpdateOne', 'id', id)
            // verify required parameter 'updateAddressDto' is not null or undefined
            assertParamExists('addressAdminControllerUpdateOne', 'updateAddressDto', updateAddressDto)
            const localVarPath = `/api/v1/internal/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAddressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressInternalApi - functional programming interface
 * @export
 */
export const AddressInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an address by ketering admin
         * @summary Create an address by ketering admin
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressAdminControllerCreate(addressDto: AddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericAddressAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressAdminControllerCreate(addressDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete address by id
         * @summary Delete address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressAdminControllerDeleteOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressAdminControllerDeleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all addresses
         * @summary Get all addresses
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {AddressAdminControllerFindAllOrderEnum} [order] 
         * @param {AddressAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: AddressAdminControllerFindAllOrderEnum, sortBy?: AddressAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAddressAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressAdminControllerFindAll(page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get address details by id
         * @summary Get address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressAdminControllerGetAddressById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericAddressAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressAdminControllerGetAddressById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update address by id
         * @summary Update address by id
         * @param {string} id 
         * @param {UpdateAddressDto} updateAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressAdminControllerUpdateOne(id: string, updateAddressDto: UpdateAddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericAddressAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressAdminControllerUpdateOne(id, updateAddressDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressInternalApi - factory interface
 * @export
 */
export const AddressInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressInternalApiFp(configuration)
    return {
        /**
         * Create an address by ketering admin
         * @summary Create an address by ketering admin
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerCreate(addressDto: AddressDto, options?: any): AxiosPromise<GenericAddressAdminResponse> {
            return localVarFp.addressAdminControllerCreate(addressDto, options).then((request) => request(axios, basePath));
        },
        /**a
         * Delete address by id
         * @summary Delete address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerDeleteOne(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.addressAdminControllerDeleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all addresses
         * @summary Get all addresses
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {AddressAdminControllerFindAllOrderEnum} [order] 
         * @param {AddressAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: AddressAdminControllerFindAllOrderEnum, sortBy?: AddressAdminControllerFindAllSortByEnum, options?: any): AxiosPromise<ListAddressAdminResponse> {
            return localVarFp.addressAdminControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get address details by id
         * @summary Get address by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerGetAddressById(id: string, options?: any): AxiosPromise<GenericAddressAdminResponse> {
            return localVarFp.addressAdminControllerGetAddressById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update address by id
         * @summary Update address by id
         * @param {string} id 
         * @param {UpdateAddressDto} updateAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressAdminControllerUpdateOne(id: string, updateAddressDto: UpdateAddressDto, options?: any): AxiosPromise<GenericAddressAdminResponse> {
            return localVarFp.addressAdminControllerUpdateOne(id, updateAddressDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressInternalApi - object-oriented interface
 * @export
 * @class AddressInternalApi
 * @extends {BaseAPI}
 */
export class AddressInternalApi extends BaseAPI {
    /**
     * Create an address by ketering admin
     * @summary Create an address by ketering admin
     * @param {AddressDto} addressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressInternalApi
     */
    public addressAdminControllerCreate(addressDto: AddressDto, options?: AxiosRequestConfig) {
        return AddressInternalApiFp(this.configuration).addressAdminControllerCreate(addressDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete address by id
     * @summary Delete address by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressInternalApi
     */
    public addressAdminControllerDeleteOne(id: string, options?: AxiosRequestConfig) {
        return AddressInternalApiFp(this.configuration).addressAdminControllerDeleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all addresses
     * @summary Get all addresses
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {AddressAdminControllerFindAllOrderEnum} [order] 
     * @param {AddressAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressInternalApi
     */
    public addressAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: AddressAdminControllerFindAllOrderEnum, sortBy?: AddressAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return AddressInternalApiFp(this.configuration).addressAdminControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get address details by id
     * @summary Get address by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressInternalApi
     */
    public addressAdminControllerGetAddressById(id: string, options?: AxiosRequestConfig) {
        return AddressInternalApiFp(this.configuration).addressAdminControllerGetAddressById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update address by id
     * @summary Update address by id
     * @param {string} id 
     * @param {UpdateAddressDto} updateAddressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressInternalApi
     */
    public addressAdminControllerUpdateOne(id: string, updateAddressDto: UpdateAddressDto, options?: AxiosRequestConfig) {
        return AddressInternalApiFp(this.configuration).addressAdminControllerUpdateOne(id, updateAddressDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AddressAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AddressAdminControllerFindAllOrderEnum = typeof AddressAdminControllerFindAllOrderEnum[keyof typeof AddressAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const AddressAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    City: 'city',
    Street1: 'street_1',
    Street2: 'street_2',
    PostCode: 'post_code',
    Company: 'company'
} as const;
export type AddressAdminControllerFindAllSortByEnum = typeof AddressAdminControllerFindAllSortByEnum[keyof typeof AddressAdminControllerFindAllSortByEnum];


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Authenticates the user.
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginRequest: LoginRequest, providedDeviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('authControllerLogin', 'loginRequest', loginRequest)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (providedDeviceId != null) {
                localVarHeaderParameter['Provided-Device-Id'] = String(providedDeviceId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs the user out of the system.
         * @summary Logout
         * @param {string} authorization 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (authorization: string, providedDeviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('authControllerLogout', 'authorization', authorization)
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (providedDeviceId != null) {
                localVarHeaderParameter['Provided-Device-Id'] = String(providedDeviceId);
            }

            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refreshes the user\'s access token.
         * @summary Refresh Token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshToken: async (refreshTokenRequest: RefreshTokenRequest, providedDeviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('authControllerRefreshToken', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/api/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (providedDeviceId != null) {
                localVarHeaderParameter['Provided-Device-Id'] = String(providedDeviceId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Authenticates the user.
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginRequest: LoginRequest, providedDeviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginRequest, providedDeviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Logs the user out of the system.
         * @summary Logout
         * @param {string} authorization 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(authorization: string, providedDeviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(authorization, providedDeviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refreshes the user\'s access token.
         * @summary Refresh Token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefreshToken(refreshTokenRequest: RefreshTokenRequest, providedDeviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefreshToken(refreshTokenRequest, providedDeviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Authenticates the user.
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginRequest: LoginRequest, providedDeviceId?: string, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.authControllerLogin(loginRequest, providedDeviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Logs the user out of the system.
         * @summary Logout
         * @param {string} authorization 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(authorization: string, providedDeviceId?: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.authControllerLogout(authorization, providedDeviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes the user\'s access token.
         * @summary Refresh Token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshToken(refreshTokenRequest: RefreshTokenRequest, providedDeviceId?: string, options?: any): AxiosPromise<RefreshTokenResponse> {
            return localVarFp.authControllerRefreshToken(refreshTokenRequest, providedDeviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Authenticates the user.
     * @summary Login
     * @param {LoginRequest} loginRequest 
     * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginRequest: LoginRequest, providedDeviceId?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginRequest, providedDeviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logs the user out of the system.
     * @summary Logout
     * @param {string} authorization 
     * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(authorization: string, providedDeviceId?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogout(authorization, providedDeviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refreshes the user\'s access token.
     * @summary Refresh Token
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {string} [providedDeviceId] Unique DeviceID that is provided TO BackEnd.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRefreshToken(refreshTokenRequest: RefreshTokenRequest, providedDeviceId?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRefreshToken(refreshTokenRequest, providedDeviceId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CitiesInternalApi - axios parameter creator
 * @export
 */
export const CitiesInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change the status of a specific city by its ID
         * @summary Change status of city by ID
         * @param {number} id 
         * @param {CityStatusBodyDto} cityStatusBodyDto City status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityAdminControllerChangeStatus: async (id: number, cityStatusBodyDto: CityStatusBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cityAdminControllerChangeStatus', 'id', id)
            // verify required parameter 'cityStatusBodyDto' is not null or undefined
            assertParamExists('cityAdminControllerChangeStatus', 'cityStatusBodyDto', cityStatusBodyDto)
            const localVarPath = `/api/v1/internal/cities/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cityStatusBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of disabled cities
         * @summary Get disabled cities
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityAdminControllerGetDisabled: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/cities/disabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific city by its ID
         * @summary Update city by ID
         * @param {number} id 
         * @param {CityDto} cityDto City data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityAdminControllerUpdateCity: async (id: number, cityDto: CityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cityAdminControllerUpdateCity', 'id', id)
            // verify required parameter 'cityDto' is not null or undefined
            assertParamExists('cityAdminControllerUpdateCity', 'cityDto', cityDto)
            const localVarPath = `/api/v1/internal/cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CitiesInternalApi - functional programming interface
 * @export
 */
export const CitiesInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CitiesInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Change the status of a specific city by its ID
         * @summary Change status of city by ID
         * @param {number} id 
         * @param {CityStatusBodyDto} cityStatusBodyDto City status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cityAdminControllerChangeStatus(id: number, cityStatusBodyDto: CityStatusBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cityAdminControllerChangeStatus(id, cityStatusBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of disabled cities
         * @summary Get disabled cities
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cityAdminControllerGetDisabled(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCityWithoutCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cityAdminControllerGetDisabled(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific city by its ID
         * @summary Update city by ID
         * @param {number} id 
         * @param {CityDto} cityDto City data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cityAdminControllerUpdateCity(id: number, cityDto: CityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cityAdminControllerUpdateCity(id, cityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CitiesInternalApi - factory interface
 * @export
 */
export const CitiesInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CitiesInternalApiFp(configuration)
    return {
        /**
         * Change the status of a specific city by its ID
         * @summary Change status of city by ID
         * @param {number} id 
         * @param {CityStatusBodyDto} cityStatusBodyDto City status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityAdminControllerChangeStatus(id: number, cityStatusBodyDto: CityStatusBodyDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.cityAdminControllerChangeStatus(id, cityStatusBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of disabled cities
         * @summary Get disabled cities
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityAdminControllerGetDisabled(page?: number, limit?: number, options?: any): AxiosPromise<ListCityWithoutCountryResponse> {
            return localVarFp.cityAdminControllerGetDisabled(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific city by its ID
         * @summary Update city by ID
         * @param {number} id 
         * @param {CityDto} cityDto City data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityAdminControllerUpdateCity(id: number, cityDto: CityDto, options?: any): AxiosPromise<GenericCityResponse> {
            return localVarFp.cityAdminControllerUpdateCity(id, cityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CitiesInternalApi - object-oriented interface
 * @export
 * @class CitiesInternalApi
 * @extends {BaseAPI}
 */
export class CitiesInternalApi extends BaseAPI {
    /**
     * Change the status of a specific city by its ID
     * @summary Change status of city by ID
     * @param {number} id 
     * @param {CityStatusBodyDto} cityStatusBodyDto City status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesInternalApi
     */
    public cityAdminControllerChangeStatus(id: number, cityStatusBodyDto: CityStatusBodyDto, options?: AxiosRequestConfig) {
        return CitiesInternalApiFp(this.configuration).cityAdminControllerChangeStatus(id, cityStatusBodyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of disabled cities
     * @summary Get disabled cities
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesInternalApi
     */
    public cityAdminControllerGetDisabled(page?: number, limit?: number, options?: AxiosRequestConfig) {
        return CitiesInternalApiFp(this.configuration).cityAdminControllerGetDisabled(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific city by its ID
     * @summary Update city by ID
     * @param {number} id 
     * @param {CityDto} cityDto City data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesInternalApi
     */
    public cityAdminControllerUpdateCity(id: number, cityDto: CityDto, options?: AxiosRequestConfig) {
        return CitiesInternalApiFp(this.configuration).cityAdminControllerUpdateCity(id, cityDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CitiesSharedApi - axios parameter creator
 * @export
 */
export const CitiesSharedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all cities
         * @summary Get all cities
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [countryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindAll: async (page?: number, limit?: number, countryId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shared/cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['countryId'] = countryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific city by its ID number
         * @summary Get city by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('citiesSharedControllerFindById', 'id', id)
            const localVarPath = `/api/v1/shared/cities/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific city by its English name
         * @summary Get city by name
         * @param {string} nameEnglish 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindByName: async (nameEnglish: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameEnglish' is not null or undefined
            assertParamExists('citiesSharedControllerFindByName', 'nameEnglish', nameEnglish)
            const localVarPath = `/api/v1/shared/cities/by-name/{nameEnglish}`
                .replace(`{${"nameEnglish"}}`, encodeURIComponent(String(nameEnglish)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific city by its postal code
         * @summary Get city by postal code
         * @param {string} postalCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindByPostalCode: async (postalCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postalCode' is not null or undefined
            assertParamExists('citiesSharedControllerFindByPostalCode', 'postalCode', postalCode)
            const localVarPath = `/api/v1/shared/cities/by-postal-code/{postalCode}`
                .replace(`{${"postalCode"}}`, encodeURIComponent(String(postalCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search cities by text in the name fields
         * @summary Search cities by text
         * @param {string} search The search text
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerSearchByText: async (search: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('citiesSharedControllerSearchByText', 'search', search)
            const localVarPath = `/api/v1/shared/cities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CitiesSharedApi - functional programming interface
 * @export
 */
export const CitiesSharedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CitiesSharedApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all cities
         * @summary Get all cities
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [countryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesSharedControllerFindAll(page?: number, limit?: number, countryId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCityWithoutCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesSharedControllerFindAll(page, limit, countryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific city by its ID number
         * @summary Get city by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesSharedControllerFindById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesSharedControllerFindById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific city by its English name
         * @summary Get city by name
         * @param {string} nameEnglish 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesSharedControllerFindByName(nameEnglish: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesSharedControllerFindByName(nameEnglish, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific city by its postal code
         * @summary Get city by postal code
         * @param {string} postalCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesSharedControllerFindByPostalCode(postalCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesSharedControllerFindByPostalCode(postalCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search cities by text in the name fields
         * @summary Search cities by text
         * @param {string} search The search text
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesSharedControllerSearchByText(search: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCityWithoutCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesSharedControllerSearchByText(search, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CitiesSharedApi - factory interface
 * @export
 */
export const CitiesSharedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CitiesSharedApiFp(configuration)
    return {
        /**
         * Get all cities
         * @summary Get all cities
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [countryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindAll(page?: number, limit?: number, countryId?: number, options?: any): AxiosPromise<ListCityWithoutCountryResponse> {
            return localVarFp.citiesSharedControllerFindAll(page, limit, countryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific city by its ID number
         * @summary Get city by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindById(id: number, options?: any): AxiosPromise<GenericCityResponse> {
            return localVarFp.citiesSharedControllerFindById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific city by its English name
         * @summary Get city by name
         * @param {string} nameEnglish 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindByName(nameEnglish: string, options?: any): AxiosPromise<GenericCityResponse> {
            return localVarFp.citiesSharedControllerFindByName(nameEnglish, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific city by its postal code
         * @summary Get city by postal code
         * @param {string} postalCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerFindByPostalCode(postalCode: string, options?: any): AxiosPromise<GenericCityResponse> {
            return localVarFp.citiesSharedControllerFindByPostalCode(postalCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Search cities by text in the name fields
         * @summary Search cities by text
         * @param {string} search The search text
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesSharedControllerSearchByText(search: string, page?: number, limit?: number, options?: any): AxiosPromise<ListCityWithoutCountryResponse> {
            return localVarFp.citiesSharedControllerSearchByText(search, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CitiesSharedApi - object-oriented interface
 * @export
 * @class CitiesSharedApi
 * @extends {BaseAPI}
 */
export class CitiesSharedApi extends BaseAPI {
    /**
     * Get all cities
     * @summary Get all cities
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {number} [countryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesSharedApi
     */
    public citiesSharedControllerFindAll(page?: number, limit?: number, countryId?: number, options?: AxiosRequestConfig) {
        return CitiesSharedApiFp(this.configuration).citiesSharedControllerFindAll(page, limit, countryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific city by its ID number
     * @summary Get city by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesSharedApi
     */
    public citiesSharedControllerFindById(id: number, options?: AxiosRequestConfig) {
        return CitiesSharedApiFp(this.configuration).citiesSharedControllerFindById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific city by its English name
     * @summary Get city by name
     * @param {string} nameEnglish 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesSharedApi
     */
    public citiesSharedControllerFindByName(nameEnglish: string, options?: AxiosRequestConfig) {
        return CitiesSharedApiFp(this.configuration).citiesSharedControllerFindByName(nameEnglish, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific city by its postal code
     * @summary Get city by postal code
     * @param {string} postalCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesSharedApi
     */
    public citiesSharedControllerFindByPostalCode(postalCode: string, options?: AxiosRequestConfig) {
        return CitiesSharedApiFp(this.configuration).citiesSharedControllerFindByPostalCode(postalCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search cities by text in the name fields
     * @summary Search cities by text
     * @param {string} search The search text
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesSharedApi
     */
    public citiesSharedControllerSearchByText(search: string, page?: number, limit?: number, options?: AxiosRequestConfig) {
        return CitiesSharedApiFp(this.configuration).citiesSharedControllerSearchByText(search, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CompaniesExternalApi - axios parameter creator
 * @export
 */
export const CompaniesExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all companies
         * @summary Get all companies
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll: async (page?: number, limit?: number, search?: string, cityId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company details by id
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerGetCompanyById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyControllerGetCompanyById', 'id', id)
            const localVarPath = `/api/v1/external/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesExternalApi - functional programming interface
 * @export
 */
export const CompaniesExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all companies
         * @summary Get all companies
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerFindAll(page?: number, limit?: number, search?: string, cityId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerFindAll(page, limit, search, cityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get company details by id
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerGetCompanyById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerGetCompanyById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesExternalApi - factory interface
 * @export
 */
export const CompaniesExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesExternalApiFp(configuration)
    return {
        /**
         * Get all companies
         * @summary Get all companies
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll(page?: number, limit?: number, search?: string, cityId?: number, options?: any): AxiosPromise<ListCompanyResponse> {
            return localVarFp.companyControllerFindAll(page, limit, search, cityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company details by id
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerGetCompanyById(id: string, options?: any): AxiosPromise<GenericCompanyResponse> {
            return localVarFp.companyControllerGetCompanyById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesExternalApi - object-oriented interface
 * @export
 * @class CompaniesExternalApi
 * @extends {BaseAPI}
 */
export class CompaniesExternalApi extends BaseAPI {
    /**
     * Get all companies
     * @summary Get all companies
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {number} [cityId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesExternalApi
     */
    public companyControllerFindAll(page?: number, limit?: number, search?: string, cityId?: number, options?: AxiosRequestConfig) {
        return CompaniesExternalApiFp(this.configuration).companyControllerFindAll(page, limit, search, cityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get company details by id
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesExternalApi
     */
    public companyControllerGetCompanyById(id: string, options?: AxiosRequestConfig) {
        return CompaniesExternalApiFp(this.configuration).companyControllerGetCompanyById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CompaniesInternalApi - axios parameter creator
 * @export
 */
export const CompaniesInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a user and an address to an existing company
         * @summary Assign a user and an address to an existing company
         * @param {string} id 
         * @param {AddUserDataAndAddressDto} addUserDataAndAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerAssignUserAndAddress: async (id: string, addUserDataAndAddressDto: AddUserDataAndAddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyAdminControllerAssignUserAndAddress', 'id', id)
            // verify required parameter 'addUserDataAndAddressDto' is not null or undefined
            assertParamExists('companyAdminControllerAssignUserAndAddress', 'addUserDataAndAddressDto', addUserDataAndAddressDto)
            const localVarPath = `/api/v1/internal/companies/{id}/continue`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserDataAndAddressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the status of an existing company
         * @summary Change the status of an existing company
         * @param {string} id 
         * @param {CompanyStatusBodyDto} companyStatusBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerChangeCompanyStatus: async (id: string, companyStatusBodyDto: CompanyStatusBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyAdminControllerChangeCompanyStatus', 'id', id)
            // verify required parameter 'companyStatusBodyDto' is not null or undefined
            assertParamExists('companyAdminControllerChangeCompanyStatus', 'companyStatusBodyDto', companyStatusBodyDto)
            const localVarPath = `/api/v1/internal/companies/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyStatusBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new company by ketering admin
         * @summary Create a company by ketering admin
         * @param {CompanyAdminDto} companyAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerCreate: async (companyAdminDto: CompanyAdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyAdminDto' is not null or undefined
            assertParamExists('companyAdminControllerCreate', 'companyAdminDto', companyAdminDto)
            const localVarPath = `/api/v1/internal/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyAdminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete company by id
         * @summary Delete company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerDeleteOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyAdminControllerDeleteOne', 'id', id)
            const localVarPath = `/api/v1/internal/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all companies
         * @summary Get all companies
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {number} [cityId] 
         * @param {CompanyAdminControllerFindAllOrderEnum} [order] 
         * @param {CompanyAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {CompanyAdminControllerFindAllStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerFindAll: async (page?: number, limit?: number, search?: string, cityId?: number, order?: CompanyAdminControllerFindAllOrderEnum, sortBy?: CompanyAdminControllerFindAllSortByEnum, status?: CompanyAdminControllerFindAllStatusEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company details the current user is associated with
         * @summary Get company of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerGetCompanyByToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/companies/own`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company by id
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerGetOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyAdminControllerGetOne', 'id', id)
            const localVarPath = `/api/v1/internal/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update company by id
         * @summary Update company by id
         * @param {string} id 
         * @param {UpdateCompanyAdminDto} updateCompanyAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerUpdateOne: async (id: string, updateCompanyAdminDto: UpdateCompanyAdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyAdminControllerUpdateOne', 'id', id)
            // verify required parameter 'updateCompanyAdminDto' is not null or undefined
            assertParamExists('companyAdminControllerUpdateOne', 'updateCompanyAdminDto', updateCompanyAdminDto)
            const localVarPath = `/api/v1/internal/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompanyAdminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesInternalApi - functional programming interface
 * @export
 */
export const CompaniesInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a user and an address to an existing company
         * @summary Assign a user and an address to an existing company
         * @param {string} id 
         * @param {AddUserDataAndAddressDto} addUserDataAndAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerAssignUserAndAddress(id: string, addUserDataAndAddressDto: AddUserDataAndAddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerAssignUserAndAddress(id, addUserDataAndAddressDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change the status of an existing company
         * @summary Change the status of an existing company
         * @param {string} id 
         * @param {CompanyStatusBodyDto} companyStatusBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerChangeCompanyStatus(id: string, companyStatusBodyDto: CompanyStatusBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerChangeCompanyStatus(id, companyStatusBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new company by ketering admin
         * @summary Create a company by ketering admin
         * @param {CompanyAdminDto} companyAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerCreate(companyAdminDto: CompanyAdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerCreate(companyAdminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete company by id
         * @summary Delete company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerDeleteOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerDeleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all companies
         * @summary Get all companies
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {number} [cityId] 
         * @param {CompanyAdminControllerFindAllOrderEnum} [order] 
         * @param {CompanyAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {CompanyAdminControllerFindAllStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerFindAll(page?: number, limit?: number, search?: string, cityId?: number, order?: CompanyAdminControllerFindAllOrderEnum, sortBy?: CompanyAdminControllerFindAllSortByEnum, status?: CompanyAdminControllerFindAllStatusEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCompanyWithoutPersonnelAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerFindAll(page, limit, search, cityId, order, sortBy, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get company details the current user is associated with
         * @summary Get company of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerGetCompanyByToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCompanyWithMainAdminBasicResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerGetCompanyByToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get company by id
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerGetOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerGetOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update company by id
         * @summary Update company by id
         * @param {string} id 
         * @param {UpdateCompanyAdminDto} updateCompanyAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAdminControllerUpdateOne(id: string, updateCompanyAdminDto: UpdateCompanyAdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAdminControllerUpdateOne(id, updateCompanyAdminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesInternalApi - factory interface
 * @export
 */
export const CompaniesInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesInternalApiFp(configuration)
    return {
        /**
         * Assign a user and an address to an existing company
         * @summary Assign a user and an address to an existing company
         * @param {string} id 
         * @param {AddUserDataAndAddressDto} addUserDataAndAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerAssignUserAndAddress(id: string, addUserDataAndAddressDto: AddUserDataAndAddressDto, options?: any): AxiosPromise<GenericCompanyAdminResponse> {
            return localVarFp.companyAdminControllerAssignUserAndAddress(id, addUserDataAndAddressDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the status of an existing company
         * @summary Change the status of an existing company
         * @param {string} id 
         * @param {CompanyStatusBodyDto} companyStatusBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerChangeCompanyStatus(id: string, companyStatusBodyDto: CompanyStatusBodyDto, options?: any): AxiosPromise<GenericCompanyAdminResponse> {
            return localVarFp.companyAdminControllerChangeCompanyStatus(id, companyStatusBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new company by ketering admin
         * @summary Create a company by ketering admin
         * @param {CompanyAdminDto} companyAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerCreate(companyAdminDto: CompanyAdminDto, options?: any): AxiosPromise<GenericCompanyAdminResponse> {
            return localVarFp.companyAdminControllerCreate(companyAdminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete company by id
         * @summary Delete company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerDeleteOne(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.companyAdminControllerDeleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all companies
         * @summary Get all companies
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {number} [cityId] 
         * @param {CompanyAdminControllerFindAllOrderEnum} [order] 
         * @param {CompanyAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {CompanyAdminControllerFindAllStatusEnum} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerFindAll(page?: number, limit?: number, search?: string, cityId?: number, order?: CompanyAdminControllerFindAllOrderEnum, sortBy?: CompanyAdminControllerFindAllSortByEnum, status?: CompanyAdminControllerFindAllStatusEnum, options?: any): AxiosPromise<ListCompanyWithoutPersonnelAdminResponse> {
            return localVarFp.companyAdminControllerFindAll(page, limit, search, cityId, order, sortBy, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company details the current user is associated with
         * @summary Get company of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerGetCompanyByToken(options?: any): AxiosPromise<GenericCompanyWithMainAdminBasicResponse> {
            return localVarFp.companyAdminControllerGetCompanyByToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Get company by id
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerGetOne(id: string, options?: any): AxiosPromise<GenericCompanyAdminResponse> {
            return localVarFp.companyAdminControllerGetOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update company by id
         * @summary Update company by id
         * @param {string} id 
         * @param {UpdateCompanyAdminDto} updateCompanyAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAdminControllerUpdateOne(id: string, updateCompanyAdminDto: UpdateCompanyAdminDto, options?: any): AxiosPromise<GenericCompanyAdminResponse> {
            return localVarFp.companyAdminControllerUpdateOne(id, updateCompanyAdminDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesInternalApi - object-oriented interface
 * @export
 * @class CompaniesInternalApi
 * @extends {BaseAPI}
 */
export class CompaniesInternalApi extends BaseAPI {
    /**
     * Assign a user and an address to an existing company
     * @summary Assign a user and an address to an existing company
     * @param {string} id 
     * @param {AddUserDataAndAddressDto} addUserDataAndAddressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerAssignUserAndAddress(id: string, addUserDataAndAddressDto: AddUserDataAndAddressDto, options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerAssignUserAndAddress(id, addUserDataAndAddressDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the status of an existing company
     * @summary Change the status of an existing company
     * @param {string} id 
     * @param {CompanyStatusBodyDto} companyStatusBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerChangeCompanyStatus(id: string, companyStatusBodyDto: CompanyStatusBodyDto, options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerChangeCompanyStatus(id, companyStatusBodyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new company by ketering admin
     * @summary Create a company by ketering admin
     * @param {CompanyAdminDto} companyAdminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerCreate(companyAdminDto: CompanyAdminDto, options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerCreate(companyAdminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete company by id
     * @summary Delete company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerDeleteOne(id: string, options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerDeleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all companies
     * @summary Get all companies
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {number} [cityId] 
     * @param {CompanyAdminControllerFindAllOrderEnum} [order] 
     * @param {CompanyAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {CompanyAdminControllerFindAllStatusEnum} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerFindAll(page?: number, limit?: number, search?: string, cityId?: number, order?: CompanyAdminControllerFindAllOrderEnum, sortBy?: CompanyAdminControllerFindAllSortByEnum, status?: CompanyAdminControllerFindAllStatusEnum, options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerFindAll(page, limit, search, cityId, order, sortBy, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get company details the current user is associated with
     * @summary Get company of the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerGetCompanyByToken(options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerGetCompanyByToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get company by id
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerGetOne(id: string, options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerGetOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update company by id
     * @summary Update company by id
     * @param {string} id 
     * @param {UpdateCompanyAdminDto} updateCompanyAdminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesInternalApi
     */
    public companyAdminControllerUpdateOne(id: string, updateCompanyAdminDto: UpdateCompanyAdminDto, options?: AxiosRequestConfig) {
        return CompaniesInternalApiFp(this.configuration).companyAdminControllerUpdateOne(id, updateCompanyAdminDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CompanyAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type CompanyAdminControllerFindAllOrderEnum = typeof CompanyAdminControllerFindAllOrderEnum[keyof typeof CompanyAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const CompanyAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name'
} as const;
export type CompanyAdminControllerFindAllSortByEnum = typeof CompanyAdminControllerFindAllSortByEnum[keyof typeof CompanyAdminControllerFindAllSortByEnum];
/**
 * @export
 */
export const CompanyAdminControllerFindAllStatusEnum = {
    InActivationProcess: 'IN_ACTIVATION_PROCESS',
    Active: 'ACTIVE',
    Blocked: 'BLOCKED',
    Removed: 'REMOVED'
} as const;
export type CompanyAdminControllerFindAllStatusEnum = typeof CompanyAdminControllerFindAllStatusEnum[keyof typeof CompanyAdminControllerFindAllStatusEnum];


/**
 * CountriesInternalApi - axios parameter creator
 * @export
 */
export const CountriesInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change the status of a specific country by its ID
         * @summary Change status of country by ID
         * @param {number} id 
         * @param {CountryStatusBodyDto} countryStatusBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerChangeStatus: async (id: number, countryStatusBodyDto: CountryStatusBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('countriesInternalControllerChangeStatus', 'id', id)
            // verify required parameter 'countryStatusBodyDto' is not null or undefined
            assertParamExists('countriesInternalControllerChangeStatus', 'countryStatusBodyDto', countryStatusBodyDto)
            const localVarPath = `/api/v1/internal/countries/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(countryStatusBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific country by its ID
         * @summary Delete country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerDeleteCountry: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('countriesInternalControllerDeleteCountry', 'id', id)
            const localVarPath = `/api/v1/internal/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle the enable status of a specific country by its ID
         * @summary Toggle enable status of country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerToggleEnableStatus: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('countriesInternalControllerToggleEnableStatus', 'id', id)
            const localVarPath = `/api/v1/internal/countries/{id}/toggle-enable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific country by its ID
         * @summary Update country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerUpdateCountry: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('countriesInternalControllerUpdateCountry', 'id', id)
            const localVarPath = `/api/v1/internal/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesInternalApi - functional programming interface
 * @export
 */
export const CountriesInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Change the status of a specific country by its ID
         * @summary Change status of country by ID
         * @param {number} id 
         * @param {CountryStatusBodyDto} countryStatusBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesInternalControllerChangeStatus(id: number, countryStatusBodyDto: CountryStatusBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesInternalControllerChangeStatus(id, countryStatusBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific country by its ID
         * @summary Delete country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesInternalControllerDeleteCountry(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesInternalControllerDeleteCountry(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Toggle the enable status of a specific country by its ID
         * @summary Toggle enable status of country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesInternalControllerToggleEnableStatus(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesInternalControllerToggleEnableStatus(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific country by its ID
         * @summary Update country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesInternalControllerUpdateCountry(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesInternalControllerUpdateCountry(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CountriesInternalApi - factory interface
 * @export
 */
export const CountriesInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesInternalApiFp(configuration)
    return {
        /**
         * Change the status of a specific country by its ID
         * @summary Change status of country by ID
         * @param {number} id 
         * @param {CountryStatusBodyDto} countryStatusBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerChangeStatus(id: number, countryStatusBodyDto: CountryStatusBodyDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.countriesInternalControllerChangeStatus(id, countryStatusBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific country by its ID
         * @summary Delete country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerDeleteCountry(id: number, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.countriesInternalControllerDeleteCountry(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle the enable status of a specific country by its ID
         * @summary Toggle enable status of country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerToggleEnableStatus(id: number, options?: any): AxiosPromise<GenericCountryResponse> {
            return localVarFp.countriesInternalControllerToggleEnableStatus(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific country by its ID
         * @summary Update country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesInternalControllerUpdateCountry(id: number, options?: any): AxiosPromise<GenericCountryResponse> {
            return localVarFp.countriesInternalControllerUpdateCountry(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesInternalApi - object-oriented interface
 * @export
 * @class CountriesInternalApi
 * @extends {BaseAPI}
 */
export class CountriesInternalApi extends BaseAPI {
    /**
     * Change the status of a specific country by its ID
     * @summary Change status of country by ID
     * @param {number} id 
     * @param {CountryStatusBodyDto} countryStatusBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesInternalApi
     */
    public countriesInternalControllerChangeStatus(id: number, countryStatusBodyDto: CountryStatusBodyDto, options?: AxiosRequestConfig) {
        return CountriesInternalApiFp(this.configuration).countriesInternalControllerChangeStatus(id, countryStatusBodyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific country by its ID
     * @summary Delete country by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesInternalApi
     */
    public countriesInternalControllerDeleteCountry(id: number, options?: AxiosRequestConfig) {
        return CountriesInternalApiFp(this.configuration).countriesInternalControllerDeleteCountry(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle the enable status of a specific country by its ID
     * @summary Toggle enable status of country by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesInternalApi
     */
    public countriesInternalControllerToggleEnableStatus(id: number, options?: AxiosRequestConfig) {
        return CountriesInternalApiFp(this.configuration).countriesInternalControllerToggleEnableStatus(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific country by its ID
     * @summary Update country by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesInternalApi
     */
    public countriesInternalControllerUpdateCountry(id: number, options?: AxiosRequestConfig) {
        return CountriesInternalApiFp(this.configuration).countriesInternalControllerUpdateCountry(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CountriesSharedApi - axios parameter creator
 * @export
 */
export const CountriesSharedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all countries
         * @summary Get all countries
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindAll: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shared/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific country by its ID number
         * @summary Get country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('countriesControllerFindById', 'id', id)
            const localVarPath = `/api/v1/shared/countries/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific country by its ISO2 code
         * @summary Get country by ISO2 code
         * @param {string} iso2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindByIso2: async (iso2: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iso2' is not null or undefined
            assertParamExists('countriesControllerFindByIso2', 'iso2', iso2)
            const localVarPath = `/api/v1/shared/countries/by-iso2/{iso2}`
                .replace(`{${"iso2"}}`, encodeURIComponent(String(iso2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific country by its ISO3 code
         * @summary Get country by ISO3 code
         * @param {string} iso3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindByIso3: async (iso3: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iso3' is not null or undefined
            assertParamExists('countriesControllerFindByIso3', 'iso3', iso3)
            const localVarPath = `/api/v1/shared/countries/by-iso3/{iso3}`
                .replace(`{${"iso3"}}`, encodeURIComponent(String(iso3)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific country by its English name
         * @summary Get country by English name
         * @param {string} nameEnglish 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindByNameEnglish: async (nameEnglish: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameEnglish' is not null or undefined
            assertParamExists('countriesControllerFindByNameEnglish', 'nameEnglish', nameEnglish)
            const localVarPath = `/api/v1/shared/countries/by-name/{nameEnglish}`
                .replace(`{${"nameEnglish"}}`, encodeURIComponent(String(nameEnglish)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of disabled countries
         * @summary Get disabled countries
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerGetDisabled: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shared/countries/disabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search countries by text in the nameEnglish, fullNameEnglish, nameLocal, and fullNameLocal fields
         * @summary Search countries by text
         * @param {string} search The search text
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerSearchByText: async (search: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('countriesControllerSearchByText', 'search', search)
            const localVarPath = `/api/v1/shared/countries/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesSharedApi - functional programming interface
 * @export
 */
export const CountriesSharedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesSharedApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all countries
         * @summary Get all countries
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesControllerFindAll(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCountriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesControllerFindAll(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific country by its ID number
         * @summary Get country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesControllerFindById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesControllerFindById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific country by its ISO2 code
         * @summary Get country by ISO2 code
         * @param {string} iso2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesControllerFindByIso2(iso2: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesControllerFindByIso2(iso2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific country by its ISO3 code
         * @summary Get country by ISO3 code
         * @param {string} iso3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesControllerFindByIso3(iso3: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesControllerFindByIso3(iso3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific country by its English name
         * @summary Get country by English name
         * @param {string} nameEnglish 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesControllerFindByNameEnglish(nameEnglish: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesControllerFindByNameEnglish(nameEnglish, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of disabled countries
         * @summary Get disabled countries
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesControllerGetDisabled(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCountriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesControllerGetDisabled(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search countries by text in the nameEnglish, fullNameEnglish, nameLocal, and fullNameLocal fields
         * @summary Search countries by text
         * @param {string} search The search text
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesControllerSearchByText(search: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCountriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesControllerSearchByText(search, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CountriesSharedApi - factory interface
 * @export
 */
export const CountriesSharedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesSharedApiFp(configuration)
    return {
        /**
         * Get all countries
         * @summary Get all countries
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindAll(page?: number, limit?: number, options?: any): AxiosPromise<ListCountriesResponse> {
            return localVarFp.countriesControllerFindAll(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific country by its ID number
         * @summary Get country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindById(id: number, options?: any): AxiosPromise<GenericCountryResponse> {
            return localVarFp.countriesControllerFindById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific country by its ISO2 code
         * @summary Get country by ISO2 code
         * @param {string} iso2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindByIso2(iso2: string, options?: any): AxiosPromise<GenericCountryResponse> {
            return localVarFp.countriesControllerFindByIso2(iso2, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific country by its ISO3 code
         * @summary Get country by ISO3 code
         * @param {string} iso3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindByIso3(iso3: string, options?: any): AxiosPromise<GenericCountryResponse> {
            return localVarFp.countriesControllerFindByIso3(iso3, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific country by its English name
         * @summary Get country by English name
         * @param {string} nameEnglish 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerFindByNameEnglish(nameEnglish: string, options?: any): AxiosPromise<GenericCountryResponse> {
            return localVarFp.countriesControllerFindByNameEnglish(nameEnglish, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of disabled countries
         * @summary Get disabled countries
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerGetDisabled(page?: number, limit?: number, options?: any): AxiosPromise<ListCountriesResponse> {
            return localVarFp.countriesControllerGetDisabled(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Search countries by text in the nameEnglish, fullNameEnglish, nameLocal, and fullNameLocal fields
         * @summary Search countries by text
         * @param {string} search The search text
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesControllerSearchByText(search: string, page?: number, limit?: number, options?: any): AxiosPromise<ListCountriesResponse> {
            return localVarFp.countriesControllerSearchByText(search, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesSharedApi - object-oriented interface
 * @export
 * @class CountriesSharedApi
 * @extends {BaseAPI}
 */
export class CountriesSharedApi extends BaseAPI {
    /**
     * Get all countries
     * @summary Get all countries
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesSharedApi
     */
    public countriesControllerFindAll(page?: number, limit?: number, options?: AxiosRequestConfig) {
        return CountriesSharedApiFp(this.configuration).countriesControllerFindAll(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific country by its ID number
     * @summary Get country by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesSharedApi
     */
    public countriesControllerFindById(id: number, options?: AxiosRequestConfig) {
        return CountriesSharedApiFp(this.configuration).countriesControllerFindById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific country by its ISO2 code
     * @summary Get country by ISO2 code
     * @param {string} iso2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesSharedApi
     */
    public countriesControllerFindByIso2(iso2: string, options?: AxiosRequestConfig) {
        return CountriesSharedApiFp(this.configuration).countriesControllerFindByIso2(iso2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific country by its ISO3 code
     * @summary Get country by ISO3 code
     * @param {string} iso3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesSharedApi
     */
    public countriesControllerFindByIso3(iso3: string, options?: AxiosRequestConfig) {
        return CountriesSharedApiFp(this.configuration).countriesControllerFindByIso3(iso3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific country by its English name
     * @summary Get country by English name
     * @param {string} nameEnglish 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesSharedApi
     */
    public countriesControllerFindByNameEnglish(nameEnglish: string, options?: AxiosRequestConfig) {
        return CountriesSharedApiFp(this.configuration).countriesControllerFindByNameEnglish(nameEnglish, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of disabled countries
     * @summary Get disabled countries
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesSharedApi
     */
    public countriesControllerGetDisabled(page?: number, limit?: number, options?: AxiosRequestConfig) {
        return CountriesSharedApiFp(this.configuration).countriesControllerGetDisabled(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search countries by text in the nameEnglish, fullNameEnglish, nameLocal, and fullNameLocal fields
     * @summary Search countries by text
     * @param {string} search The search text
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesSharedApi
     */
    public countriesControllerSearchByText(search: string, page?: number, limit?: number, options?: AxiosRequestConfig) {
        return CountriesSharedApiFp(this.configuration).countriesControllerSearchByText(search, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeliveryInternalApi - axios parameter creator
 * @export
 */
export const DeliveryInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all deliveries for the company
         * @summary Get all deliveries for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {DeliveryAdminControllerFindAllOrderEnum} [order] 
         * @param {DeliveryAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {string} [dateForDelivery] 
         * @param {string} [orderId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAdminControllerFindAll: async (page?: number, limit?: number, order?: DeliveryAdminControllerFindAllOrderEnum, sortBy?: DeliveryAdminControllerFindAllSortByEnum, dateForDelivery?: string, orderId?: string, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/delivery/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (dateForDelivery !== undefined) {
                localVarQueryParameter['dateForDelivery'] = dateForDelivery;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an order date
         * @summary Get an order date
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAdminControllerGetOrderDate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryAdminControllerGetOrderDate', 'id', id)
            const localVarPath = `/api/v1/internal/delivery/order-date/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Only the delivery person of the company linked to the order date can use this route
         * @summary Mark an order date as delivered
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAdminControllerMarkAsDelivered: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryAdminControllerMarkAsDelivered', 'id', id)
            const localVarPath = `/api/v1/internal/delivery/order-date/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeliveryInternalApi - functional programming interface
 * @export
 */
export const DeliveryInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeliveryInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all deliveries for the company
         * @summary Get all deliveries for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {DeliveryAdminControllerFindAllOrderEnum} [order] 
         * @param {DeliveryAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {string} [dateForDelivery] 
         * @param {string} [orderId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAdminControllerFindAll(page?: number, limit?: number, order?: DeliveryAdminControllerFindAllOrderEnum, sortBy?: DeliveryAdminControllerFindAllSortByEnum, dateForDelivery?: string, orderId?: string, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrderDateWithoutMealsAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAdminControllerFindAll(page, limit, order, sortBy, dateForDelivery, orderId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an order date
         * @summary Get an order date
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAdminControllerGetOrderDate(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderDateAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAdminControllerGetOrderDate(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Only the delivery person of the company linked to the order date can use this route
         * @summary Mark an order date as delivered
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAdminControllerMarkAsDelivered(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderDateAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAdminControllerMarkAsDelivered(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeliveryInternalApi - factory interface
 * @export
 */
export const DeliveryInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeliveryInternalApiFp(configuration)
    return {
        /**
         * Get all deliveries for the company
         * @summary Get all deliveries for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {DeliveryAdminControllerFindAllOrderEnum} [order] 
         * @param {DeliveryAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {string} [dateForDelivery] 
         * @param {string} [orderId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAdminControllerFindAll(page?: number, limit?: number, order?: DeliveryAdminControllerFindAllOrderEnum, sortBy?: DeliveryAdminControllerFindAllSortByEnum, dateForDelivery?: string, orderId?: string, id?: string, options?: any): AxiosPromise<ListOrderDateWithoutMealsAdminResponse> {
            return localVarFp.deliveryAdminControllerFindAll(page, limit, order, sortBy, dateForDelivery, orderId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an order date
         * @summary Get an order date
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAdminControllerGetOrderDate(id: string, options?: any): AxiosPromise<GenericOrderDateAdminResponse> {
            return localVarFp.deliveryAdminControllerGetOrderDate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Only the delivery person of the company linked to the order date can use this route
         * @summary Mark an order date as delivered
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAdminControllerMarkAsDelivered(id: string, options?: any): AxiosPromise<GenericOrderDateAdminResponse> {
            return localVarFp.deliveryAdminControllerMarkAsDelivered(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeliveryInternalApi - object-oriented interface
 * @export
 * @class DeliveryInternalApi
 * @extends {BaseAPI}
 */
export class DeliveryInternalApi extends BaseAPI {
    /**
     * Get all deliveries for the company
     * @summary Get all deliveries for the company
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {DeliveryAdminControllerFindAllOrderEnum} [order] 
     * @param {DeliveryAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {string} [dateForDelivery] 
     * @param {string} [orderId] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryInternalApi
     */
    public deliveryAdminControllerFindAll(page?: number, limit?: number, order?: DeliveryAdminControllerFindAllOrderEnum, sortBy?: DeliveryAdminControllerFindAllSortByEnum, dateForDelivery?: string, orderId?: string, id?: string, options?: AxiosRequestConfig) {
        return DeliveryInternalApiFp(this.configuration).deliveryAdminControllerFindAll(page, limit, order, sortBy, dateForDelivery, orderId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an order date
     * @summary Get an order date
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryInternalApi
     */
    public deliveryAdminControllerGetOrderDate(id: string, options?: AxiosRequestConfig) {
        return DeliveryInternalApiFp(this.configuration).deliveryAdminControllerGetOrderDate(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Only the delivery person of the company linked to the order date can use this route
     * @summary Mark an order date as delivered
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryInternalApi
     */
    public deliveryAdminControllerMarkAsDelivered(id: string, options?: AxiosRequestConfig) {
        return DeliveryInternalApiFp(this.configuration).deliveryAdminControllerMarkAsDelivered(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DeliveryAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type DeliveryAdminControllerFindAllOrderEnum = typeof DeliveryAdminControllerFindAllOrderEnum[keyof typeof DeliveryAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const DeliveryAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    DeliveryId: 'deliveryId',
    DateForDelivery: 'dateForDelivery',
    DeliveredAt: 'deliveredAt'
} as const;
export type DeliveryAdminControllerFindAllSortByEnum = typeof DeliveryAdminControllerFindAllSortByEnum[keyof typeof DeliveryAdminControllerFindAllSortByEnum];


/**
 * EmailVerificationApi - axios parameter creator
 * @export
 */
export const EmailVerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new email verification
         * @summary Create email verification
         * @param {RequestEmailVerificationDto} requestEmailVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedEmailControllerCreateEmailVerification: async (requestEmailVerificationDto: RequestEmailVerificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestEmailVerificationDto' is not null or undefined
            assertParamExists('sharedEmailControllerCreateEmailVerification', 'requestEmailVerificationDto', requestEmailVerificationDto)
            const localVarPath = `/api/v1/internal/email/create-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestEmailVerificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify an email with a token
         * @summary Verify email
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedEmailControllerVerifyEmail: async (verifyEmailDto: VerifyEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailDto' is not null or undefined
            assertParamExists('sharedEmailControllerVerifyEmail', 'verifyEmailDto', verifyEmailDto)
            const localVarPath = `/api/v1/internal/email/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailVerificationApi - functional programming interface
 * @export
 */
export const EmailVerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailVerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new email verification
         * @summary Create email verification
         * @param {RequestEmailVerificationDto} requestEmailVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedEmailControllerCreateEmailVerification(requestEmailVerificationDto: RequestEmailVerificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedEmailControllerCreateEmailVerification(requestEmailVerificationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify an email with a token
         * @summary Verify email
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedEmailControllerVerifyEmail(verifyEmailDto: VerifyEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedEmailControllerVerifyEmail(verifyEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailVerificationApi - factory interface
 * @export
 */
export const EmailVerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailVerificationApiFp(configuration)
    return {
        /**
         * Create a new email verification
         * @summary Create email verification
         * @param {RequestEmailVerificationDto} requestEmailVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedEmailControllerCreateEmailVerification(requestEmailVerificationDto: RequestEmailVerificationDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.sharedEmailControllerCreateEmailVerification(requestEmailVerificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify an email with a token
         * @summary Verify email
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedEmailControllerVerifyEmail(verifyEmailDto: VerifyEmailDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.sharedEmailControllerVerifyEmail(verifyEmailDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailVerificationApi - object-oriented interface
 * @export
 * @class EmailVerificationApi
 * @extends {BaseAPI}
 */
export class EmailVerificationApi extends BaseAPI {
    /**
     * Create a new email verification
     * @summary Create email verification
     * @param {RequestEmailVerificationDto} requestEmailVerificationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailVerificationApi
     */
    public sharedEmailControllerCreateEmailVerification(requestEmailVerificationDto: RequestEmailVerificationDto, options?: AxiosRequestConfig) {
        return EmailVerificationApiFp(this.configuration).sharedEmailControllerCreateEmailVerification(requestEmailVerificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify an email with a token
     * @summary Verify email
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailVerificationApi
     */
    public sharedEmailControllerVerifyEmail(verifyEmailDto: VerifyEmailDto, options?: AxiosRequestConfig) {
        return EmailVerificationApiFp(this.configuration).sharedEmailControllerVerifyEmail(verifyEmailDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FeedExternalApi - axios parameter creator
 * @export
 */
export const FeedExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get companies and meals based on the criteria
         * @summary Get feed
         * @param {FeedControllerGetFeedSortEnum} sort 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerGetFeed: async (sort: FeedControllerGetFeedSortEnum, page?: number, limit?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sort' is not null or undefined
            assertParamExists('feedControllerGetFeed', 'sort', sort)
            const localVarPath = `/api/v1/external/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedExternalApi - functional programming interface
 * @export
 */
export const FeedExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get companies and meals based on the criteria
         * @summary Get feed
         * @param {FeedControllerGetFeedSortEnum} sort 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerGetFeed(sort: FeedControllerGetFeedSortEnum, page?: number, limit?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericFeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerGetFeed(sort, page, limit, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedExternalApi - factory interface
 * @export
 */
export const FeedExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedExternalApiFp(configuration)
    return {
        /**
         * Get companies and meals based on the criteria
         * @summary Get feed
         * @param {FeedControllerGetFeedSortEnum} sort 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerGetFeed(sort: FeedControllerGetFeedSortEnum, page?: number, limit?: number, search?: string, options?: any): AxiosPromise<GenericFeedResponse> {
            return localVarFp.feedControllerGetFeed(sort, page, limit, search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedExternalApi - object-oriented interface
 * @export
 * @class FeedExternalApi
 * @extends {BaseAPI}
 */
export class FeedExternalApi extends BaseAPI {
    /**
     * Get companies and meals based on the criteria
     * @summary Get feed
     * @param {FeedControllerGetFeedSortEnum} sort 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedExternalApi
     */
    public feedControllerGetFeed(sort: FeedControllerGetFeedSortEnum, page?: number, limit?: number, search?: string, options?: AxiosRequestConfig) {
        return FeedExternalApiFp(this.configuration).feedControllerGetFeed(sort, page, limit, search, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const FeedControllerGetFeedSortEnum = {
    Popular: 'popular',
    Recommended: 'recommended',
    Rating: 'rating'
} as const;
export type FeedControllerGetFeedSortEnum = typeof FeedControllerGetFeedSortEnum[keyof typeof FeedControllerGetFeedSortEnum];


/**
 * LanguagesInternalApi - axios parameter creator
 * @export
 */
export const LanguagesInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update a specific language by its ID
         * @summary Update a language
         * @param {string} id 
         * @param {UpdateLanguageDto} updateLanguageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesInternalControllerUpdate: async (id: string, updateLanguageDto: UpdateLanguageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('languagesInternalControllerUpdate', 'id', id)
            // verify required parameter 'updateLanguageDto' is not null or undefined
            assertParamExists('languagesInternalControllerUpdate', 'updateLanguageDto', updateLanguageDto)
            const localVarPath = `/api/v1/internal/languages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLanguageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanguagesInternalApi - functional programming interface
 * @export
 */
export const LanguagesInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LanguagesInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Update a specific language by its ID
         * @summary Update a language
         * @param {string} id 
         * @param {UpdateLanguageDto} updateLanguageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesInternalControllerUpdate(id: string, updateLanguageDto: UpdateLanguageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericLanguageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesInternalControllerUpdate(id, updateLanguageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LanguagesInternalApi - factory interface
 * @export
 */
export const LanguagesInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LanguagesInternalApiFp(configuration)
    return {
        /**
         * Update a specific language by its ID
         * @summary Update a language
         * @param {string} id 
         * @param {UpdateLanguageDto} updateLanguageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesInternalControllerUpdate(id: string, updateLanguageDto: UpdateLanguageDto, options?: any): AxiosPromise<GenericLanguageResponse> {
            return localVarFp.languagesInternalControllerUpdate(id, updateLanguageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LanguagesInternalApi - object-oriented interface
 * @export
 * @class LanguagesInternalApi
 * @extends {BaseAPI}
 */
export class LanguagesInternalApi extends BaseAPI {
    /**
     * Update a specific language by its ID
     * @summary Update a language
     * @param {string} id 
     * @param {UpdateLanguageDto} updateLanguageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesInternalApi
     */
    public languagesInternalControllerUpdate(id: string, updateLanguageDto: UpdateLanguageDto, options?: AxiosRequestConfig) {
        return LanguagesInternalApiFp(this.configuration).languagesInternalControllerUpdate(id, updateLanguageDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LanguagesSharedApi - axios parameter creator
 * @export
 */
export const LanguagesSharedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all languages
         * @summary Get all languages
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesControllerFindAll: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shared/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific language by its code
         * @summary Get language by code
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesControllerFindByCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('languagesControllerFindByCode', 'code', code)
            const localVarPath = `/api/v1/shared/languages/by-code/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific language by its id
         * @summary Get language by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesControllerFindById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('languagesControllerFindById', 'id', id)
            const localVarPath = `/api/v1/shared/languages/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanguagesSharedApi - functional programming interface
 * @export
 */
export const LanguagesSharedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LanguagesSharedApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all languages
         * @summary Get all languages
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesControllerFindAll(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLanguagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesControllerFindAll(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific language by its code
         * @summary Get language by code
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesControllerFindByCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericLanguageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesControllerFindByCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific language by its id
         * @summary Get language by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesControllerFindById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesControllerFindById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LanguagesSharedApi - factory interface
 * @export
 */
export const LanguagesSharedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LanguagesSharedApiFp(configuration)
    return {
        /**
         * Get all languages
         * @summary Get all languages
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesControllerFindAll(page?: number, limit?: number, options?: any): AxiosPromise<ListLanguagesResponse> {
            return localVarFp.languagesControllerFindAll(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific language by its code
         * @summary Get language by code
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesControllerFindByCode(code: string, options?: any): AxiosPromise<GenericLanguageResponse> {
            return localVarFp.languagesControllerFindByCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific language by its id
         * @summary Get language by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesControllerFindById(id: string, options?: any): AxiosPromise<LanguageResponse> {
            return localVarFp.languagesControllerFindById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LanguagesSharedApi - object-oriented interface
 * @export
 * @class LanguagesSharedApi
 * @extends {BaseAPI}
 */
export class LanguagesSharedApi extends BaseAPI {
    /**
     * Get all languages
     * @summary Get all languages
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesSharedApi
     */
    public languagesControllerFindAll(page?: number, limit?: number, options?: AxiosRequestConfig) {
        return LanguagesSharedApiFp(this.configuration).languagesControllerFindAll(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific language by its code
     * @summary Get language by code
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesSharedApi
     */
    public languagesControllerFindByCode(code: string, options?: AxiosRequestConfig) {
        return LanguagesSharedApiFp(this.configuration).languagesControllerFindByCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific language by its id
     * @summary Get language by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesSharedApi
     */
    public languagesControllerFindById(id: string, options?: AxiosRequestConfig) {
        return LanguagesSharedApiFp(this.configuration).languagesControllerFindById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MealExternalApi - axios parameter creator
 * @export
 */
export const MealExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a meal by id
         * @summary Get a meal by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/external/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get meals by company id
         * @summary Get meals by company id
         * @param {string} companyId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByCompanyOrderEnum} [order] 
         * @param {MealControllerGetMealsByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerGetMealsByCompany: async (companyId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByCompanyOrderEnum, sortBy?: MealControllerGetMealsByCompanySortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('mealControllerGetMealsByCompany', 'companyId', companyId)
            const localVarPath = `/api/v1/external/meal/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get meals by menu id
         * @summary Get meals by menu id
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByMenuOrderEnum} [order] 
         * @param {MealControllerGetMealsByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerGetMealsByMenu: async (menuId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByMenuOrderEnum, sortBy?: MealControllerGetMealsByMenuSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('mealControllerGetMealsByMenu', 'menuId', menuId)
            const localVarPath = `/api/v1/external/meal/menu/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get meals by tag name
         * @summary Get meals by tag name
         * @param {string} tagName 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByTagOrderEnum} [order] 
         * @param {MealControllerGetMealsByTagSortByEnum} [sortBy] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerGetMealsByTag: async (tagName: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByTagOrderEnum, sortBy?: MealControllerGetMealsByTagSortByEnum, cityId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagName' is not null or undefined
            assertParamExists('mealControllerGetMealsByTag', 'tagName', tagName)
            const localVarPath = `/api/v1/external/meal/tag/{tagName}`
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealExternalApi - functional programming interface
 * @export
 */
export const MealExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a meal by id
         * @summary Get a meal by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get meals by company id
         * @summary Get meals by company id
         * @param {string} companyId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByCompanyOrderEnum} [order] 
         * @param {MealControllerGetMealsByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealControllerGetMealsByCompany(companyId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByCompanyOrderEnum, sortBy?: MealControllerGetMealsByCompanySortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealWithoutCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealControllerGetMealsByCompany(companyId, page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get meals by menu id
         * @summary Get meals by menu id
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByMenuOrderEnum} [order] 
         * @param {MealControllerGetMealsByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealControllerGetMealsByMenu(menuId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByMenuOrderEnum, sortBy?: MealControllerGetMealsByMenuSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealWithoutCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealControllerGetMealsByMenu(menuId, page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get meals by tag name
         * @summary Get meals by tag name
         * @param {string} tagName 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByTagOrderEnum} [order] 
         * @param {MealControllerGetMealsByTagSortByEnum} [sortBy] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealControllerGetMealsByTag(tagName: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByTagOrderEnum, sortBy?: MealControllerGetMealsByTagSortByEnum, cityId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealControllerGetMealsByTag(tagName, page, limit, search, order, sortBy, cityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MealExternalApi - factory interface
 * @export
 */
export const MealExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealExternalApiFp(configuration)
    return {
        /**
         * Get a meal by id
         * @summary Get a meal by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerFindOne(id: string, options?: any): AxiosPromise<GenericMealResponse> {
            return localVarFp.mealControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get meals by company id
         * @summary Get meals by company id
         * @param {string} companyId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByCompanyOrderEnum} [order] 
         * @param {MealControllerGetMealsByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerGetMealsByCompany(companyId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByCompanyOrderEnum, sortBy?: MealControllerGetMealsByCompanySortByEnum, options?: any): AxiosPromise<ListMealWithoutCompanyResponse> {
            return localVarFp.mealControllerGetMealsByCompany(companyId, page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get meals by menu id
         * @summary Get meals by menu id
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByMenuOrderEnum} [order] 
         * @param {MealControllerGetMealsByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerGetMealsByMenu(menuId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByMenuOrderEnum, sortBy?: MealControllerGetMealsByMenuSortByEnum, options?: any): AxiosPromise<ListMealWithoutCompanyResponse> {
            return localVarFp.mealControllerGetMealsByMenu(menuId, page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get meals by tag name
         * @summary Get meals by tag name
         * @param {string} tagName 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealControllerGetMealsByTagOrderEnum} [order] 
         * @param {MealControllerGetMealsByTagSortByEnum} [sortBy] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerGetMealsByTag(tagName: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByTagOrderEnum, sortBy?: MealControllerGetMealsByTagSortByEnum, cityId?: number, options?: any): AxiosPromise<ListMealResponse> {
            return localVarFp.mealControllerGetMealsByTag(tagName, page, limit, search, order, sortBy, cityId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MealExternalApi - object-oriented interface
 * @export
 * @class MealExternalApi
 * @extends {BaseAPI}
 */
export class MealExternalApi extends BaseAPI {
    /**
     * Get a meal by id
     * @summary Get a meal by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealExternalApi
     */
    public mealControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MealExternalApiFp(this.configuration).mealControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get meals by company id
     * @summary Get meals by company id
     * @param {string} companyId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MealControllerGetMealsByCompanyOrderEnum} [order] 
     * @param {MealControllerGetMealsByCompanySortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealExternalApi
     */
    public mealControllerGetMealsByCompany(companyId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByCompanyOrderEnum, sortBy?: MealControllerGetMealsByCompanySortByEnum, options?: AxiosRequestConfig) {
        return MealExternalApiFp(this.configuration).mealControllerGetMealsByCompany(companyId, page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get meals by menu id
     * @summary Get meals by menu id
     * @param {string} menuId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MealControllerGetMealsByMenuOrderEnum} [order] 
     * @param {MealControllerGetMealsByMenuSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealExternalApi
     */
    public mealControllerGetMealsByMenu(menuId: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByMenuOrderEnum, sortBy?: MealControllerGetMealsByMenuSortByEnum, options?: AxiosRequestConfig) {
        return MealExternalApiFp(this.configuration).mealControllerGetMealsByMenu(menuId, page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get meals by tag name
     * @summary Get meals by tag name
     * @param {string} tagName 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MealControllerGetMealsByTagOrderEnum} [order] 
     * @param {MealControllerGetMealsByTagSortByEnum} [sortBy] 
     * @param {number} [cityId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealExternalApi
     */
    public mealControllerGetMealsByTag(tagName: string, page?: number, limit?: number, search?: string, order?: MealControllerGetMealsByTagOrderEnum, sortBy?: MealControllerGetMealsByTagSortByEnum, cityId?: number, options?: AxiosRequestConfig) {
        return MealExternalApiFp(this.configuration).mealControllerGetMealsByTag(tagName, page, limit, search, order, sortBy, cityId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MealControllerGetMealsByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealControllerGetMealsByCompanyOrderEnum = typeof MealControllerGetMealsByCompanyOrderEnum[keyof typeof MealControllerGetMealsByCompanyOrderEnum];
/**
 * @export
 */
export const MealControllerGetMealsByCompanySortByEnum = {
    Name: 'name',
    Type: 'type'
} as const;
export type MealControllerGetMealsByCompanySortByEnum = typeof MealControllerGetMealsByCompanySortByEnum[keyof typeof MealControllerGetMealsByCompanySortByEnum];
/**
 * @export
 */
export const MealControllerGetMealsByMenuOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealControllerGetMealsByMenuOrderEnum = typeof MealControllerGetMealsByMenuOrderEnum[keyof typeof MealControllerGetMealsByMenuOrderEnum];
/**
 * @export
 */
export const MealControllerGetMealsByMenuSortByEnum = {
    Name: 'name',
    Type: 'type'
} as const;
export type MealControllerGetMealsByMenuSortByEnum = typeof MealControllerGetMealsByMenuSortByEnum[keyof typeof MealControllerGetMealsByMenuSortByEnum];
/**
 * @export
 */
export const MealControllerGetMealsByTagOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealControllerGetMealsByTagOrderEnum = typeof MealControllerGetMealsByTagOrderEnum[keyof typeof MealControllerGetMealsByTagOrderEnum];
/**
 * @export
 */
export const MealControllerGetMealsByTagSortByEnum = {
    Company: 'company',
    Name: 'name',
    Type: 'type'
} as const;
export type MealControllerGetMealsByTagSortByEnum = typeof MealControllerGetMealsByTagSortByEnum[keyof typeof MealControllerGetMealsByTagSortByEnum];


/**
 * MealInternalApi - axios parameter creator
 * @export
 */
export const MealInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a meal for the company
         * @summary Create a meal for the company
         * @param {MealDto} mealDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerCreateForCompany: async (mealDto: MealDto, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealDto' is not null or undefined
            assertParamExists('mealAdminControllerCreateForCompany', 'mealDto', mealDto)
            const localVarPath = `/api/v1/internal/meal/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all meals for superadmin
         * @summary Get all meals for superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindAllOrderEnum} [order] 
         * @param {MealAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerFindAll: async (page?: number, limit?: number, search?: string, order?: MealAdminControllerFindAllOrderEnum, sortBy?: MealAdminControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/meal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all meals for the company
         * @summary Get all meals for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindByCompanyOrderEnum} [order] 
         * @param {MealAdminControllerFindByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerFindByCompany: async (page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByCompanyOrderEnum, sortBy?: MealAdminControllerFindByCompanySortByEnum, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/meal/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get meals by menu id
         * @summary Get meals by menu id
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindByMenuOrderEnum} [order] 
         * @param {MealAdminControllerFindByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerFindByMenu: async (menuId: string, page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByMenuOrderEnum, sortBy?: MealAdminControllerFindByMenuSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('mealAdminControllerFindByMenu', 'menuId', menuId)
            const localVarPath = `/api/v1/internal/meal/menu/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meal by id
         * @summary Get a meal by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerGetMeal: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealAdminControllerGetMeal', 'id', id)
            const localVarPath = `/api/v1/internal/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a meal
         * @summary Delete a meal
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealAdminControllerRemove', 'id', id)
            const localVarPath = `/api/v1/internal/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a meal
         * @summary Update a meal
         * @param {string} id 
         * @param {UpdateMealDto} updateMealDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerUpdate: async (id: string, updateMealDto: UpdateMealDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealAdminControllerUpdate', 'id', id)
            // verify required parameter 'updateMealDto' is not null or undefined
            assertParamExists('mealAdminControllerUpdate', 'updateMealDto', updateMealDto)
            const localVarPath = `/api/v1/internal/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMealDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealInternalApi - functional programming interface
 * @export
 */
export const MealInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a meal for the company
         * @summary Create a meal for the company
         * @param {MealDto} mealDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealAdminControllerCreateForCompany(mealDto: MealDto, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealAdminControllerCreateForCompany(mealDto, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all meals for superadmin
         * @summary Get all meals for superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindAllOrderEnum} [order] 
         * @param {MealAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: MealAdminControllerFindAllOrderEnum, sortBy?: MealAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealAdminControllerFindAll(page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all meals for the company
         * @summary Get all meals for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindByCompanyOrderEnum} [order] 
         * @param {MealAdminControllerFindByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealAdminControllerFindByCompany(page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByCompanyOrderEnum, sortBy?: MealAdminControllerFindByCompanySortByEnum, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealWithoutCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealAdminControllerFindByCompany(page, limit, search, order, sortBy, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get meals by menu id
         * @summary Get meals by menu id
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindByMenuOrderEnum} [order] 
         * @param {MealAdminControllerFindByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealAdminControllerFindByMenu(menuId: string, page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByMenuOrderEnum, sortBy?: MealAdminControllerFindByMenuSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealAdminControllerFindByMenu(menuId, page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meal by id
         * @summary Get a meal by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealAdminControllerGetMeal(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealAdminControllerGetMeal(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a meal
         * @summary Delete a meal
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealAdminControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealAdminControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a meal
         * @summary Update a meal
         * @param {string} id 
         * @param {UpdateMealDto} updateMealDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealAdminControllerUpdate(id: string, updateMealDto: UpdateMealDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealAdminControllerUpdate(id, updateMealDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MealInternalApi - factory interface
 * @export
 */
export const MealInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealInternalApiFp(configuration)
    return {
        /**
         * Create a meal for the company
         * @summary Create a meal for the company
         * @param {MealDto} mealDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerCreateForCompany(mealDto: MealDto, id?: string, options?: any): AxiosPromise<GenericMealAdminResponse> {
            return localVarFp.mealAdminControllerCreateForCompany(mealDto, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all meals for superadmin
         * @summary Get all meals for superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindAllOrderEnum} [order] 
         * @param {MealAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: MealAdminControllerFindAllOrderEnum, sortBy?: MealAdminControllerFindAllSortByEnum, options?: any): AxiosPromise<ListMealAdminResponse> {
            return localVarFp.mealAdminControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all meals for the company
         * @summary Get all meals for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindByCompanyOrderEnum} [order] 
         * @param {MealAdminControllerFindByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerFindByCompany(page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByCompanyOrderEnum, sortBy?: MealAdminControllerFindByCompanySortByEnum, id?: string, options?: any): AxiosPromise<ListMealWithoutCompanyResponse> {
            return localVarFp.mealAdminControllerFindByCompany(page, limit, search, order, sortBy, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get meals by menu id
         * @summary Get meals by menu id
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MealAdminControllerFindByMenuOrderEnum} [order] 
         * @param {MealAdminControllerFindByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerFindByMenu(menuId: string, page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByMenuOrderEnum, sortBy?: MealAdminControllerFindByMenuSortByEnum, options?: any): AxiosPromise<ListMealAdminResponse> {
            return localVarFp.mealAdminControllerFindByMenu(menuId, page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meal by id
         * @summary Get a meal by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerGetMeal(id: string, options?: any): AxiosPromise<GenericMealAdminResponse> {
            return localVarFp.mealAdminControllerGetMeal(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a meal
         * @summary Delete a meal
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerRemove(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.mealAdminControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a meal
         * @summary Update a meal
         * @param {string} id 
         * @param {UpdateMealDto} updateMealDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealAdminControllerUpdate(id: string, updateMealDto: UpdateMealDto, options?: any): AxiosPromise<GenericMealAdminResponse> {
            return localVarFp.mealAdminControllerUpdate(id, updateMealDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MealInternalApi - object-oriented interface
 * @export
 * @class MealInternalApi
 * @extends {BaseAPI}
 */
export class MealInternalApi extends BaseAPI {
    /**
     * Create a meal for the company
     * @summary Create a meal for the company
     * @param {MealDto} mealDto 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealInternalApi
     */
    public mealAdminControllerCreateForCompany(mealDto: MealDto, id?: string, options?: AxiosRequestConfig) {
        return MealInternalApiFp(this.configuration).mealAdminControllerCreateForCompany(mealDto, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all meals for superadmin
     * @summary Get all meals for superadmin
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MealAdminControllerFindAllOrderEnum} [order] 
     * @param {MealAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealInternalApi
     */
    public mealAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: MealAdminControllerFindAllOrderEnum, sortBy?: MealAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return MealInternalApiFp(this.configuration).mealAdminControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all meals for the company
     * @summary Get all meals for the company
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MealAdminControllerFindByCompanyOrderEnum} [order] 
     * @param {MealAdminControllerFindByCompanySortByEnum} [sortBy] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealInternalApi
     */
    public mealAdminControllerFindByCompany(page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByCompanyOrderEnum, sortBy?: MealAdminControllerFindByCompanySortByEnum, id?: string, options?: AxiosRequestConfig) {
        return MealInternalApiFp(this.configuration).mealAdminControllerFindByCompany(page, limit, search, order, sortBy, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get meals by menu id
     * @summary Get meals by menu id
     * @param {string} menuId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MealAdminControllerFindByMenuOrderEnum} [order] 
     * @param {MealAdminControllerFindByMenuSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealInternalApi
     */
    public mealAdminControllerFindByMenu(menuId: string, page?: number, limit?: number, search?: string, order?: MealAdminControllerFindByMenuOrderEnum, sortBy?: MealAdminControllerFindByMenuSortByEnum, options?: AxiosRequestConfig) {
        return MealInternalApiFp(this.configuration).mealAdminControllerFindByMenu(menuId, page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meal by id
     * @summary Get a meal by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealInternalApi
     */
    public mealAdminControllerGetMeal(id: string, options?: AxiosRequestConfig) {
        return MealInternalApiFp(this.configuration).mealAdminControllerGetMeal(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a meal
     * @summary Delete a meal
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealInternalApi
     */
    public mealAdminControllerRemove(id: string, options?: AxiosRequestConfig) {
        return MealInternalApiFp(this.configuration).mealAdminControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a meal
     * @summary Update a meal
     * @param {string} id 
     * @param {UpdateMealDto} updateMealDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealInternalApi
     */
    public mealAdminControllerUpdate(id: string, updateMealDto: UpdateMealDto, options?: AxiosRequestConfig) {
        return MealInternalApiFp(this.configuration).mealAdminControllerUpdate(id, updateMealDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MealAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealAdminControllerFindAllOrderEnum = typeof MealAdminControllerFindAllOrderEnum[keyof typeof MealAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const MealAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    Type: 'type'
} as const;
export type MealAdminControllerFindAllSortByEnum = typeof MealAdminControllerFindAllSortByEnum[keyof typeof MealAdminControllerFindAllSortByEnum];
/**
 * @export
 */
export const MealAdminControllerFindByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealAdminControllerFindByCompanyOrderEnum = typeof MealAdminControllerFindByCompanyOrderEnum[keyof typeof MealAdminControllerFindByCompanyOrderEnum];
/**
 * @export
 */
export const MealAdminControllerFindByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    Type: 'type'
} as const;
export type MealAdminControllerFindByCompanySortByEnum = typeof MealAdminControllerFindByCompanySortByEnum[keyof typeof MealAdminControllerFindByCompanySortByEnum];
/**
 * @export
 */
export const MealAdminControllerFindByMenuOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealAdminControllerFindByMenuOrderEnum = typeof MealAdminControllerFindByMenuOrderEnum[keyof typeof MealAdminControllerFindByMenuOrderEnum];
/**
 * @export
 */
export const MealAdminControllerFindByMenuSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Company: 'company',
    Name: 'name',
    Type: 'type'
} as const;
export type MealAdminControllerFindByMenuSortByEnum = typeof MealAdminControllerFindByMenuSortByEnum[keyof typeof MealAdminControllerFindByMenuSortByEnum];


/**
 * MealRatingExternalApi - axios parameter creator
 * @export
 */
export const MealRatingExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a meal rating
         * @summary Create a meal rating
         * @param {string} id 
         * @param {string} orderId 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerCreate: async (id: string, orderId: string, mealRatingDto: MealRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingControllerCreate', 'id', id)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('mealRatingControllerCreate', 'orderId', orderId)
            // verify required parameter 'mealRatingDto' is not null or undefined
            assertParamExists('mealRatingControllerCreate', 'mealRatingDto', mealRatingDto)
            const localVarPath = `/api/v1/external/rating/meal/{id}/order/{orderId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all ratings of a meal
         * @summary Get all ratings of a meal
         * @param {string} mealId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllOrderEnum} [order] 
         * @param {MealRatingControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerFindAll: async (mealId: string, page?: number, limit?: number, order?: MealRatingControllerFindAllOrderEnum, sortBy?: MealRatingControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('mealRatingControllerFindAll', 'mealId', mealId)
            const localVarPath = `/api/v1/external/rating/meal/of/{mealId}`
                .replace(`{${"mealId"}}`, encodeURIComponent(String(mealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all meal ratings of a company
         * @summary Get all meal ratings of a company
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MealRatingControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerFindAllByCompany: async (id: string, page?: number, limit?: number, order?: MealRatingControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingControllerFindAllByCompanySortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingControllerFindAllByCompany', 'id', id)
            const localVarPath = `/api/v1/external/rating/meal/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all meal ratings of current user
         * @summary Get all meal ratings of current user
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllByCurrentUserOrderEnum} [order] 
         * @param {MealRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerFindAllByCurrentUser: async (page?: number, limit?: number, order?: MealRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MealRatingControllerFindAllByCurrentUserSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/rating/meal/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meal rating by id
         * @summary Get a meal rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerGetMealRating: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingControllerGetMealRating', 'id', id)
            const localVarPath = `/api/v1/external/rating/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a meal rating
         * @summary Update a meal rating
         * @param {string} id 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerUpdate: async (id: string, mealRatingDto: MealRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingControllerUpdate', 'id', id)
            // verify required parameter 'mealRatingDto' is not null or undefined
            assertParamExists('mealRatingControllerUpdate', 'mealRatingDto', mealRatingDto)
            const localVarPath = `/api/v1/external/rating/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealRatingExternalApi - functional programming interface
 * @export
 */
export const MealRatingExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealRatingExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a meal rating
         * @summary Create a meal rating
         * @param {string} id 
         * @param {string} orderId 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingControllerCreate(id: string, orderId: string, mealRatingDto: MealRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealRatingWithoutUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingControllerCreate(id, orderId, mealRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all ratings of a meal
         * @summary Get all ratings of a meal
         * @param {string} mealId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllOrderEnum} [order] 
         * @param {MealRatingControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingControllerFindAll(mealId: string, page?: number, limit?: number, order?: MealRatingControllerFindAllOrderEnum, sortBy?: MealRatingControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealRatingWithoutMealResponseExternal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingControllerFindAll(mealId, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all meal ratings of a company
         * @summary Get all meal ratings of a company
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MealRatingControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingControllerFindAllByCompany(id: string, page?: number, limit?: number, order?: MealRatingControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingControllerFindAllByCompanySortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealRatingWithoutCompanyResponseExternal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingControllerFindAllByCompany(id, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all meal ratings of current user
         * @summary Get all meal ratings of current user
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllByCurrentUserOrderEnum} [order] 
         * @param {MealRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingControllerFindAllByCurrentUser(page?: number, limit?: number, order?: MealRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MealRatingControllerFindAllByCurrentUserSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealRatingWithoutUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingControllerFindAllByCurrentUser(page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meal rating by id
         * @summary Get a meal rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingControllerGetMealRating(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealRatingResponseExternal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingControllerGetMealRating(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a meal rating
         * @summary Update a meal rating
         * @param {string} id 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingControllerUpdate(id: string, mealRatingDto: MealRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealRatingWithoutUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingControllerUpdate(id, mealRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MealRatingExternalApi - factory interface
 * @export
 */
export const MealRatingExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealRatingExternalApiFp(configuration)
    return {
        /**
         * Create a meal rating
         * @summary Create a meal rating
         * @param {string} id 
         * @param {string} orderId 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerCreate(id: string, orderId: string, mealRatingDto: MealRatingDto, options?: any): AxiosPromise<GenericMealRatingWithoutUserResponse> {
            return localVarFp.mealRatingControllerCreate(id, orderId, mealRatingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all ratings of a meal
         * @summary Get all ratings of a meal
         * @param {string} mealId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllOrderEnum} [order] 
         * @param {MealRatingControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerFindAll(mealId: string, page?: number, limit?: number, order?: MealRatingControllerFindAllOrderEnum, sortBy?: MealRatingControllerFindAllSortByEnum, options?: any): AxiosPromise<ListMealRatingWithoutMealResponseExternal> {
            return localVarFp.mealRatingControllerFindAll(mealId, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all meal ratings of a company
         * @summary Get all meal ratings of a company
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MealRatingControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerFindAllByCompany(id: string, page?: number, limit?: number, order?: MealRatingControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingControllerFindAllByCompanySortByEnum, options?: any): AxiosPromise<ListMealRatingWithoutCompanyResponseExternal> {
            return localVarFp.mealRatingControllerFindAllByCompany(id, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all meal ratings of current user
         * @summary Get all meal ratings of current user
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingControllerFindAllByCurrentUserOrderEnum} [order] 
         * @param {MealRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerFindAllByCurrentUser(page?: number, limit?: number, order?: MealRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MealRatingControllerFindAllByCurrentUserSortByEnum, options?: any): AxiosPromise<ListMealRatingWithoutUserResponse> {
            return localVarFp.mealRatingControllerFindAllByCurrentUser(page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meal rating by id
         * @summary Get a meal rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerGetMealRating(id: string, options?: any): AxiosPromise<GenericMealRatingResponseExternal> {
            return localVarFp.mealRatingControllerGetMealRating(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a meal rating
         * @summary Update a meal rating
         * @param {string} id 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingControllerUpdate(id: string, mealRatingDto: MealRatingDto, options?: any): AxiosPromise<GenericMealRatingWithoutUserResponse> {
            return localVarFp.mealRatingControllerUpdate(id, mealRatingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MealRatingExternalApi - object-oriented interface
 * @export
 * @class MealRatingExternalApi
 * @extends {BaseAPI}
 */
export class MealRatingExternalApi extends BaseAPI {
    /**
     * Create a meal rating
     * @summary Create a meal rating
     * @param {string} id 
     * @param {string} orderId 
     * @param {MealRatingDto} mealRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingExternalApi
     */
    public mealRatingControllerCreate(id: string, orderId: string, mealRatingDto: MealRatingDto, options?: AxiosRequestConfig) {
        return MealRatingExternalApiFp(this.configuration).mealRatingControllerCreate(id, orderId, mealRatingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all ratings of a meal
     * @summary Get all ratings of a meal
     * @param {string} mealId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MealRatingControllerFindAllOrderEnum} [order] 
     * @param {MealRatingControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingExternalApi
     */
    public mealRatingControllerFindAll(mealId: string, page?: number, limit?: number, order?: MealRatingControllerFindAllOrderEnum, sortBy?: MealRatingControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return MealRatingExternalApiFp(this.configuration).mealRatingControllerFindAll(mealId, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all meal ratings of a company
     * @summary Get all meal ratings of a company
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MealRatingControllerFindAllByCompanyOrderEnum} [order] 
     * @param {MealRatingControllerFindAllByCompanySortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingExternalApi
     */
    public mealRatingControllerFindAllByCompany(id: string, page?: number, limit?: number, order?: MealRatingControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingControllerFindAllByCompanySortByEnum, options?: AxiosRequestConfig) {
        return MealRatingExternalApiFp(this.configuration).mealRatingControllerFindAllByCompany(id, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all meal ratings of current user
     * @summary Get all meal ratings of current user
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MealRatingControllerFindAllByCurrentUserOrderEnum} [order] 
     * @param {MealRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingExternalApi
     */
    public mealRatingControllerFindAllByCurrentUser(page?: number, limit?: number, order?: MealRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MealRatingControllerFindAllByCurrentUserSortByEnum, options?: AxiosRequestConfig) {
        return MealRatingExternalApiFp(this.configuration).mealRatingControllerFindAllByCurrentUser(page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meal rating by id
     * @summary Get a meal rating by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingExternalApi
     */
    public mealRatingControllerGetMealRating(id: string, options?: AxiosRequestConfig) {
        return MealRatingExternalApiFp(this.configuration).mealRatingControllerGetMealRating(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a meal rating
     * @summary Update a meal rating
     * @param {string} id 
     * @param {MealRatingDto} mealRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingExternalApi
     */
    public mealRatingControllerUpdate(id: string, mealRatingDto: MealRatingDto, options?: AxiosRequestConfig) {
        return MealRatingExternalApiFp(this.configuration).mealRatingControllerUpdate(id, mealRatingDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MealRatingControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealRatingControllerFindAllOrderEnum = typeof MealRatingControllerFindAllOrderEnum[keyof typeof MealRatingControllerFindAllOrderEnum];
/**
 * @export
 */
export const MealRatingControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MealRatingControllerFindAllSortByEnum = typeof MealRatingControllerFindAllSortByEnum[keyof typeof MealRatingControllerFindAllSortByEnum];
/**
 * @export
 */
export const MealRatingControllerFindAllByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealRatingControllerFindAllByCompanyOrderEnum = typeof MealRatingControllerFindAllByCompanyOrderEnum[keyof typeof MealRatingControllerFindAllByCompanyOrderEnum];
/**
 * @export
 */
export const MealRatingControllerFindAllByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MealRatingControllerFindAllByCompanySortByEnum = typeof MealRatingControllerFindAllByCompanySortByEnum[keyof typeof MealRatingControllerFindAllByCompanySortByEnum];
/**
 * @export
 */
export const MealRatingControllerFindAllByCurrentUserOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealRatingControllerFindAllByCurrentUserOrderEnum = typeof MealRatingControllerFindAllByCurrentUserOrderEnum[keyof typeof MealRatingControllerFindAllByCurrentUserOrderEnum];
/**
 * @export
 */
export const MealRatingControllerFindAllByCurrentUserSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate',
    Company: 'company'
} as const;
export type MealRatingControllerFindAllByCurrentUserSortByEnum = typeof MealRatingControllerFindAllByCurrentUserSortByEnum[keyof typeof MealRatingControllerFindAllByCurrentUserSortByEnum];


/**
 * MealRatingInternalApi - axios parameter creator
 * @export
 */
export const MealRatingInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all ratings of a meal
         * @summary Get all ratings of a meal
         * @param {string} mealId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindAll: async (mealId: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllOrderEnum, sortBy?: MealRatingAdminControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('mealRatingAdminControllerFindAll', 'mealId', mealId)
            const localVarPath = `/api/v1/internal/rating/meal/of/{mealId}`
                .replace(`{${"mealId"}}`, encodeURIComponent(String(mealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all meal ratings of the company
         * @summary Get all meal ratings of the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindAllByCompany: async (page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/rating/meal/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all meal ratings of a user by superadmin
         * @summary Get all meal ratings of a user by superadmin
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllByUserOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindAllByUser: async (id: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MealRatingAdminControllerFindAllByUserSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingAdminControllerFindAllByUser', 'id', id)
            const localVarPath = `/api/v1/internal/rating/meal/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meal rating by id
         * @summary Get a meal rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingAdminControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/internal/rating/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a meal rating by superadmin
         * @summary Delete a meal rating by superadmin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingAdminControllerRemove', 'id', id)
            const localVarPath = `/api/v1/internal/rating/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a meal rating by superadmin
         * @summary Update a meal rating by superadmin
         * @param {string} id 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerUpdate: async (id: string, mealRatingDto: MealRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mealRatingAdminControllerUpdate', 'id', id)
            // verify required parameter 'mealRatingDto' is not null or undefined
            assertParamExists('mealRatingAdminControllerUpdate', 'mealRatingDto', mealRatingDto)
            const localVarPath = `/api/v1/internal/rating/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealRatingInternalApi - functional programming interface
 * @export
 */
export const MealRatingInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealRatingInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all ratings of a meal
         * @summary Get all ratings of a meal
         * @param {string} mealId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingAdminControllerFindAll(mealId: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllOrderEnum, sortBy?: MealRatingAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealRatingWithoutMealAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingAdminControllerFindAll(mealId, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all meal ratings of the company
         * @summary Get all meal ratings of the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingAdminControllerFindAllByCompany(page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealRatingWithoutCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingAdminControllerFindAllByCompany(page, limit, order, sortBy, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all meal ratings of a user by superadmin
         * @summary Get all meal ratings of a user by superadmin
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllByUserOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingAdminControllerFindAllByUser(id: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MealRatingAdminControllerFindAllByUserSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMealRatingWithoutUserAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingAdminControllerFindAllByUser(id, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meal rating by id
         * @summary Get a meal rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingAdminControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealRatingAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingAdminControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a meal rating by superadmin
         * @summary Delete a meal rating by superadmin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingAdminControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingAdminControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a meal rating by superadmin
         * @summary Update a meal rating by superadmin
         * @param {string} id 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealRatingAdminControllerUpdate(id: string, mealRatingDto: MealRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMealRatingAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealRatingAdminControllerUpdate(id, mealRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MealRatingInternalApi - factory interface
 * @export
 */
export const MealRatingInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealRatingInternalApiFp(configuration)
    return {
        /**
         * Get all ratings of a meal
         * @summary Get all ratings of a meal
         * @param {string} mealId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindAll(mealId: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllOrderEnum, sortBy?: MealRatingAdminControllerFindAllSortByEnum, options?: any): AxiosPromise<ListMealRatingWithoutMealAdminResponse> {
            return localVarFp.mealRatingAdminControllerFindAll(mealId, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all meal ratings of the company
         * @summary Get all meal ratings of the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindAllByCompany(page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options?: any): AxiosPromise<ListMealRatingWithoutCompanyAdminResponse> {
            return localVarFp.mealRatingAdminControllerFindAllByCompany(page, limit, order, sortBy, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all meal ratings of a user by superadmin
         * @summary Get all meal ratings of a user by superadmin
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MealRatingAdminControllerFindAllByUserOrderEnum} [order] 
         * @param {MealRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindAllByUser(id: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MealRatingAdminControllerFindAllByUserSortByEnum, options?: any): AxiosPromise<ListMealRatingWithoutUserAdminResponse> {
            return localVarFp.mealRatingAdminControllerFindAllByUser(id, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meal rating by id
         * @summary Get a meal rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerFindOne(id: string, options?: any): AxiosPromise<GenericMealRatingAdminResponse> {
            return localVarFp.mealRatingAdminControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a meal rating by superadmin
         * @summary Delete a meal rating by superadmin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerRemove(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.mealRatingAdminControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a meal rating by superadmin
         * @summary Update a meal rating by superadmin
         * @param {string} id 
         * @param {MealRatingDto} mealRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealRatingAdminControllerUpdate(id: string, mealRatingDto: MealRatingDto, options?: any): AxiosPromise<GenericMealRatingAdminResponse> {
            return localVarFp.mealRatingAdminControllerUpdate(id, mealRatingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MealRatingInternalApi - object-oriented interface
 * @export
 * @class MealRatingInternalApi
 * @extends {BaseAPI}
 */
export class MealRatingInternalApi extends BaseAPI {
    /**
     * Get all ratings of a meal
     * @summary Get all ratings of a meal
     * @param {string} mealId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MealRatingAdminControllerFindAllOrderEnum} [order] 
     * @param {MealRatingAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingInternalApi
     */
    public mealRatingAdminControllerFindAll(mealId: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllOrderEnum, sortBy?: MealRatingAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return MealRatingInternalApiFp(this.configuration).mealRatingAdminControllerFindAll(mealId, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all meal ratings of the company
     * @summary Get all meal ratings of the company
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MealRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
     * @param {MealRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingInternalApi
     */
    public mealRatingAdminControllerFindAllByCompany(page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MealRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig) {
        return MealRatingInternalApiFp(this.configuration).mealRatingAdminControllerFindAllByCompany(page, limit, order, sortBy, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all meal ratings of a user by superadmin
     * @summary Get all meal ratings of a user by superadmin
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MealRatingAdminControllerFindAllByUserOrderEnum} [order] 
     * @param {MealRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingInternalApi
     */
    public mealRatingAdminControllerFindAllByUser(id: string, page?: number, limit?: number, order?: MealRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MealRatingAdminControllerFindAllByUserSortByEnum, options?: AxiosRequestConfig) {
        return MealRatingInternalApiFp(this.configuration).mealRatingAdminControllerFindAllByUser(id, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meal rating by id
     * @summary Get a meal rating by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingInternalApi
     */
    public mealRatingAdminControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MealRatingInternalApiFp(this.configuration).mealRatingAdminControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a meal rating by superadmin
     * @summary Delete a meal rating by superadmin
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingInternalApi
     */
    public mealRatingAdminControllerRemove(id: string, options?: AxiosRequestConfig) {
        return MealRatingInternalApiFp(this.configuration).mealRatingAdminControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a meal rating by superadmin
     * @summary Update a meal rating by superadmin
     * @param {string} id 
     * @param {MealRatingDto} mealRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealRatingInternalApi
     */
    public mealRatingAdminControllerUpdate(id: string, mealRatingDto: MealRatingDto, options?: AxiosRequestConfig) {
        return MealRatingInternalApiFp(this.configuration).mealRatingAdminControllerUpdate(id, mealRatingDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MealRatingAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealRatingAdminControllerFindAllOrderEnum = typeof MealRatingAdminControllerFindAllOrderEnum[keyof typeof MealRatingAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const MealRatingAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MealRatingAdminControllerFindAllSortByEnum = typeof MealRatingAdminControllerFindAllSortByEnum[keyof typeof MealRatingAdminControllerFindAllSortByEnum];
/**
 * @export
 */
export const MealRatingAdminControllerFindAllByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealRatingAdminControllerFindAllByCompanyOrderEnum = typeof MealRatingAdminControllerFindAllByCompanyOrderEnum[keyof typeof MealRatingAdminControllerFindAllByCompanyOrderEnum];
/**
 * @export
 */
export const MealRatingAdminControllerFindAllByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MealRatingAdminControllerFindAllByCompanySortByEnum = typeof MealRatingAdminControllerFindAllByCompanySortByEnum[keyof typeof MealRatingAdminControllerFindAllByCompanySortByEnum];
/**
 * @export
 */
export const MealRatingAdminControllerFindAllByUserOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MealRatingAdminControllerFindAllByUserOrderEnum = typeof MealRatingAdminControllerFindAllByUserOrderEnum[keyof typeof MealRatingAdminControllerFindAllByUserOrderEnum];
/**
 * @export
 */
export const MealRatingAdminControllerFindAllByUserSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate',
    Company: 'company'
} as const;
export type MealRatingAdminControllerFindAllByUserSortByEnum = typeof MealRatingAdminControllerFindAllByUserSortByEnum[keyof typeof MealRatingAdminControllerFindAllByUserSortByEnum];


/**
 * MenuConstraintInternalApi - axios parameter creator
 * @export
 */
export const MenuConstraintInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a menu constraint for the company
         * @summary Create a menu constraint for the company
         * @param {MenuConstraintDto} menuConstraintDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerCreateBySuperAdmin: async (menuConstraintDto: MenuConstraintDto, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuConstraintDto' is not null or undefined
            assertParamExists('menuConstraintAdminControllerCreateBySuperAdmin', 'menuConstraintDto', menuConstraintDto)
            const localVarPath = `/api/v1/internal/menu-constraint/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuConstraintDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a menu constraint
         * @summary Delete a menu constraint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuConstraintAdminControllerDelete', 'id', id)
            const localVarPath = `/api/v1/internal/menu-constraint/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menu constraints for the company
         * @summary Get all menu constraints for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuConstraintAdminControllerGetAllByCompanyOrderEnum} [order] 
         * @param {MenuConstraintAdminControllerGetAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerGetAllByCompany: async (page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByCompanyOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByCompanySortByEnum, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/menu-constraint/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menu constraints by menu id
         * @summary Get all menu constraints by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuConstraintAdminControllerGetAllByMenuOrderEnum} [order] 
         * @param {MenuConstraintAdminControllerGetAllByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerGetAllByMenu: async (id: string, page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByMenuOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByMenuSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuConstraintAdminControllerGetAllByMenu', 'id', id)
            const localVarPath = `/api/v1/internal/menu-constraint/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a menu constraint by id
         * @summary Get a menu constraint by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuConstraintAdminControllerGetById', 'id', id)
            const localVarPath = `/api/v1/internal/menu-constraint/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a menu constraint
         * @summary Update a menu constraint
         * @param {string} id 
         * @param {UpdateMenuConstraintDto} updateMenuConstraintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerUpdate: async (id: string, updateMenuConstraintDto: UpdateMenuConstraintDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuConstraintAdminControllerUpdate', 'id', id)
            // verify required parameter 'updateMenuConstraintDto' is not null or undefined
            assertParamExists('menuConstraintAdminControllerUpdate', 'updateMenuConstraintDto', updateMenuConstraintDto)
            const localVarPath = `/api/v1/internal/menu-constraint/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMenuConstraintDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuConstraintInternalApi - functional programming interface
 * @export
 */
export const MenuConstraintInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuConstraintInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a menu constraint for the company
         * @summary Create a menu constraint for the company
         * @param {MenuConstraintDto} menuConstraintDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuConstraintAdminControllerCreateBySuperAdmin(menuConstraintDto: MenuConstraintDto, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuConstraintResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuConstraintAdminControllerCreateBySuperAdmin(menuConstraintDto, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a menu constraint
         * @summary Delete a menu constraint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuConstraintAdminControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuConstraintAdminControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menu constraints for the company
         * @summary Get all menu constraints for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuConstraintAdminControllerGetAllByCompanyOrderEnum} [order] 
         * @param {MenuConstraintAdminControllerGetAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuConstraintAdminControllerGetAllByCompany(page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByCompanyOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuConstraintResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuConstraintAdminControllerGetAllByCompany(page, limit, order, sortBy, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menu constraints by menu id
         * @summary Get all menu constraints by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuConstraintAdminControllerGetAllByMenuOrderEnum} [order] 
         * @param {MenuConstraintAdminControllerGetAllByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuConstraintAdminControllerGetAllByMenu(id: string, page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByMenuOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByMenuSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuConstraintWithoutMenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuConstraintAdminControllerGetAllByMenu(id, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a menu constraint by id
         * @summary Get a menu constraint by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuConstraintAdminControllerGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuConstraintResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuConstraintAdminControllerGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a menu constraint
         * @summary Update a menu constraint
         * @param {string} id 
         * @param {UpdateMenuConstraintDto} updateMenuConstraintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuConstraintAdminControllerUpdate(id: string, updateMenuConstraintDto: UpdateMenuConstraintDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuConstraintResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuConstraintAdminControllerUpdate(id, updateMenuConstraintDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuConstraintInternalApi - factory interface
 * @export
 */
export const MenuConstraintInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuConstraintInternalApiFp(configuration)
    return {
        /**
         * Create a menu constraint for the company
         * @summary Create a menu constraint for the company
         * @param {MenuConstraintDto} menuConstraintDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerCreateBySuperAdmin(menuConstraintDto: MenuConstraintDto, id?: string, options?: any): AxiosPromise<GenericMenuConstraintResponse> {
            return localVarFp.menuConstraintAdminControllerCreateBySuperAdmin(menuConstraintDto, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a menu constraint
         * @summary Delete a menu constraint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerDelete(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.menuConstraintAdminControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menu constraints for the company
         * @summary Get all menu constraints for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuConstraintAdminControllerGetAllByCompanyOrderEnum} [order] 
         * @param {MenuConstraintAdminControllerGetAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerGetAllByCompany(page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByCompanyOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByCompanySortByEnum, id?: string, options?: any): AxiosPromise<ListMenuConstraintResponse> {
            return localVarFp.menuConstraintAdminControllerGetAllByCompany(page, limit, order, sortBy, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menu constraints by menu id
         * @summary Get all menu constraints by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuConstraintAdminControllerGetAllByMenuOrderEnum} [order] 
         * @param {MenuConstraintAdminControllerGetAllByMenuSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerGetAllByMenu(id: string, page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByMenuOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByMenuSortByEnum, options?: any): AxiosPromise<ListMenuConstraintWithoutMenuResponse> {
            return localVarFp.menuConstraintAdminControllerGetAllByMenu(id, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a menu constraint by id
         * @summary Get a menu constraint by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerGetById(id: string, options?: any): AxiosPromise<GenericMenuConstraintResponse> {
            return localVarFp.menuConstraintAdminControllerGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a menu constraint
         * @summary Update a menu constraint
         * @param {string} id 
         * @param {UpdateMenuConstraintDto} updateMenuConstraintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuConstraintAdminControllerUpdate(id: string, updateMenuConstraintDto: UpdateMenuConstraintDto, options?: any): AxiosPromise<GenericMenuConstraintResponse> {
            return localVarFp.menuConstraintAdminControllerUpdate(id, updateMenuConstraintDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuConstraintInternalApi - object-oriented interface
 * @export
 * @class MenuConstraintInternalApi
 * @extends {BaseAPI}
 */
export class MenuConstraintInternalApi extends BaseAPI {
    /**
     * Create a menu constraint for the company
     * @summary Create a menu constraint for the company
     * @param {MenuConstraintDto} menuConstraintDto 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuConstraintInternalApi
     */
    public menuConstraintAdminControllerCreateBySuperAdmin(menuConstraintDto: MenuConstraintDto, id?: string, options?: AxiosRequestConfig) {
        return MenuConstraintInternalApiFp(this.configuration).menuConstraintAdminControllerCreateBySuperAdmin(menuConstraintDto, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a menu constraint
     * @summary Delete a menu constraint
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuConstraintInternalApi
     */
    public menuConstraintAdminControllerDelete(id: string, options?: AxiosRequestConfig) {
        return MenuConstraintInternalApiFp(this.configuration).menuConstraintAdminControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menu constraints for the company
     * @summary Get all menu constraints for the company
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuConstraintAdminControllerGetAllByCompanyOrderEnum} [order] 
     * @param {MenuConstraintAdminControllerGetAllByCompanySortByEnum} [sortBy] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuConstraintInternalApi
     */
    public menuConstraintAdminControllerGetAllByCompany(page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByCompanyOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig) {
        return MenuConstraintInternalApiFp(this.configuration).menuConstraintAdminControllerGetAllByCompany(page, limit, order, sortBy, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menu constraints by menu id
     * @summary Get all menu constraints by menu id
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuConstraintAdminControllerGetAllByMenuOrderEnum} [order] 
     * @param {MenuConstraintAdminControllerGetAllByMenuSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuConstraintInternalApi
     */
    public menuConstraintAdminControllerGetAllByMenu(id: string, page?: number, limit?: number, order?: MenuConstraintAdminControllerGetAllByMenuOrderEnum, sortBy?: MenuConstraintAdminControllerGetAllByMenuSortByEnum, options?: AxiosRequestConfig) {
        return MenuConstraintInternalApiFp(this.configuration).menuConstraintAdminControllerGetAllByMenu(id, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a menu constraint by id
     * @summary Get a menu constraint by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuConstraintInternalApi
     */
    public menuConstraintAdminControllerGetById(id: string, options?: AxiosRequestConfig) {
        return MenuConstraintInternalApiFp(this.configuration).menuConstraintAdminControllerGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a menu constraint
     * @summary Update a menu constraint
     * @param {string} id 
     * @param {UpdateMenuConstraintDto} updateMenuConstraintDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuConstraintInternalApi
     */
    public menuConstraintAdminControllerUpdate(id: string, updateMenuConstraintDto: UpdateMenuConstraintDto, options?: AxiosRequestConfig) {
        return MenuConstraintInternalApiFp(this.configuration).menuConstraintAdminControllerUpdate(id, updateMenuConstraintDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MenuConstraintAdminControllerGetAllByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuConstraintAdminControllerGetAllByCompanyOrderEnum = typeof MenuConstraintAdminControllerGetAllByCompanyOrderEnum[keyof typeof MenuConstraintAdminControllerGetAllByCompanyOrderEnum];
/**
 * @export
 */
export const MenuConstraintAdminControllerGetAllByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    OrderDate: 'orderDate',
    OrderDay: 'orderDay'
} as const;
export type MenuConstraintAdminControllerGetAllByCompanySortByEnum = typeof MenuConstraintAdminControllerGetAllByCompanySortByEnum[keyof typeof MenuConstraintAdminControllerGetAllByCompanySortByEnum];
/**
 * @export
 */
export const MenuConstraintAdminControllerGetAllByMenuOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuConstraintAdminControllerGetAllByMenuOrderEnum = typeof MenuConstraintAdminControllerGetAllByMenuOrderEnum[keyof typeof MenuConstraintAdminControllerGetAllByMenuOrderEnum];
/**
 * @export
 */
export const MenuConstraintAdminControllerGetAllByMenuSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    OrderDate: 'orderDate',
    OrderDay: 'orderDay'
} as const;
export type MenuConstraintAdminControllerGetAllByMenuSortByEnum = typeof MenuConstraintAdminControllerGetAllByMenuSortByEnum[keyof typeof MenuConstraintAdminControllerGetAllByMenuSortByEnum];


/**
 * MenuExternalApi - axios parameter creator
 * @export
 */
export const MenuExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all menus
         * @summary Get all menus
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuControllerFindAllOrderEnum} [order] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {MenuControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindAll: async (page?: number, limit?: number, search?: string, order?: MenuControllerFindAllOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['typeId'] = typeId;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a menu by id
         * @summary Get a menu by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/external/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menu meals by menu id
         * @summary Get menu meals by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuControllerGetMenuMealsOrderEnum} [order] 
         * @param {MenuControllerGetMenuMealsSortByEnum} [sortBy] 
         * @param {string} [mealId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerGetMenuMeals: async (id: string, page?: number, limit?: number, order?: MenuControllerGetMenuMealsOrderEnum, sortBy?: MenuControllerGetMenuMealsSortByEnum, mealId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuControllerGetMenuMeals', 'id', id)
            const localVarPath = `/api/v1/external/menu/{id}/meals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (mealId !== undefined) {
                localVarQueryParameter['mealId'] = mealId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menus by company id
         * @summary Get all menus by company id
         * @param {string} companyId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuControllerGetMenusByCompanyOrderEnum} [order] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {MenuControllerGetMenusByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerGetMenusByCompany: async (companyId: string, page?: number, limit?: number, search?: string, order?: MenuControllerGetMenusByCompanyOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerGetMenusByCompanySortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('menuControllerGetMenusByCompany', 'companyId', companyId)
            const localVarPath = `/api/v1/external/menu/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['typeId'] = typeId;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuExternalApi - functional programming interface
 * @export
 */
export const MenuExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all menus
         * @summary Get all menus
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuControllerFindAllOrderEnum} [order] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {MenuControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuControllerFindAllOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerFindAll(page, limit, search, order, typeId, cityId, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a menu by id
         * @summary Get a menu by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get menu meals by menu id
         * @summary Get menu meals by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuControllerGetMenuMealsOrderEnum} [order] 
         * @param {MenuControllerGetMenuMealsSortByEnum} [sortBy] 
         * @param {string} [mealId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerGetMenuMeals(id: string, page?: number, limit?: number, order?: MenuControllerGetMenuMealsOrderEnum, sortBy?: MenuControllerGetMenuMealsSortByEnum, mealId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuMealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerGetMenuMeals(id, page, limit, order, sortBy, mealId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menus by company id
         * @summary Get all menus by company id
         * @param {string} companyId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuControllerGetMenusByCompanyOrderEnum} [order] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {MenuControllerGetMenusByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerGetMenusByCompany(companyId: string, page?: number, limit?: number, search?: string, order?: MenuControllerGetMenusByCompanyOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerGetMenusByCompanySortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuWithoutCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerGetMenusByCompany(companyId, page, limit, search, order, typeId, cityId, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuExternalApi - factory interface
 * @export
 */
export const MenuExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuExternalApiFp(configuration)
    return {
        /**
         * Get all menus
         * @summary Get all menus
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuControllerFindAllOrderEnum} [order] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {MenuControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuControllerFindAllOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerFindAllSortByEnum, options?: any): AxiosPromise<ListMenuResponse> {
            return localVarFp.menuControllerFindAll(page, limit, search, order, typeId, cityId, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a menu by id
         * @summary Get a menu by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindOne(id: string, options?: any): AxiosPromise<GenericMenuResponse> {
            return localVarFp.menuControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get menu meals by menu id
         * @summary Get menu meals by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuControllerGetMenuMealsOrderEnum} [order] 
         * @param {MenuControllerGetMenuMealsSortByEnum} [sortBy] 
         * @param {string} [mealId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerGetMenuMeals(id: string, page?: number, limit?: number, order?: MenuControllerGetMenuMealsOrderEnum, sortBy?: MenuControllerGetMenuMealsSortByEnum, mealId?: string, options?: any): AxiosPromise<ListMenuMealResponse> {
            return localVarFp.menuControllerGetMenuMeals(id, page, limit, order, sortBy, mealId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menus by company id
         * @summary Get all menus by company id
         * @param {string} companyId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuControllerGetMenusByCompanyOrderEnum} [order] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {MenuControllerGetMenusByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerGetMenusByCompany(companyId: string, page?: number, limit?: number, search?: string, order?: MenuControllerGetMenusByCompanyOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerGetMenusByCompanySortByEnum, options?: any): AxiosPromise<ListMenuWithoutCompanyResponse> {
            return localVarFp.menuControllerGetMenusByCompany(companyId, page, limit, search, order, typeId, cityId, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuExternalApi - object-oriented interface
 * @export
 * @class MenuExternalApi
 * @extends {BaseAPI}
 */
export class MenuExternalApi extends BaseAPI {
    /**
     * Get all menus
     * @summary Get all menus
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MenuControllerFindAllOrderEnum} [order] 
     * @param {string} [typeId] 
     * @param {number} [cityId] 
     * @param {MenuControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuExternalApi
     */
    public menuControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuControllerFindAllOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return MenuExternalApiFp(this.configuration).menuControllerFindAll(page, limit, search, order, typeId, cityId, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a menu by id
     * @summary Get a menu by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuExternalApi
     */
    public menuControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MenuExternalApiFp(this.configuration).menuControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get menu meals by menu id
     * @summary Get menu meals by menu id
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuControllerGetMenuMealsOrderEnum} [order] 
     * @param {MenuControllerGetMenuMealsSortByEnum} [sortBy] 
     * @param {string} [mealId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuExternalApi
     */
    public menuControllerGetMenuMeals(id: string, page?: number, limit?: number, order?: MenuControllerGetMenuMealsOrderEnum, sortBy?: MenuControllerGetMenuMealsSortByEnum, mealId?: string, options?: AxiosRequestConfig) {
        return MenuExternalApiFp(this.configuration).menuControllerGetMenuMeals(id, page, limit, order, sortBy, mealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menus by company id
     * @summary Get all menus by company id
     * @param {string} companyId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MenuControllerGetMenusByCompanyOrderEnum} [order] 
     * @param {string} [typeId] 
     * @param {number} [cityId] 
     * @param {MenuControllerGetMenusByCompanySortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuExternalApi
     */
    public menuControllerGetMenusByCompany(companyId: string, page?: number, limit?: number, search?: string, order?: MenuControllerGetMenusByCompanyOrderEnum, typeId?: string, cityId?: number, sortBy?: MenuControllerGetMenusByCompanySortByEnum, options?: AxiosRequestConfig) {
        return MenuExternalApiFp(this.configuration).menuControllerGetMenusByCompany(companyId, page, limit, search, order, typeId, cityId, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MenuControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuControllerFindAllOrderEnum = typeof MenuControllerFindAllOrderEnum[keyof typeof MenuControllerFindAllOrderEnum];
/**
 * @export
 */
export const MenuControllerFindAllSortByEnum = {
    Name: 'name',
    Status: 'status',
    From: 'from',
    Until: 'until'
} as const;
export type MenuControllerFindAllSortByEnum = typeof MenuControllerFindAllSortByEnum[keyof typeof MenuControllerFindAllSortByEnum];
/**
 * @export
 */
export const MenuControllerGetMenuMealsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuControllerGetMenuMealsOrderEnum = typeof MenuControllerGetMenuMealsOrderEnum[keyof typeof MenuControllerGetMenuMealsOrderEnum];
/**
 * @export
 */
export const MenuControllerGetMenuMealsSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Date: 'date',
    DayOfWeek: 'dayOfWeek',
    DeliverOnDate: 'deliverOnDate',
    DeliverOnDay: 'deliverOnDay'
} as const;
export type MenuControllerGetMenuMealsSortByEnum = typeof MenuControllerGetMenuMealsSortByEnum[keyof typeof MenuControllerGetMenuMealsSortByEnum];
/**
 * @export
 */
export const MenuControllerGetMenusByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuControllerGetMenusByCompanyOrderEnum = typeof MenuControllerGetMenusByCompanyOrderEnum[keyof typeof MenuControllerGetMenusByCompanyOrderEnum];
/**
 * @export
 */
export const MenuControllerGetMenusByCompanySortByEnum = {
    Name: 'name',
    Status: 'status',
    From: 'from',
    Until: 'until'
} as const;
export type MenuControllerGetMenusByCompanySortByEnum = typeof MenuControllerGetMenusByCompanySortByEnum[keyof typeof MenuControllerGetMenusByCompanySortByEnum];


/**
 * MenuInternalApi - axios parameter creator
 * @export
 */
export const MenuInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a list of meals to a menu
         * @summary Assign meals to a menu
         * @param {string} id 
         * @param {AsssignMealsBody} asssignMealsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerAssignMealsToMenu: async (id: string, asssignMealsBody: AsssignMealsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuAdminControllerAssignMealsToMenu', 'id', id)
            // verify required parameter 'asssignMealsBody' is not null or undefined
            assertParamExists('menuAdminControllerAssignMealsToMenu', 'asssignMealsBody', asssignMealsBody)
            const localVarPath = `/api/v1/internal/menu/{id}/meals/assign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(asssignMealsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a menu for the company
         * @summary Create a menu for the company
         * @param {MenuDto} menuDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerCreateBySuperAdmin: async (menuDto: MenuDto, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuDto' is not null or undefined
            assertParamExists('menuAdminControllerCreateBySuperAdmin', 'menuDto', menuDto)
            const localVarPath = `/api/v1/internal/menu/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a menu by id
         * @summary Get a menu by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuAdminControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/internal/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menus for superadmin
         * @summary Get all menus for superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuAdminControllerGetAllMenusOrderEnum} [order] 
         * @param {MenuAdminControllerGetAllMenusSortByEnum} [sortBy] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerGetAllMenus: async (page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetAllMenusOrderEnum, sortBy?: MenuAdminControllerGetAllMenusSortByEnum, typeId?: string, cityId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['typeId'] = typeId;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menu meals by menu id
         * @summary Get menu meals by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuAdminControllerGetMenuMealsOrderEnum} [order] 
         * @param {MenuAdminControllerGetMenuMealsSortByEnum} [sortBy] 
         * @param {string} [mealId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerGetMenuMeals: async (id: string, page?: number, limit?: number, order?: MenuAdminControllerGetMenuMealsOrderEnum, sortBy?: MenuAdminControllerGetMenuMealsSortByEnum, mealId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuAdminControllerGetMenuMeals', 'id', id)
            const localVarPath = `/api/v1/internal/menu/{id}/meals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (mealId !== undefined) {
                localVarQueryParameter['mealId'] = mealId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menus for the company
         * @summary Get all menus for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuAdminControllerGetMenusByCompanyOrderEnum} [order] 
         * @param {MenuAdminControllerGetMenusByCompanySortByEnum} [sortBy] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerGetMenusByCompany: async (page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetMenusByCompanyOrderEnum, sortBy?: MenuAdminControllerGetMenusByCompanySortByEnum, typeId?: string, cityId?: number, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/menu/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['typeId'] = typeId;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a menu
         * @summary Delete a menu
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuAdminControllerRemove', 'id', id)
            const localVarPath = `/api/v1/internal/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassign a list of meal menu IDs from a menu
         * @summary Unassign menu meals from a menu
         * @param {string} id 
         * @param {UnassignMenuMealsBody} unassignMenuMealsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerUnassignMealsFromMenu: async (id: string, unassignMenuMealsBody: UnassignMenuMealsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuAdminControllerUnassignMealsFromMenu', 'id', id)
            // verify required parameter 'unassignMenuMealsBody' is not null or undefined
            assertParamExists('menuAdminControllerUnassignMealsFromMenu', 'unassignMenuMealsBody', unassignMenuMealsBody)
            const localVarPath = `/api/v1/internal/menu/{id}/meals/unassign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unassignMenuMealsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a menu
         * @summary Update a menu
         * @param {string} id 
         * @param {UpdateMenuDto} updateMenuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerUpdate: async (id: string, updateMenuDto: UpdateMenuDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuAdminControllerUpdate', 'id', id)
            // verify required parameter 'updateMenuDto' is not null or undefined
            assertParamExists('menuAdminControllerUpdate', 'updateMenuDto', updateMenuDto)
            const localVarPath = `/api/v1/internal/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMenuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuInternalApi - functional programming interface
 * @export
 */
export const MenuInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a list of meals to a menu
         * @summary Assign meals to a menu
         * @param {string} id 
         * @param {AsssignMealsBody} asssignMealsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerAssignMealsToMenu(id: string, asssignMealsBody: AsssignMealsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuMealArrayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerAssignMealsToMenu(id, asssignMealsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a menu for the company
         * @summary Create a menu for the company
         * @param {MenuDto} menuDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerCreateBySuperAdmin(menuDto: MenuDto, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuWithoutCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerCreateBySuperAdmin(menuDto, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a menu by id
         * @summary Get a menu by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menus for superadmin
         * @summary Get all menus for superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuAdminControllerGetAllMenusOrderEnum} [order] 
         * @param {MenuAdminControllerGetAllMenusSortByEnum} [sortBy] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerGetAllMenus(page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetAllMenusOrderEnum, sortBy?: MenuAdminControllerGetAllMenusSortByEnum, typeId?: string, cityId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerGetAllMenus(page, limit, search, order, sortBy, typeId, cityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get menu meals by menu id
         * @summary Get menu meals by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuAdminControllerGetMenuMealsOrderEnum} [order] 
         * @param {MenuAdminControllerGetMenuMealsSortByEnum} [sortBy] 
         * @param {string} [mealId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerGetMenuMeals(id: string, page?: number, limit?: number, order?: MenuAdminControllerGetMenuMealsOrderEnum, sortBy?: MenuAdminControllerGetMenuMealsSortByEnum, mealId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuMealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerGetMenuMeals(id, page, limit, order, sortBy, mealId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menus for the company
         * @summary Get all menus for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuAdminControllerGetMenusByCompanyOrderEnum} [order] 
         * @param {MenuAdminControllerGetMenusByCompanySortByEnum} [sortBy] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerGetMenusByCompany(page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetMenusByCompanyOrderEnum, sortBy?: MenuAdminControllerGetMenusByCompanySortByEnum, typeId?: string, cityId?: number, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuWithoutCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerGetMenusByCompany(page, limit, search, order, sortBy, typeId, cityId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a menu
         * @summary Delete a menu
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unassign a list of meal menu IDs from a menu
         * @summary Unassign menu meals from a menu
         * @param {string} id 
         * @param {UnassignMenuMealsBody} unassignMenuMealsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerUnassignMealsFromMenu(id: string, unassignMenuMealsBody: UnassignMenuMealsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffectedCountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerUnassignMealsFromMenu(id, unassignMenuMealsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a menu
         * @summary Update a menu
         * @param {string} id 
         * @param {UpdateMenuDto} updateMenuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuAdminControllerUpdate(id: string, updateMenuDto: UpdateMenuDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuAdminControllerUpdate(id, updateMenuDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuInternalApi - factory interface
 * @export
 */
export const MenuInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuInternalApiFp(configuration)
    return {
        /**
         * Assign a list of meals to a menu
         * @summary Assign meals to a menu
         * @param {string} id 
         * @param {AsssignMealsBody} asssignMealsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerAssignMealsToMenu(id: string, asssignMealsBody: AsssignMealsBody, options?: any): AxiosPromise<GenericMenuMealArrayResponse> {
            return localVarFp.menuAdminControllerAssignMealsToMenu(id, asssignMealsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a menu for the company
         * @summary Create a menu for the company
         * @param {MenuDto} menuDto 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerCreateBySuperAdmin(menuDto: MenuDto, id?: string, options?: any): AxiosPromise<GenericMenuWithoutCompanyAdminResponse> {
            return localVarFp.menuAdminControllerCreateBySuperAdmin(menuDto, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a menu by id
         * @summary Get a menu by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerFindOne(id: string, options?: any): AxiosPromise<GenericMenuAdminResponse> {
            return localVarFp.menuAdminControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menus for superadmin
         * @summary Get all menus for superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuAdminControllerGetAllMenusOrderEnum} [order] 
         * @param {MenuAdminControllerGetAllMenusSortByEnum} [sortBy] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerGetAllMenus(page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetAllMenusOrderEnum, sortBy?: MenuAdminControllerGetAllMenusSortByEnum, typeId?: string, cityId?: number, options?: any): AxiosPromise<ListMenuAdminResponse> {
            return localVarFp.menuAdminControllerGetAllMenus(page, limit, search, order, sortBy, typeId, cityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get menu meals by menu id
         * @summary Get menu meals by menu id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuAdminControllerGetMenuMealsOrderEnum} [order] 
         * @param {MenuAdminControllerGetMenuMealsSortByEnum} [sortBy] 
         * @param {string} [mealId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerGetMenuMeals(id: string, page?: number, limit?: number, order?: MenuAdminControllerGetMenuMealsOrderEnum, sortBy?: MenuAdminControllerGetMenuMealsSortByEnum, mealId?: string, options?: any): AxiosPromise<ListMenuMealResponse> {
            return localVarFp.menuAdminControllerGetMenuMeals(id, page, limit, order, sortBy, mealId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menus for the company
         * @summary Get all menus for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuAdminControllerGetMenusByCompanyOrderEnum} [order] 
         * @param {MenuAdminControllerGetMenusByCompanySortByEnum} [sortBy] 
         * @param {string} [typeId] 
         * @param {number} [cityId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerGetMenusByCompany(page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetMenusByCompanyOrderEnum, sortBy?: MenuAdminControllerGetMenusByCompanySortByEnum, typeId?: string, cityId?: number, id?: string, options?: any): AxiosPromise<ListMenuWithoutCompanyAdminResponse> {
            return localVarFp.menuAdminControllerGetMenusByCompany(page, limit, search, order, sortBy, typeId, cityId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a menu
         * @summary Delete a menu
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerRemove(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.menuAdminControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Unassign a list of meal menu IDs from a menu
         * @summary Unassign menu meals from a menu
         * @param {string} id 
         * @param {UnassignMenuMealsBody} unassignMenuMealsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerUnassignMealsFromMenu(id: string, unassignMenuMealsBody: UnassignMenuMealsBody, options?: any): AxiosPromise<AffectedCountResponse> {
            return localVarFp.menuAdminControllerUnassignMealsFromMenu(id, unassignMenuMealsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a menu
         * @summary Update a menu
         * @param {string} id 
         * @param {UpdateMenuDto} updateMenuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuAdminControllerUpdate(id: string, updateMenuDto: UpdateMenuDto, options?: any): AxiosPromise<GenericMenuAdminResponse> {
            return localVarFp.menuAdminControllerUpdate(id, updateMenuDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuInternalApi - object-oriented interface
 * @export
 * @class MenuInternalApi
 * @extends {BaseAPI}
 */
export class MenuInternalApi extends BaseAPI {
    /**
     * Assign a list of meals to a menu
     * @summary Assign meals to a menu
     * @param {string} id 
     * @param {AsssignMealsBody} asssignMealsBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerAssignMealsToMenu(id: string, asssignMealsBody: AsssignMealsBody, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerAssignMealsToMenu(id, asssignMealsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a menu for the company
     * @summary Create a menu for the company
     * @param {MenuDto} menuDto 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerCreateBySuperAdmin(menuDto: MenuDto, id?: string, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerCreateBySuperAdmin(menuDto, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a menu by id
     * @summary Get a menu by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menus for superadmin
     * @summary Get all menus for superadmin
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MenuAdminControllerGetAllMenusOrderEnum} [order] 
     * @param {MenuAdminControllerGetAllMenusSortByEnum} [sortBy] 
     * @param {string} [typeId] 
     * @param {number} [cityId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerGetAllMenus(page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetAllMenusOrderEnum, sortBy?: MenuAdminControllerGetAllMenusSortByEnum, typeId?: string, cityId?: number, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerGetAllMenus(page, limit, search, order, sortBy, typeId, cityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get menu meals by menu id
     * @summary Get menu meals by menu id
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuAdminControllerGetMenuMealsOrderEnum} [order] 
     * @param {MenuAdminControllerGetMenuMealsSortByEnum} [sortBy] 
     * @param {string} [mealId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerGetMenuMeals(id: string, page?: number, limit?: number, order?: MenuAdminControllerGetMenuMealsOrderEnum, sortBy?: MenuAdminControllerGetMenuMealsSortByEnum, mealId?: string, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerGetMenuMeals(id, page, limit, order, sortBy, mealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menus for the company
     * @summary Get all menus for the company
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MenuAdminControllerGetMenusByCompanyOrderEnum} [order] 
     * @param {MenuAdminControllerGetMenusByCompanySortByEnum} [sortBy] 
     * @param {string} [typeId] 
     * @param {number} [cityId] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerGetMenusByCompany(page?: number, limit?: number, search?: string, order?: MenuAdminControllerGetMenusByCompanyOrderEnum, sortBy?: MenuAdminControllerGetMenusByCompanySortByEnum, typeId?: string, cityId?: number, id?: string, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerGetMenusByCompany(page, limit, search, order, sortBy, typeId, cityId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a menu
     * @summary Delete a menu
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerRemove(id: string, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unassign a list of meal menu IDs from a menu
     * @summary Unassign menu meals from a menu
     * @param {string} id 
     * @param {UnassignMenuMealsBody} unassignMenuMealsBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerUnassignMealsFromMenu(id: string, unassignMenuMealsBody: UnassignMenuMealsBody, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerUnassignMealsFromMenu(id, unassignMenuMealsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a menu
     * @summary Update a menu
     * @param {string} id 
     * @param {UpdateMenuDto} updateMenuDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuInternalApi
     */
    public menuAdminControllerUpdate(id: string, updateMenuDto: UpdateMenuDto, options?: AxiosRequestConfig) {
        return MenuInternalApiFp(this.configuration).menuAdminControllerUpdate(id, updateMenuDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MenuAdminControllerGetAllMenusOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuAdminControllerGetAllMenusOrderEnum = typeof MenuAdminControllerGetAllMenusOrderEnum[keyof typeof MenuAdminControllerGetAllMenusOrderEnum];
/**
 * @export
 */
export const MenuAdminControllerGetAllMenusSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    Status: 'status',
    From: 'from',
    Until: 'until'
} as const;
export type MenuAdminControllerGetAllMenusSortByEnum = typeof MenuAdminControllerGetAllMenusSortByEnum[keyof typeof MenuAdminControllerGetAllMenusSortByEnum];
/**
 * @export
 */
export const MenuAdminControllerGetMenuMealsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuAdminControllerGetMenuMealsOrderEnum = typeof MenuAdminControllerGetMenuMealsOrderEnum[keyof typeof MenuAdminControllerGetMenuMealsOrderEnum];
/**
 * @export
 */
export const MenuAdminControllerGetMenuMealsSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Date: 'date',
    DayOfWeek: 'dayOfWeek',
    DeliverOnDate: 'deliverOnDate',
    DeliverOnDay: 'deliverOnDay'
} as const;
export type MenuAdminControllerGetMenuMealsSortByEnum = typeof MenuAdminControllerGetMenuMealsSortByEnum[keyof typeof MenuAdminControllerGetMenuMealsSortByEnum];
/**
 * @export
 */
export const MenuAdminControllerGetMenusByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuAdminControllerGetMenusByCompanyOrderEnum = typeof MenuAdminControllerGetMenusByCompanyOrderEnum[keyof typeof MenuAdminControllerGetMenusByCompanyOrderEnum];
/**
 * @export
 */
export const MenuAdminControllerGetMenusByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    Status: 'status',
    From: 'from',
    Until: 'until'
} as const;
export type MenuAdminControllerGetMenusByCompanySortByEnum = typeof MenuAdminControllerGetMenusByCompanySortByEnum[keyof typeof MenuAdminControllerGetMenusByCompanySortByEnum];


/**
 * MenuRatingExternalApi - axios parameter creator
 * @export
 */
export const MenuRatingExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a menu rating
         * @summary Create a menu rating
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerCreate: async (id: string, menuRatingDto: MenuRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingControllerCreate', 'id', id)
            // verify required parameter 'menuRatingDto' is not null or undefined
            assertParamExists('menuRatingControllerCreate', 'menuRatingDto', menuRatingDto)
            const localVarPath = `/api/v1/external/rating/menu/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all ratings of a menu
         * @summary Get all ratings of a menu
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerFindAll: async (menuId: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllOrderEnum, sortBy?: MenuRatingControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('menuRatingControllerFindAll', 'menuId', menuId)
            const localVarPath = `/api/v1/external/rating/menu/of/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menu ratings of a company
         * @summary Get all menu ratings of a company
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerFindAllByCompany: async (id: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingControllerFindAllByCompanySortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingControllerFindAllByCompany', 'id', id)
            const localVarPath = `/api/v1/external/rating/menu/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menu ratings of current user
         * @summary Get all menu ratings of current user
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllByCurrentUserOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerFindAllByCurrentUser: async (page?: number, limit?: number, order?: MenuRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MenuRatingControllerFindAllByCurrentUserSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/rating/menu/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a menu rating by id
         * @summary Get a menu rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerGetMenuRating: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingControllerGetMenuRating', 'id', id)
            const localVarPath = `/api/v1/external/rating/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a menu rating
         * @summary Update a menu rating
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerUpdate: async (id: string, menuRatingDto: MenuRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingControllerUpdate', 'id', id)
            // verify required parameter 'menuRatingDto' is not null or undefined
            assertParamExists('menuRatingControllerUpdate', 'menuRatingDto', menuRatingDto)
            const localVarPath = `/api/v1/external/rating/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuRatingExternalApi - functional programming interface
 * @export
 */
export const MenuRatingExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuRatingExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a menu rating
         * @summary Create a menu rating
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingControllerCreate(id: string, menuRatingDto: MenuRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuRatingWithoutUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingControllerCreate(id, menuRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all ratings of a menu
         * @summary Get all ratings of a menu
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingControllerFindAll(menuId: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllOrderEnum, sortBy?: MenuRatingControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuRatingWithoutMenuResponseExternal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingControllerFindAll(menuId, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menu ratings of a company
         * @summary Get all menu ratings of a company
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingControllerFindAllByCompany(id: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingControllerFindAllByCompanySortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuRatingWithoutCompanyResponseExternal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingControllerFindAllByCompany(id, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menu ratings of current user
         * @summary Get all menu ratings of current user
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllByCurrentUserOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingControllerFindAllByCurrentUser(page?: number, limit?: number, order?: MenuRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MenuRatingControllerFindAllByCurrentUserSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuRatingWithoutUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingControllerFindAllByCurrentUser(page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a menu rating by id
         * @summary Get a menu rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingControllerGetMenuRating(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuRatingResponseExternal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingControllerGetMenuRating(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a menu rating
         * @summary Update a menu rating
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingControllerUpdate(id: string, menuRatingDto: MenuRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuRatingWithoutUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingControllerUpdate(id, menuRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuRatingExternalApi - factory interface
 * @export
 */
export const MenuRatingExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuRatingExternalApiFp(configuration)
    return {
        /**
         * Create a menu rating
         * @summary Create a menu rating
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerCreate(id: string, menuRatingDto: MenuRatingDto, options?: any): AxiosPromise<GenericMenuRatingWithoutUserResponse> {
            return localVarFp.menuRatingControllerCreate(id, menuRatingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all ratings of a menu
         * @summary Get all ratings of a menu
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerFindAll(menuId: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllOrderEnum, sortBy?: MenuRatingControllerFindAllSortByEnum, options?: any): AxiosPromise<ListMenuRatingWithoutMenuResponseExternal> {
            return localVarFp.menuRatingControllerFindAll(menuId, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menu ratings of a company
         * @summary Get all menu ratings of a company
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerFindAllByCompany(id: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingControllerFindAllByCompanySortByEnum, options?: any): AxiosPromise<ListMenuRatingWithoutCompanyResponseExternal> {
            return localVarFp.menuRatingControllerFindAllByCompany(id, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menu ratings of current user
         * @summary Get all menu ratings of current user
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingControllerFindAllByCurrentUserOrderEnum} [order] 
         * @param {MenuRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerFindAllByCurrentUser(page?: number, limit?: number, order?: MenuRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MenuRatingControllerFindAllByCurrentUserSortByEnum, options?: any): AxiosPromise<ListMenuRatingWithoutUserResponse> {
            return localVarFp.menuRatingControllerFindAllByCurrentUser(page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a menu rating by id
         * @summary Get a menu rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerGetMenuRating(id: string, options?: any): AxiosPromise<GenericMenuRatingResponseExternal> {
            return localVarFp.menuRatingControllerGetMenuRating(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a menu rating
         * @summary Update a menu rating
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingControllerUpdate(id: string, menuRatingDto: MenuRatingDto, options?: any): AxiosPromise<GenericMenuRatingWithoutUserResponse> {
            return localVarFp.menuRatingControllerUpdate(id, menuRatingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuRatingExternalApi - object-oriented interface
 * @export
 * @class MenuRatingExternalApi
 * @extends {BaseAPI}
 */
export class MenuRatingExternalApi extends BaseAPI {
    /**
     * Create a menu rating
     * @summary Create a menu rating
     * @param {string} id 
     * @param {MenuRatingDto} menuRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingExternalApi
     */
    public menuRatingControllerCreate(id: string, menuRatingDto: MenuRatingDto, options?: AxiosRequestConfig) {
        return MenuRatingExternalApiFp(this.configuration).menuRatingControllerCreate(id, menuRatingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all ratings of a menu
     * @summary Get all ratings of a menu
     * @param {string} menuId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuRatingControllerFindAllOrderEnum} [order] 
     * @param {MenuRatingControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingExternalApi
     */
    public menuRatingControllerFindAll(menuId: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllOrderEnum, sortBy?: MenuRatingControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return MenuRatingExternalApiFp(this.configuration).menuRatingControllerFindAll(menuId, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menu ratings of a company
     * @summary Get all menu ratings of a company
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuRatingControllerFindAllByCompanyOrderEnum} [order] 
     * @param {MenuRatingControllerFindAllByCompanySortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingExternalApi
     */
    public menuRatingControllerFindAllByCompany(id: string, page?: number, limit?: number, order?: MenuRatingControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingControllerFindAllByCompanySortByEnum, options?: AxiosRequestConfig) {
        return MenuRatingExternalApiFp(this.configuration).menuRatingControllerFindAllByCompany(id, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menu ratings of current user
     * @summary Get all menu ratings of current user
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuRatingControllerFindAllByCurrentUserOrderEnum} [order] 
     * @param {MenuRatingControllerFindAllByCurrentUserSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingExternalApi
     */
    public menuRatingControllerFindAllByCurrentUser(page?: number, limit?: number, order?: MenuRatingControllerFindAllByCurrentUserOrderEnum, sortBy?: MenuRatingControllerFindAllByCurrentUserSortByEnum, options?: AxiosRequestConfig) {
        return MenuRatingExternalApiFp(this.configuration).menuRatingControllerFindAllByCurrentUser(page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a menu rating by id
     * @summary Get a menu rating by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingExternalApi
     */
    public menuRatingControllerGetMenuRating(id: string, options?: AxiosRequestConfig) {
        return MenuRatingExternalApiFp(this.configuration).menuRatingControllerGetMenuRating(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a menu rating
     * @summary Update a menu rating
     * @param {string} id 
     * @param {MenuRatingDto} menuRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingExternalApi
     */
    public menuRatingControllerUpdate(id: string, menuRatingDto: MenuRatingDto, options?: AxiosRequestConfig) {
        return MenuRatingExternalApiFp(this.configuration).menuRatingControllerUpdate(id, menuRatingDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MenuRatingControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuRatingControllerFindAllOrderEnum = typeof MenuRatingControllerFindAllOrderEnum[keyof typeof MenuRatingControllerFindAllOrderEnum];
/**
 * @export
 */
export const MenuRatingControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MenuRatingControllerFindAllSortByEnum = typeof MenuRatingControllerFindAllSortByEnum[keyof typeof MenuRatingControllerFindAllSortByEnum];
/**
 * @export
 */
export const MenuRatingControllerFindAllByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuRatingControllerFindAllByCompanyOrderEnum = typeof MenuRatingControllerFindAllByCompanyOrderEnum[keyof typeof MenuRatingControllerFindAllByCompanyOrderEnum];
/**
 * @export
 */
export const MenuRatingControllerFindAllByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MenuRatingControllerFindAllByCompanySortByEnum = typeof MenuRatingControllerFindAllByCompanySortByEnum[keyof typeof MenuRatingControllerFindAllByCompanySortByEnum];
/**
 * @export
 */
export const MenuRatingControllerFindAllByCurrentUserOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuRatingControllerFindAllByCurrentUserOrderEnum = typeof MenuRatingControllerFindAllByCurrentUserOrderEnum[keyof typeof MenuRatingControllerFindAllByCurrentUserOrderEnum];
/**
 * @export
 */
export const MenuRatingControllerFindAllByCurrentUserSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate',
    Company: 'company'
} as const;
export type MenuRatingControllerFindAllByCurrentUserSortByEnum = typeof MenuRatingControllerFindAllByCurrentUserSortByEnum[keyof typeof MenuRatingControllerFindAllByCurrentUserSortByEnum];


/**
 * MenuRatingInternalApi - axios parameter creator
 * @export
 */
export const MenuRatingInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all ratings of a menu
         * @summary Get all ratings of a menu
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindAll: async (menuId: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllOrderEnum, sortBy?: MenuRatingAdminControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('menuRatingAdminControllerFindAll', 'menuId', menuId)
            const localVarPath = `/api/v1/internal/rating/menu/of/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menu ratings of the company
         * @summary Get all menu ratings of the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindAllByCompany: async (page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/rating/menu/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menu ratings of a user by superadmin
         * @summary Get all menu ratings of a user by superadmin
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllByUserOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindAllByUser: async (id: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByUserSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingAdminControllerFindAllByUser', 'id', id)
            const localVarPath = `/api/v1/internal/rating/menu/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a menu rating by id
         * @summary Get a menu rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingAdminControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/internal/rating/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a menu rating by superadmin
         * @summary Delete a menu rating by superadmin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingAdminControllerRemove', 'id', id)
            const localVarPath = `/api/v1/internal/rating/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a menu rating by superadmin
         * @summary Update a menu rating by superadmin
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerUpdate: async (id: string, menuRatingDto: MenuRatingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuRatingAdminControllerUpdate', 'id', id)
            // verify required parameter 'menuRatingDto' is not null or undefined
            assertParamExists('menuRatingAdminControllerUpdate', 'menuRatingDto', menuRatingDto)
            const localVarPath = `/api/v1/internal/rating/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuRatingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuRatingInternalApi - functional programming interface
 * @export
 */
export const MenuRatingInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuRatingInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all ratings of a menu
         * @summary Get all ratings of a menu
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingAdminControllerFindAll(menuId: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllOrderEnum, sortBy?: MenuRatingAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuRatingWithoutMenuAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingAdminControllerFindAll(menuId, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menu ratings of the company
         * @summary Get all menu ratings of the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingAdminControllerFindAllByCompany(page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuRatingWithoutCompanyAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingAdminControllerFindAllByCompany(page, limit, order, sortBy, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menu ratings of a user by superadmin
         * @summary Get all menu ratings of a user by superadmin
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllByUserOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingAdminControllerFindAllByUser(id: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByUserSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuRatingWithoutUserAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingAdminControllerFindAllByUser(id, page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a menu rating by id
         * @summary Get a menu rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingAdminControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuRatingAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingAdminControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a menu rating by superadmin
         * @summary Delete a menu rating by superadmin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingAdminControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingAdminControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a menu rating by superadmin
         * @summary Update a menu rating by superadmin
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuRatingAdminControllerUpdate(id: string, menuRatingDto: MenuRatingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuRatingAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuRatingAdminControllerUpdate(id, menuRatingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuRatingInternalApi - factory interface
 * @export
 */
export const MenuRatingInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuRatingInternalApiFp(configuration)
    return {
        /**
         * Get all ratings of a menu
         * @summary Get all ratings of a menu
         * @param {string} menuId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindAll(menuId: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllOrderEnum, sortBy?: MenuRatingAdminControllerFindAllSortByEnum, options?: any): AxiosPromise<ListMenuRatingWithoutMenuAdminResponse> {
            return localVarFp.menuRatingAdminControllerFindAll(menuId, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menu ratings of the company
         * @summary Get all menu ratings of the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindAllByCompany(page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options?: any): AxiosPromise<ListMenuRatingWithoutCompanyAdminResponse> {
            return localVarFp.menuRatingAdminControllerFindAllByCompany(page, limit, order, sortBy, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menu ratings of a user by superadmin
         * @summary Get all menu ratings of a user by superadmin
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {MenuRatingAdminControllerFindAllByUserOrderEnum} [order] 
         * @param {MenuRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindAllByUser(id: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByUserSortByEnum, options?: any): AxiosPromise<ListMenuRatingWithoutUserAdminResponse> {
            return localVarFp.menuRatingAdminControllerFindAllByUser(id, page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a menu rating by id
         * @summary Get a menu rating by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerFindOne(id: string, options?: any): AxiosPromise<GenericMenuRatingAdminResponse> {
            return localVarFp.menuRatingAdminControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a menu rating by superadmin
         * @summary Delete a menu rating by superadmin
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerRemove(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.menuRatingAdminControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a menu rating by superadmin
         * @summary Update a menu rating by superadmin
         * @param {string} id 
         * @param {MenuRatingDto} menuRatingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuRatingAdminControllerUpdate(id: string, menuRatingDto: MenuRatingDto, options?: any): AxiosPromise<GenericMenuRatingAdminResponse> {
            return localVarFp.menuRatingAdminControllerUpdate(id, menuRatingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuRatingInternalApi - object-oriented interface
 * @export
 * @class MenuRatingInternalApi
 * @extends {BaseAPI}
 */
export class MenuRatingInternalApi extends BaseAPI {
    /**
     * Get all ratings of a menu
     * @summary Get all ratings of a menu
     * @param {string} menuId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuRatingAdminControllerFindAllOrderEnum} [order] 
     * @param {MenuRatingAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingInternalApi
     */
    public menuRatingAdminControllerFindAll(menuId: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllOrderEnum, sortBy?: MenuRatingAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return MenuRatingInternalApiFp(this.configuration).menuRatingAdminControllerFindAll(menuId, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menu ratings of the company
     * @summary Get all menu ratings of the company
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuRatingAdminControllerFindAllByCompanyOrderEnum} [order] 
     * @param {MenuRatingAdminControllerFindAllByCompanySortByEnum} [sortBy] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingInternalApi
     */
    public menuRatingAdminControllerFindAllByCompany(page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByCompanyOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig) {
        return MenuRatingInternalApiFp(this.configuration).menuRatingAdminControllerFindAllByCompany(page, limit, order, sortBy, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menu ratings of a user by superadmin
     * @summary Get all menu ratings of a user by superadmin
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {MenuRatingAdminControllerFindAllByUserOrderEnum} [order] 
     * @param {MenuRatingAdminControllerFindAllByUserSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingInternalApi
     */
    public menuRatingAdminControllerFindAllByUser(id: string, page?: number, limit?: number, order?: MenuRatingAdminControllerFindAllByUserOrderEnum, sortBy?: MenuRatingAdminControllerFindAllByUserSortByEnum, options?: AxiosRequestConfig) {
        return MenuRatingInternalApiFp(this.configuration).menuRatingAdminControllerFindAllByUser(id, page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a menu rating by id
     * @summary Get a menu rating by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingInternalApi
     */
    public menuRatingAdminControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MenuRatingInternalApiFp(this.configuration).menuRatingAdminControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a menu rating by superadmin
     * @summary Delete a menu rating by superadmin
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingInternalApi
     */
    public menuRatingAdminControllerRemove(id: string, options?: AxiosRequestConfig) {
        return MenuRatingInternalApiFp(this.configuration).menuRatingAdminControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a menu rating by superadmin
     * @summary Update a menu rating by superadmin
     * @param {string} id 
     * @param {MenuRatingDto} menuRatingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuRatingInternalApi
     */
    public menuRatingAdminControllerUpdate(id: string, menuRatingDto: MenuRatingDto, options?: AxiosRequestConfig) {
        return MenuRatingInternalApiFp(this.configuration).menuRatingAdminControllerUpdate(id, menuRatingDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MenuRatingAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuRatingAdminControllerFindAllOrderEnum = typeof MenuRatingAdminControllerFindAllOrderEnum[keyof typeof MenuRatingAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const MenuRatingAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MenuRatingAdminControllerFindAllSortByEnum = typeof MenuRatingAdminControllerFindAllSortByEnum[keyof typeof MenuRatingAdminControllerFindAllSortByEnum];
/**
 * @export
 */
export const MenuRatingAdminControllerFindAllByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuRatingAdminControllerFindAllByCompanyOrderEnum = typeof MenuRatingAdminControllerFindAllByCompanyOrderEnum[keyof typeof MenuRatingAdminControllerFindAllByCompanyOrderEnum];
/**
 * @export
 */
export const MenuRatingAdminControllerFindAllByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate'
} as const;
export type MenuRatingAdminControllerFindAllByCompanySortByEnum = typeof MenuRatingAdminControllerFindAllByCompanySortByEnum[keyof typeof MenuRatingAdminControllerFindAllByCompanySortByEnum];
/**
 * @export
 */
export const MenuRatingAdminControllerFindAllByUserOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuRatingAdminControllerFindAllByUserOrderEnum = typeof MenuRatingAdminControllerFindAllByUserOrderEnum[keyof typeof MenuRatingAdminControllerFindAllByUserOrderEnum];
/**
 * @export
 */
export const MenuRatingAdminControllerFindAllByUserSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Rate: 'rate',
    Company: 'company'
} as const;
export type MenuRatingAdminControllerFindAllByUserSortByEnum = typeof MenuRatingAdminControllerFindAllByUserSortByEnum[keyof typeof MenuRatingAdminControllerFindAllByUserSortByEnum];


/**
 * MenuTypeExternalApi - axios parameter creator
 * @export
 */
export const MenuTypeExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all menu types
         * @summary Get all menu types
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuTypeControllerFindAllOrderEnum} [order] 
         * @param {MenuTypeControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeControllerFindAll: async (page?: number, limit?: number, search?: string, order?: MenuTypeControllerFindAllOrderEnum, sortBy?: MenuTypeControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/menu-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a menu type by id
         * @summary Get a menu type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuTypeControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/external/menu-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuTypeExternalApi - functional programming interface
 * @export
 */
export const MenuTypeExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuTypeExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all menu types
         * @summary Get all menu types
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuTypeControllerFindAllOrderEnum} [order] 
         * @param {MenuTypeControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuTypeControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuTypeControllerFindAllOrderEnum, sortBy?: MenuTypeControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuTypeWithoutMenusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuTypeControllerFindAll(page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a menu type by id
         * @summary Get a menu type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuTypeControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuTypeWithoutMenusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuTypeControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuTypeExternalApi - factory interface
 * @export
 */
export const MenuTypeExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuTypeExternalApiFp(configuration)
    return {
        /**
         * Get all menu types
         * @summary Get all menu types
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuTypeControllerFindAllOrderEnum} [order] 
         * @param {MenuTypeControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuTypeControllerFindAllOrderEnum, sortBy?: MenuTypeControllerFindAllSortByEnum, options?: any): AxiosPromise<ListMenuTypeWithoutMenusResponse> {
            return localVarFp.menuTypeControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a menu type by id
         * @summary Get a menu type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeControllerFindOne(id: string, options?: any): AxiosPromise<GenericMenuTypeWithoutMenusResponse> {
            return localVarFp.menuTypeControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuTypeExternalApi - object-oriented interface
 * @export
 * @class MenuTypeExternalApi
 * @extends {BaseAPI}
 */
export class MenuTypeExternalApi extends BaseAPI {
    /**
     * Get all menu types
     * @summary Get all menu types
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MenuTypeControllerFindAllOrderEnum} [order] 
     * @param {MenuTypeControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuTypeExternalApi
     */
    public menuTypeControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuTypeControllerFindAllOrderEnum, sortBy?: MenuTypeControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return MenuTypeExternalApiFp(this.configuration).menuTypeControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a menu type by id
     * @summary Get a menu type by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuTypeExternalApi
     */
    public menuTypeControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MenuTypeExternalApiFp(this.configuration).menuTypeControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MenuTypeControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuTypeControllerFindAllOrderEnum = typeof MenuTypeControllerFindAllOrderEnum[keyof typeof MenuTypeControllerFindAllOrderEnum];
/**
 * @export
 */
export const MenuTypeControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name'
} as const;
export type MenuTypeControllerFindAllSortByEnum = typeof MenuTypeControllerFindAllSortByEnum[keyof typeof MenuTypeControllerFindAllSortByEnum];


/**
 * MenuTypeInternalApi - axios parameter creator
 * @export
 */
export const MenuTypeInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a menu type
         * @summary Create a menu type
         * @param {MenuTypeDto} menuTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerCreate: async (menuTypeDto: MenuTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuTypeDto' is not null or undefined
            assertParamExists('menuTypeAdminControllerCreate', 'menuTypeDto', menuTypeDto)
            const localVarPath = `/api/v1/internal/menu-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menu types
         * @summary Get all menu types
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuTypeAdminControllerFindAllOrderEnum} [order] 
         * @param {MenuTypeAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {boolean} [onlyRelatedToCompany] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerFindAll: async (page?: number, limit?: number, search?: string, order?: MenuTypeAdminControllerFindAllOrderEnum, sortBy?: MenuTypeAdminControllerFindAllSortByEnum, onlyRelatedToCompany?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/menu-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (onlyRelatedToCompany !== undefined) {
                localVarQueryParameter['onlyRelatedToCompany'] = onlyRelatedToCompany;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a menu type by id
         * @summary Get a menu type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuTypeAdminControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/internal/menu-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a menu type
         * @summary Delete a menu type
         * @param {string} id 
         * @param {string} newMenuTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerRemove: async (id: string, newMenuTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuTypeAdminControllerRemove', 'id', id)
            // verify required parameter 'newMenuTypeId' is not null or undefined
            assertParamExists('menuTypeAdminControllerRemove', 'newMenuTypeId', newMenuTypeId)
            const localVarPath = `/api/v1/internal/menu-type/{id}/andReplaceWith/{newMenuTypeId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"newMenuTypeId"}}`, encodeURIComponent(String(newMenuTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a menu type
         * @summary Update a menu type
         * @param {string} id 
         * @param {UpdateMenuTypeDto} updateMenuTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerUpdate: async (id: string, updateMenuTypeDto: UpdateMenuTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuTypeAdminControllerUpdate', 'id', id)
            // verify required parameter 'updateMenuTypeDto' is not null or undefined
            assertParamExists('menuTypeAdminControllerUpdate', 'updateMenuTypeDto', updateMenuTypeDto)
            const localVarPath = `/api/v1/internal/menu-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMenuTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuTypeInternalApi - functional programming interface
 * @export
 */
export const MenuTypeInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuTypeInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a menu type
         * @summary Create a menu type
         * @param {MenuTypeDto} menuTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuTypeAdminControllerCreate(menuTypeDto: MenuTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuTypeAdminControllerCreate(menuTypeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all menu types
         * @summary Get all menu types
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuTypeAdminControllerFindAllOrderEnum} [order] 
         * @param {MenuTypeAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {boolean} [onlyRelatedToCompany] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuTypeAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuTypeAdminControllerFindAllOrderEnum, sortBy?: MenuTypeAdminControllerFindAllSortByEnum, onlyRelatedToCompany?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMenuTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuTypeAdminControllerFindAll(page, limit, search, order, sortBy, onlyRelatedToCompany, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a menu type by id
         * @summary Get a menu type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuTypeAdminControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuTypeAdminControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a menu type
         * @summary Delete a menu type
         * @param {string} id 
         * @param {string} newMenuTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuTypeAdminControllerRemove(id: string, newMenuTypeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuTypeAdminControllerRemove(id, newMenuTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a menu type
         * @summary Update a menu type
         * @param {string} id 
         * @param {UpdateMenuTypeDto} updateMenuTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuTypeAdminControllerUpdate(id: string, updateMenuTypeDto: UpdateMenuTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMenuTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuTypeAdminControllerUpdate(id, updateMenuTypeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuTypeInternalApi - factory interface
 * @export
 */
export const MenuTypeInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuTypeInternalApiFp(configuration)
    return {
        /**
         * Create a menu type
         * @summary Create a menu type
         * @param {MenuTypeDto} menuTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerCreate(menuTypeDto: MenuTypeDto, options?: any): AxiosPromise<GenericMenuTypeResponse> {
            return localVarFp.menuTypeAdminControllerCreate(menuTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menu types
         * @summary Get all menu types
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {MenuTypeAdminControllerFindAllOrderEnum} [order] 
         * @param {MenuTypeAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {boolean} [onlyRelatedToCompany] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuTypeAdminControllerFindAllOrderEnum, sortBy?: MenuTypeAdminControllerFindAllSortByEnum, onlyRelatedToCompany?: boolean, options?: any): AxiosPromise<ListMenuTypeResponse> {
            return localVarFp.menuTypeAdminControllerFindAll(page, limit, search, order, sortBy, onlyRelatedToCompany, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a menu type by id
         * @summary Get a menu type by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerFindOne(id: string, options?: any): AxiosPromise<GenericMenuTypeResponse> {
            return localVarFp.menuTypeAdminControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a menu type
         * @summary Delete a menu type
         * @param {string} id 
         * @param {string} newMenuTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerRemove(id: string, newMenuTypeId: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.menuTypeAdminControllerRemove(id, newMenuTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a menu type
         * @summary Update a menu type
         * @param {string} id 
         * @param {UpdateMenuTypeDto} updateMenuTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuTypeAdminControllerUpdate(id: string, updateMenuTypeDto: UpdateMenuTypeDto, options?: any): AxiosPromise<GenericMenuTypeResponse> {
            return localVarFp.menuTypeAdminControllerUpdate(id, updateMenuTypeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuTypeInternalApi - object-oriented interface
 * @export
 * @class MenuTypeInternalApi
 * @extends {BaseAPI}
 */
export class MenuTypeInternalApi extends BaseAPI {
    /**
     * Create a menu type
     * @summary Create a menu type
     * @param {MenuTypeDto} menuTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuTypeInternalApi
     */
    public menuTypeAdminControllerCreate(menuTypeDto: MenuTypeDto, options?: AxiosRequestConfig) {
        return MenuTypeInternalApiFp(this.configuration).menuTypeAdminControllerCreate(menuTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all menu types
     * @summary Get all menu types
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {MenuTypeAdminControllerFindAllOrderEnum} [order] 
     * @param {MenuTypeAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {boolean} [onlyRelatedToCompany] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuTypeInternalApi
     */
    public menuTypeAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: MenuTypeAdminControllerFindAllOrderEnum, sortBy?: MenuTypeAdminControllerFindAllSortByEnum, onlyRelatedToCompany?: boolean, options?: AxiosRequestConfig) {
        return MenuTypeInternalApiFp(this.configuration).menuTypeAdminControllerFindAll(page, limit, search, order, sortBy, onlyRelatedToCompany, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a menu type by id
     * @summary Get a menu type by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuTypeInternalApi
     */
    public menuTypeAdminControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MenuTypeInternalApiFp(this.configuration).menuTypeAdminControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a menu type
     * @summary Delete a menu type
     * @param {string} id 
     * @param {string} newMenuTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuTypeInternalApi
     */
    public menuTypeAdminControllerRemove(id: string, newMenuTypeId: string, options?: AxiosRequestConfig) {
        return MenuTypeInternalApiFp(this.configuration).menuTypeAdminControllerRemove(id, newMenuTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a menu type
     * @summary Update a menu type
     * @param {string} id 
     * @param {UpdateMenuTypeDto} updateMenuTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuTypeInternalApi
     */
    public menuTypeAdminControllerUpdate(id: string, updateMenuTypeDto: UpdateMenuTypeDto, options?: AxiosRequestConfig) {
        return MenuTypeInternalApiFp(this.configuration).menuTypeAdminControllerUpdate(id, updateMenuTypeDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MenuTypeAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MenuTypeAdminControllerFindAllOrderEnum = typeof MenuTypeAdminControllerFindAllOrderEnum[keyof typeof MenuTypeAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const MenuTypeAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    MenuCount: 'menuCount'
} as const;
export type MenuTypeAdminControllerFindAllSortByEnum = typeof MenuTypeAdminControllerFindAllSortByEnum[keyof typeof MenuTypeAdminControllerFindAllSortByEnum];


/**
 * OrdersExternalApi - axios parameter creator
 * @export
 */
export const OrdersExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel an order
         * @summary Cancel an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCancel: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerCancel', 'id', id)
            const localVarPath = `/api/v1/external/orders/cancel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel order meals
         * @summary Cancel order meals
         * @param {string} id 
         * @param {CancelOrderDateMealBodyDto} cancelOrderDateMealBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCancelMeals: async (id: string, cancelOrderDateMealBodyDto: CancelOrderDateMealBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerCancelMeals', 'id', id)
            // verify required parameter 'cancelOrderDateMealBodyDto' is not null or undefined
            assertParamExists('ordersControllerCancelMeals', 'cancelOrderDateMealBodyDto', cancelOrderDateMealBodyDto)
            const localVarPath = `/api/v1/external/orders/cancel/{id}/meals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelOrderDateMealBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an order
         * @summary Create an order
         * @param {string} menuId 
         * @param {CreateOrderDto} createOrderDto 
         * @param {boolean} [force] Force creation of order even if there is an overlap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCreateOrder: async (menuId: string, createOrderDto: CreateOrderDto, force?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('ordersControllerCreateOrder', 'menuId', menuId)
            // verify required parameter 'createOrderDto' is not null or undefined
            assertParamExists('ordersControllerCreateOrder', 'createOrderDto', createOrderDto)
            const localVarPath = `/api/v1/external/orders/create/menu/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit an order
         * @summary Edit an order
         * @param {string} id 
         * @param {EditOrderDto} editOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerEditOrder: async (id: string, editOrderDto: EditOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerEditOrder', 'id', id)
            // verify required parameter 'editOrderDto' is not null or undefined
            assertParamExists('ordersControllerEditOrder', 'editOrderDto', editOrderDto)
            const localVarPath = `/api/v1/external/orders/edit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all orders
         * @summary Get all orders
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersControllerFindAllOrderEnum} [order] 
         * @param {OrdersControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindAll: async (page?: number, limit?: number, order?: OrdersControllerFindAllOrderEnum, sortBy?: OrdersControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get order dates by order id
         * @summary Get order dates by order id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersControllerFindDateMealsOrderEnum} [order] 
         * @param {OrdersControllerFindDateMealsSortByEnum} [sortBy] 
         * @param {string} [dateForDelivery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindDateMeals: async (id: string, page?: number, limit?: number, order?: OrdersControllerFindDateMealsOrderEnum, sortBy?: OrdersControllerFindDateMealsSortByEnum, dateForDelivery?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerFindDateMeals', 'id', id)
            const localVarPath = `/api/v1/external/orders/{id}/dates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (dateForDelivery !== undefined) {
                localVarQueryParameter['dateForDelivery'] = dateForDelivery;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an order by id
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/external/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersExternalApi - functional programming interface
 * @export
 */
export const OrdersExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel an order
         * @summary Cancel an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerCancel(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerCancel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel order meals
         * @summary Cancel order meals
         * @param {string} id 
         * @param {CancelOrderDateMealBodyDto} cancelOrderDateMealBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerCancelMeals(id: string, cancelOrderDateMealBodyDto: CancelOrderDateMealBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerCancelMeals(id, cancelOrderDateMealBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an order
         * @summary Create an order
         * @param {string} menuId 
         * @param {CreateOrderDto} createOrderDto 
         * @param {boolean} [force] Force creation of order even if there is an overlap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerCreateOrder(menuId: string, createOrderDto: CreateOrderDto, force?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerCreateOrder(menuId, createOrderDto, force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit an order
         * @summary Edit an order
         * @param {string} id 
         * @param {EditOrderDto} editOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerEditOrder(id: string, editOrderDto: EditOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerEditOrder(id, editOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all orders
         * @summary Get all orders
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersControllerFindAllOrderEnum} [order] 
         * @param {OrdersControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerFindAll(page?: number, limit?: number, order?: OrdersControllerFindAllOrderEnum, sortBy?: OrdersControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrderWithoutMealsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerFindAll(page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get order dates by order id
         * @summary Get order dates by order id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersControllerFindDateMealsOrderEnum} [order] 
         * @param {OrdersControllerFindDateMealsSortByEnum} [sortBy] 
         * @param {string} [dateForDelivery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerFindDateMeals(id: string, page?: number, limit?: number, order?: OrdersControllerFindDateMealsOrderEnum, sortBy?: OrdersControllerFindDateMealsSortByEnum, dateForDelivery?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrderDateWithoutOrderIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerFindDateMeals(id, page, limit, order, sortBy, dateForDelivery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an order by id
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersExternalApi - factory interface
 * @export
 */
export const OrdersExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersExternalApiFp(configuration)
    return {
        /**
         * Cancel an order
         * @summary Cancel an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCancel(id: string, options?: any): AxiosPromise<GenericOrderResponse> {
            return localVarFp.ordersControllerCancel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel order meals
         * @summary Cancel order meals
         * @param {string} id 
         * @param {CancelOrderDateMealBodyDto} cancelOrderDateMealBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCancelMeals(id: string, cancelOrderDateMealBodyDto: CancelOrderDateMealBodyDto, options?: any): AxiosPromise<GenericOrderResponse> {
            return localVarFp.ordersControllerCancelMeals(id, cancelOrderDateMealBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an order
         * @summary Create an order
         * @param {string} menuId 
         * @param {CreateOrderDto} createOrderDto 
         * @param {boolean} [force] Force creation of order even if there is an overlap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCreateOrder(menuId: string, createOrderDto: CreateOrderDto, force?: boolean, options?: any): AxiosPromise<GenericOrderResponse> {
            return localVarFp.ordersControllerCreateOrder(menuId, createOrderDto, force, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit an order
         * @summary Edit an order
         * @param {string} id 
         * @param {EditOrderDto} editOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerEditOrder(id: string, editOrderDto: EditOrderDto, options?: any): AxiosPromise<GenericOrderResponse> {
            return localVarFp.ordersControllerEditOrder(id, editOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all orders
         * @summary Get all orders
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersControllerFindAllOrderEnum} [order] 
         * @param {OrdersControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindAll(page?: number, limit?: number, order?: OrdersControllerFindAllOrderEnum, sortBy?: OrdersControllerFindAllSortByEnum, options?: any): AxiosPromise<ListOrderWithoutMealsResponse> {
            return localVarFp.ordersControllerFindAll(page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get order dates by order id
         * @summary Get order dates by order id
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersControllerFindDateMealsOrderEnum} [order] 
         * @param {OrdersControllerFindDateMealsSortByEnum} [sortBy] 
         * @param {string} [dateForDelivery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindDateMeals(id: string, page?: number, limit?: number, order?: OrdersControllerFindDateMealsOrderEnum, sortBy?: OrdersControllerFindDateMealsSortByEnum, dateForDelivery?: string, options?: any): AxiosPromise<ListOrderDateWithoutOrderIdResponse> {
            return localVarFp.ordersControllerFindDateMeals(id, page, limit, order, sortBy, dateForDelivery, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an order by id
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerFindOne(id: string, options?: any): AxiosPromise<GenericOrderResponse> {
            return localVarFp.ordersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersExternalApi - object-oriented interface
 * @export
 * @class OrdersExternalApi
 * @extends {BaseAPI}
 */
export class OrdersExternalApi extends BaseAPI {
    /**
     * Cancel an order
     * @summary Cancel an order
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersExternalApi
     */
    public ordersControllerCancel(id: string, options?: AxiosRequestConfig) {
        return OrdersExternalApiFp(this.configuration).ordersControllerCancel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel order meals
     * @summary Cancel order meals
     * @param {string} id 
     * @param {CancelOrderDateMealBodyDto} cancelOrderDateMealBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersExternalApi
     */
    public ordersControllerCancelMeals(id: string, cancelOrderDateMealBodyDto: CancelOrderDateMealBodyDto, options?: AxiosRequestConfig) {
        return OrdersExternalApiFp(this.configuration).ordersControllerCancelMeals(id, cancelOrderDateMealBodyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an order
     * @summary Create an order
     * @param {string} menuId 
     * @param {CreateOrderDto} createOrderDto 
     * @param {boolean} [force] Force creation of order even if there is an overlap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersExternalApi
     */
    public ordersControllerCreateOrder(menuId: string, createOrderDto: CreateOrderDto, force?: boolean, options?: AxiosRequestConfig) {
        return OrdersExternalApiFp(this.configuration).ordersControllerCreateOrder(menuId, createOrderDto, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit an order
     * @summary Edit an order
     * @param {string} id 
     * @param {EditOrderDto} editOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersExternalApi
     */
    public ordersControllerEditOrder(id: string, editOrderDto: EditOrderDto, options?: AxiosRequestConfig) {
        return OrdersExternalApiFp(this.configuration).ordersControllerEditOrder(id, editOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all orders
     * @summary Get all orders
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {OrdersControllerFindAllOrderEnum} [order] 
     * @param {OrdersControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersExternalApi
     */
    public ordersControllerFindAll(page?: number, limit?: number, order?: OrdersControllerFindAllOrderEnum, sortBy?: OrdersControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return OrdersExternalApiFp(this.configuration).ordersControllerFindAll(page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get order dates by order id
     * @summary Get order dates by order id
     * @param {string} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {OrdersControllerFindDateMealsOrderEnum} [order] 
     * @param {OrdersControllerFindDateMealsSortByEnum} [sortBy] 
     * @param {string} [dateForDelivery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersExternalApi
     */
    public ordersControllerFindDateMeals(id: string, page?: number, limit?: number, order?: OrdersControllerFindDateMealsOrderEnum, sortBy?: OrdersControllerFindDateMealsSortByEnum, dateForDelivery?: string, options?: AxiosRequestConfig) {
        return OrdersExternalApiFp(this.configuration).ordersControllerFindDateMeals(id, page, limit, order, sortBy, dateForDelivery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an order by id
     * @summary Get an order by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersExternalApi
     */
    public ordersControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return OrdersExternalApiFp(this.configuration).ordersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const OrdersControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OrdersControllerFindAllOrderEnum = typeof OrdersControllerFindAllOrderEnum[keyof typeof OrdersControllerFindAllOrderEnum];
/**
 * @export
 */
export const OrdersControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Company: 'company',
    FromDate: 'fromDate',
    ToDate: 'toDate',
    PaidAt: 'paidAt',
    CancelledAt: 'cancelledAt',
    RefundedAt: 'refundedAt'
} as const;
export type OrdersControllerFindAllSortByEnum = typeof OrdersControllerFindAllSortByEnum[keyof typeof OrdersControllerFindAllSortByEnum];
/**
 * @export
 */
export const OrdersControllerFindDateMealsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OrdersControllerFindDateMealsOrderEnum = typeof OrdersControllerFindDateMealsOrderEnum[keyof typeof OrdersControllerFindDateMealsOrderEnum];
/**
 * @export
 */
export const OrdersControllerFindDateMealsSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    DeliveryId: 'deliveryId',
    DateForDelivery: 'dateForDelivery',
    DeliveredAt: 'deliveredAt'
} as const;
export type OrdersControllerFindDateMealsSortByEnum = typeof OrdersControllerFindDateMealsSortByEnum[keyof typeof OrdersControllerFindDateMealsSortByEnum];


/**
 * OrdersInternalApi - axios parameter creator
 * @export
 */
export const OrdersInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all orders for the company
         * @summary Get all orders for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersAdminControllerFindAllOrderEnum} [order] 
         * @param {OrdersAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {string} [userId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerFindAll: async (page?: number, limit?: number, order?: OrdersAdminControllerFindAllOrderEnum, sortBy?: OrdersAdminControllerFindAllSortByEnum, userId?: string, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/orders/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get multiple orders by their IDs
         * @summary Get orders by IDs
         * @param {Array<string>} ids 
         * @param {OrdersAdminControllerFindManyByIdsOrderEnum} [order] 
         * @param {OrdersAdminControllerFindManyByIdsSortByEnum} [sortBy] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerFindManyByIds: async (ids: Array<string>, order?: OrdersAdminControllerFindManyByIdsOrderEnum, sortBy?: OrdersAdminControllerFindManyByIdsSortByEnum, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('ordersAdminControllerFindManyByIds', 'ids', ids)
            const localVarPath = `/api/v1/internal/orders/byIds/{ids}`
                .replace(`{${"ids"}}`, encodeURIComponent(String(ids)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an order by id
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersAdminControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/internal/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an order
         * @summary Delete an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersAdminControllerRemove', 'id', id)
            const localVarPath = `/api/v1/internal/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an order
         * @summary Update an order
         * @param {string} id 
         * @param {EditOrderDto} editOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerUpdate: async (id: string, editOrderDto: EditOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersAdminControllerUpdate', 'id', id)
            // verify required parameter 'editOrderDto' is not null or undefined
            assertParamExists('ordersAdminControllerUpdate', 'editOrderDto', editOrderDto)
            const localVarPath = `/api/v1/internal/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersInternalApi - functional programming interface
 * @export
 */
export const OrdersInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all orders for the company
         * @summary Get all orders for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersAdminControllerFindAllOrderEnum} [order] 
         * @param {OrdersAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {string} [userId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersAdminControllerFindAll(page?: number, limit?: number, order?: OrdersAdminControllerFindAllOrderEnum, sortBy?: OrdersAdminControllerFindAllSortByEnum, userId?: string, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrderAdminWithoutCompanyAndMealsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAdminControllerFindAll(page, limit, order, sortBy, userId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get multiple orders by their IDs
         * @summary Get orders by IDs
         * @param {Array<string>} ids 
         * @param {OrdersAdminControllerFindManyByIdsOrderEnum} [order] 
         * @param {OrdersAdminControllerFindManyByIdsSortByEnum} [sortBy] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersAdminControllerFindManyByIds(ids: Array<string>, order?: OrdersAdminControllerFindManyByIdsOrderEnum, sortBy?: OrdersAdminControllerFindManyByIdsSortByEnum, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrdersAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAdminControllerFindManyByIds(ids, order, sortBy, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an order by id
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersAdminControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAdminControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an order
         * @summary Delete an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersAdminControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAdminControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an order
         * @summary Update an order
         * @param {string} id 
         * @param {EditOrderDto} editOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersAdminControllerUpdate(id: string, editOrderDto: EditOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAdminControllerUpdate(id, editOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersInternalApi - factory interface
 * @export
 */
export const OrdersInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersInternalApiFp(configuration)
    return {
        /**
         * Get all orders for the company
         * @summary Get all orders for the company
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {OrdersAdminControllerFindAllOrderEnum} [order] 
         * @param {OrdersAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {string} [userId] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerFindAll(page?: number, limit?: number, order?: OrdersAdminControllerFindAllOrderEnum, sortBy?: OrdersAdminControllerFindAllSortByEnum, userId?: string, id?: string, options?: any): AxiosPromise<ListOrderAdminWithoutCompanyAndMealsResponse> {
            return localVarFp.ordersAdminControllerFindAll(page, limit, order, sortBy, userId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get multiple orders by their IDs
         * @summary Get orders by IDs
         * @param {Array<string>} ids 
         * @param {OrdersAdminControllerFindManyByIdsOrderEnum} [order] 
         * @param {OrdersAdminControllerFindManyByIdsSortByEnum} [sortBy] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerFindManyByIds(ids: Array<string>, order?: OrdersAdminControllerFindManyByIdsOrderEnum, sortBy?: OrdersAdminControllerFindManyByIdsSortByEnum, userId?: string, options?: any): AxiosPromise<GenericOrdersAdminResponse> {
            return localVarFp.ordersAdminControllerFindManyByIds(ids, order, sortBy, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an order by id
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerFindOne(id: string, options?: any): AxiosPromise<GenericOrderAdminResponse> {
            return localVarFp.ordersAdminControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an order
         * @summary Delete an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerRemove(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.ordersAdminControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an order
         * @summary Update an order
         * @param {string} id 
         * @param {EditOrderDto} editOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAdminControllerUpdate(id: string, editOrderDto: EditOrderDto, options?: any): AxiosPromise<GenericOrderResponse> {
            return localVarFp.ordersAdminControllerUpdate(id, editOrderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersInternalApi - object-oriented interface
 * @export
 * @class OrdersInternalApi
 * @extends {BaseAPI}
 */
export class OrdersInternalApi extends BaseAPI {
    /**
     * Get all orders for the company
     * @summary Get all orders for the company
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {OrdersAdminControllerFindAllOrderEnum} [order] 
     * @param {OrdersAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {string} [userId] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersInternalApi
     */
    public ordersAdminControllerFindAll(page?: number, limit?: number, order?: OrdersAdminControllerFindAllOrderEnum, sortBy?: OrdersAdminControllerFindAllSortByEnum, userId?: string, id?: string, options?: AxiosRequestConfig) {
        return OrdersInternalApiFp(this.configuration).ordersAdminControllerFindAll(page, limit, order, sortBy, userId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get multiple orders by their IDs
     * @summary Get orders by IDs
     * @param {Array<string>} ids 
     * @param {OrdersAdminControllerFindManyByIdsOrderEnum} [order] 
     * @param {OrdersAdminControllerFindManyByIdsSortByEnum} [sortBy] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersInternalApi
     */
    public ordersAdminControllerFindManyByIds(ids: Array<string>, order?: OrdersAdminControllerFindManyByIdsOrderEnum, sortBy?: OrdersAdminControllerFindManyByIdsSortByEnum, userId?: string, options?: AxiosRequestConfig) {
        return OrdersInternalApiFp(this.configuration).ordersAdminControllerFindManyByIds(ids, order, sortBy, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an order by id
     * @summary Get an order by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersInternalApi
     */
    public ordersAdminControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return OrdersInternalApiFp(this.configuration).ordersAdminControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an order
     * @summary Delete an order
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersInternalApi
     */
    public ordersAdminControllerRemove(id: string, options?: AxiosRequestConfig) {
        return OrdersInternalApiFp(this.configuration).ordersAdminControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an order
     * @summary Update an order
     * @param {string} id 
     * @param {EditOrderDto} editOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersInternalApi
     */
    public ordersAdminControllerUpdate(id: string, editOrderDto: EditOrderDto, options?: AxiosRequestConfig) {
        return OrdersInternalApiFp(this.configuration).ordersAdminControllerUpdate(id, editOrderDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const OrdersAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OrdersAdminControllerFindAllOrderEnum = typeof OrdersAdminControllerFindAllOrderEnum[keyof typeof OrdersAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const OrdersAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    FromDate: 'fromDate',
    ToDate: 'toDate',
    PaidAt: 'paidAt',
    CancelledAt: 'cancelledAt',
    RefundedAt: 'refundedAt'
} as const;
export type OrdersAdminControllerFindAllSortByEnum = typeof OrdersAdminControllerFindAllSortByEnum[keyof typeof OrdersAdminControllerFindAllSortByEnum];
/**
 * @export
 */
export const OrdersAdminControllerFindManyByIdsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OrdersAdminControllerFindManyByIdsOrderEnum = typeof OrdersAdminControllerFindManyByIdsOrderEnum[keyof typeof OrdersAdminControllerFindManyByIdsOrderEnum];
/**
 * @export
 */
export const OrdersAdminControllerFindManyByIdsSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    FromDate: 'fromDate',
    ToDate: 'toDate',
    PaidAt: 'paidAt',
    CancelledAt: 'cancelledAt',
    RefundedAt: 'refundedAt'
} as const;
export type OrdersAdminControllerFindManyByIdsSortByEnum = typeof OrdersAdminControllerFindManyByIdsSortByEnum[keyof typeof OrdersAdminControllerFindManyByIdsSortByEnum];


/**
 * PhoneNumbersExternalApi - axios parameter creator
 * @export
 */
export const PhoneNumbersExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To register a phone number user needs to define country because of country code.
         * @summary Register a new phone number
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberControllerCreate: async (phoneNumberDto: PhoneNumberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberDto' is not null or undefined
            assertParamExists('phoneNumberControllerCreate', 'phoneNumberDto', phoneNumberDto)
            const localVarPath = `/api/v1/external/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To remove a phone number user has to have at least one number left that can be used as main if chosen number is main. If chosen number is not main, it can be deleted.
         * @summary Remove a phone number
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('phoneNumberControllerRemove', 'id', id)
            const localVarPath = `/api/v1/external/phone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneNumbersExternalApi - functional programming interface
 * @export
 */
export const PhoneNumbersExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneNumbersExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * To register a phone number user needs to define country because of country code.
         * @summary Register a new phone number
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberControllerCreate(phoneNumberDto: PhoneNumberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberControllerCreate(phoneNumberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To remove a phone number user has to have at least one number left that can be used as main if chosen number is main. If chosen number is not main, it can be deleted.
         * @summary Remove a phone number
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhoneNumbersExternalApi - factory interface
 * @export
 */
export const PhoneNumbersExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneNumbersExternalApiFp(configuration)
    return {
        /**
         * To register a phone number user needs to define country because of country code.
         * @summary Register a new phone number
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberControllerCreate(phoneNumberDto: PhoneNumberDto, options?: any): AxiosPromise<GenericPhoneNumberResponse> {
            return localVarFp.phoneNumberControllerCreate(phoneNumberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * To remove a phone number user has to have at least one number left that can be used as main if chosen number is main. If chosen number is not main, it can be deleted.
         * @summary Remove a phone number
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberControllerRemove(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.phoneNumberControllerRemove(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhoneNumbersExternalApi - object-oriented interface
 * @export
 * @class PhoneNumbersExternalApi
 * @extends {BaseAPI}
 */
export class PhoneNumbersExternalApi extends BaseAPI {
    /**
     * To register a phone number user needs to define country because of country code.
     * @summary Register a new phone number
     * @param {PhoneNumberDto} phoneNumberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersExternalApi
     */
    public phoneNumberControllerCreate(phoneNumberDto: PhoneNumberDto, options?: AxiosRequestConfig) {
        return PhoneNumbersExternalApiFp(this.configuration).phoneNumberControllerCreate(phoneNumberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To remove a phone number user has to have at least one number left that can be used as main if chosen number is main. If chosen number is not main, it can be deleted.
     * @summary Remove a phone number
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersExternalApi
     */
    public phoneNumberControllerRemove(id: string, options?: AxiosRequestConfig) {
        return PhoneNumbersExternalApiFp(this.configuration).phoneNumberControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhoneNumbersInternalApi - axios parameter creator
 * @export
 */
export const PhoneNumbersInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Admin: Register a new phone number
         * @param {string} userId 
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberAdminControllerCreate: async (userId: string, phoneNumberDto: PhoneNumberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('phoneNumberAdminControllerCreate', 'userId', userId)
            // verify required parameter 'phoneNumberDto' is not null or undefined
            assertParamExists('phoneNumberAdminControllerCreate', 'phoneNumberDto', phoneNumberDto)
            const localVarPath = `/api/v1/internal/phone/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Admin: Edit a phone number
         * @param {string} id 
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberAdminControllerEdit: async (id: string, phoneNumberDto: PhoneNumberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('phoneNumberAdminControllerEdit', 'id', id)
            // verify required parameter 'phoneNumberDto' is not null or undefined
            assertParamExists('phoneNumberAdminControllerEdit', 'phoneNumberDto', phoneNumberDto)
            const localVarPath = `/api/v1/internal/phone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Admin: Remove a phone number
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberAdminControllerRemove: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('phoneNumberAdminControllerRemove', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('phoneNumberAdminControllerRemove', 'userId', userId)
            const localVarPath = `/api/v1/internal/phone/{id}/user/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneNumbersInternalApi - functional programming interface
 * @export
 */
export const PhoneNumbersInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneNumbersInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Admin: Register a new phone number
         * @param {string} userId 
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberAdminControllerCreate(userId: string, phoneNumberDto: PhoneNumberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberAdminControllerCreate(userId, phoneNumberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Admin: Edit a phone number
         * @param {string} id 
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberAdminControllerEdit(id: string, phoneNumberDto: PhoneNumberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberAdminControllerEdit(id, phoneNumberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Admin: Remove a phone number
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneNumberAdminControllerRemove(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneNumberAdminControllerRemove(id, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhoneNumbersInternalApi - factory interface
 * @export
 */
export const PhoneNumbersInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneNumbersInternalApiFp(configuration)
    return {
        /**
         * 
         * @summary Admin: Register a new phone number
         * @param {string} userId 
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberAdminControllerCreate(userId: string, phoneNumberDto: PhoneNumberDto, options?: any): AxiosPromise<GenericPhoneNumberResponse> {
            return localVarFp.phoneNumberAdminControllerCreate(userId, phoneNumberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Admin: Edit a phone number
         * @param {string} id 
         * @param {PhoneNumberDto} phoneNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberAdminControllerEdit(id: string, phoneNumberDto: PhoneNumberDto, options?: any): AxiosPromise<GenericPhoneNumberResponse> {
            return localVarFp.phoneNumberAdminControllerEdit(id, phoneNumberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Admin: Remove a phone number
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneNumberAdminControllerRemove(id: string, userId: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.phoneNumberAdminControllerRemove(id, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhoneNumbersInternalApi - object-oriented interface
 * @export
 * @class PhoneNumbersInternalApi
 * @extends {BaseAPI}
 */
export class PhoneNumbersInternalApi extends BaseAPI {
    /**
     * 
     * @summary Admin: Register a new phone number
     * @param {string} userId 
     * @param {PhoneNumberDto} phoneNumberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersInternalApi
     */
    public phoneNumberAdminControllerCreate(userId: string, phoneNumberDto: PhoneNumberDto, options?: AxiosRequestConfig) {
        return PhoneNumbersInternalApiFp(this.configuration).phoneNumberAdminControllerCreate(userId, phoneNumberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Admin: Edit a phone number
     * @param {string} id 
     * @param {PhoneNumberDto} phoneNumberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersInternalApi
     */
    public phoneNumberAdminControllerEdit(id: string, phoneNumberDto: PhoneNumberDto, options?: AxiosRequestConfig) {
        return PhoneNumbersInternalApiFp(this.configuration).phoneNumberAdminControllerEdit(id, phoneNumberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Admin: Remove a phone number
     * @param {string} id 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersInternalApi
     */
    public phoneNumberAdminControllerRemove(id: string, userId: string, options?: AxiosRequestConfig) {
        return PhoneNumbersInternalApiFp(this.configuration).phoneNumberAdminControllerRemove(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhoneVerificationSharedApi - axios parameter creator
 * @export
 */
export const PhoneVerificationSharedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new phone verification
         * @summary Create phone verification
         * @param {RequestSmsVerificationDto} requestSmsVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedPhoneControllerCreatePhoneVerification: async (requestSmsVerificationDto: RequestSmsVerificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestSmsVerificationDto' is not null or undefined
            assertParamExists('sharedPhoneControllerCreatePhoneVerification', 'requestSmsVerificationDto', requestSmsVerificationDto)
            const localVarPath = `/api/v1/shared/phone/create-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSmsVerificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a phone number with a token
         * @summary Verify phone
         * @param {VerifyPhoneDto} verifyPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedPhoneControllerVerifyPhone: async (verifyPhoneDto: VerifyPhoneDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyPhoneDto' is not null or undefined
            assertParamExists('sharedPhoneControllerVerifyPhone', 'verifyPhoneDto', verifyPhoneDto)
            const localVarPath = `/api/v1/shared/phone/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyPhoneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneVerificationSharedApi - functional programming interface
 * @export
 */
export const PhoneVerificationSharedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneVerificationSharedApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new phone verification
         * @summary Create phone verification
         * @param {RequestSmsVerificationDto} requestSmsVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedPhoneControllerCreatePhoneVerification(requestSmsVerificationDto: RequestSmsVerificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedPhoneControllerCreatePhoneVerification(requestSmsVerificationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify a phone number with a token
         * @summary Verify phone
         * @param {VerifyPhoneDto} verifyPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedPhoneControllerVerifyPhone(verifyPhoneDto: VerifyPhoneDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedPhoneControllerVerifyPhone(verifyPhoneDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhoneVerificationSharedApi - factory interface
 * @export
 */
export const PhoneVerificationSharedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneVerificationSharedApiFp(configuration)
    return {
        /**
         * Create a new phone verification
         * @summary Create phone verification
         * @param {RequestSmsVerificationDto} requestSmsVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedPhoneControllerCreatePhoneVerification(requestSmsVerificationDto: RequestSmsVerificationDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.sharedPhoneControllerCreatePhoneVerification(requestSmsVerificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify a phone number with a token
         * @summary Verify phone
         * @param {VerifyPhoneDto} verifyPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedPhoneControllerVerifyPhone(verifyPhoneDto: VerifyPhoneDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.sharedPhoneControllerVerifyPhone(verifyPhoneDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhoneVerificationSharedApi - object-oriented interface
 * @export
 * @class PhoneVerificationSharedApi
 * @extends {BaseAPI}
 */
export class PhoneVerificationSharedApi extends BaseAPI {
    /**
     * Create a new phone verification
     * @summary Create phone verification
     * @param {RequestSmsVerificationDto} requestSmsVerificationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneVerificationSharedApi
     */
    public sharedPhoneControllerCreatePhoneVerification(requestSmsVerificationDto: RequestSmsVerificationDto, options?: AxiosRequestConfig) {
        return PhoneVerificationSharedApiFp(this.configuration).sharedPhoneControllerCreatePhoneVerification(requestSmsVerificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify a phone number with a token
     * @summary Verify phone
     * @param {VerifyPhoneDto} verifyPhoneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneVerificationSharedApi
     */
    public sharedPhoneControllerVerifyPhone(verifyPhoneDto: VerifyPhoneDto, options?: AxiosRequestConfig) {
        return PhoneVerificationSharedApiFp(this.configuration).sharedPhoneControllerVerifyPhone(verifyPhoneDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TagInternalApi - axios parameter creator
 * @export
 */
export const TagInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a tag to a meal
         * @summary Assign a tag to a meal
         * @param {string} id 
         * @param {string} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerAssignTagToMeal: async (id: string, mealId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagAdminControllerAssignTagToMeal', 'id', id)
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('tagAdminControllerAssignTagToMeal', 'mealId', mealId)
            const localVarPath = `/api/v1/internal/tag/{id}/meal/{mealId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"mealId"}}`, encodeURIComponent(String(mealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a tag
         * @summary Create a tag
         * @param {TagDto} tagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerCreate: async (tagDto: TagDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagDto' is not null or undefined
            assertParamExists('tagAdminControllerCreate', 'tagDto', tagDto)
            const localVarPath = `/api/v1/internal/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all tags
         * @summary Get all tags
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {TagAdminControllerFindAllOrderEnum} [order] 
         * @param {TagAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerFindAll: async (page?: number, limit?: number, order?: TagAdminControllerFindAllOrderEnum, sortBy?: TagAdminControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tag by id
         * @summary Get a tag by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagAdminControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/internal/tag/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a tag
         * @summary Delete a tag
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagAdminControllerRemove', 'id', id)
            const localVarPath = `/api/v1/internal/tag/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassign a tag from a meal
         * @summary Unassign a tag from a meal
         * @param {string} id 
         * @param {string} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerUnassignTagFromMeal: async (id: string, mealId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagAdminControllerUnassignTagFromMeal', 'id', id)
            // verify required parameter 'mealId' is not null or undefined
            assertParamExists('tagAdminControllerUnassignTagFromMeal', 'mealId', mealId)
            const localVarPath = `/api/v1/internal/tag/{id}/meal/{mealId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"mealId"}}`, encodeURIComponent(String(mealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a tag
         * @summary Update a tag
         * @param {string} id 
         * @param {UpdateTagDto} updateTagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerUpdate: async (id: string, updateTagDto: UpdateTagDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagAdminControllerUpdate', 'id', id)
            // verify required parameter 'updateTagDto' is not null or undefined
            assertParamExists('tagAdminControllerUpdate', 'updateTagDto', updateTagDto)
            const localVarPath = `/api/v1/internal/tag/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTagDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagInternalApi - functional programming interface
 * @export
 */
export const TagInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a tag to a meal
         * @summary Assign a tag to a meal
         * @param {string} id 
         * @param {string} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagAdminControllerAssignTagToMeal(id: string, mealId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagAdminControllerAssignTagToMeal(id, mealId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a tag
         * @summary Create a tag
         * @param {TagDto} tagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagAdminControllerCreate(tagDto: TagDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagAdminControllerCreate(tagDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all tags
         * @summary Get all tags
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {TagAdminControllerFindAllOrderEnum} [order] 
         * @param {TagAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagAdminControllerFindAll(page?: number, limit?: number, order?: TagAdminControllerFindAllOrderEnum, sortBy?: TagAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagAdminControllerFindAll(page, limit, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a tag by id
         * @summary Get a tag by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagAdminControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagAdminControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a tag
         * @summary Delete a tag
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagAdminControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagAdminControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unassign a tag from a meal
         * @summary Unassign a tag from a meal
         * @param {string} id 
         * @param {string} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagAdminControllerUnassignTagFromMeal(id: string, mealId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagAdminControllerUnassignTagFromMeal(id, mealId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a tag
         * @summary Update a tag
         * @param {string} id 
         * @param {UpdateTagDto} updateTagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagAdminControllerUpdate(id: string, updateTagDto: UpdateTagDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagAdminControllerUpdate(id, updateTagDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagInternalApi - factory interface
 * @export
 */
export const TagInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagInternalApiFp(configuration)
    return {
        /**
         * Assign a tag to a meal
         * @summary Assign a tag to a meal
         * @param {string} id 
         * @param {string} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerAssignTagToMeal(id: string, mealId: string, options?: any): AxiosPromise<GenericTagResponse> {
            return localVarFp.tagAdminControllerAssignTagToMeal(id, mealId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a tag
         * @summary Create a tag
         * @param {TagDto} tagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerCreate(tagDto: TagDto, options?: any): AxiosPromise<GenericTagResponse> {
            return localVarFp.tagAdminControllerCreate(tagDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all tags
         * @summary Get all tags
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {TagAdminControllerFindAllOrderEnum} [order] 
         * @param {TagAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerFindAll(page?: number, limit?: number, order?: TagAdminControllerFindAllOrderEnum, sortBy?: TagAdminControllerFindAllSortByEnum, options?: any): AxiosPromise<ListTagResponse> {
            return localVarFp.tagAdminControllerFindAll(page, limit, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tag by id
         * @summary Get a tag by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerFindOne(id: string, options?: any): AxiosPromise<GenericTagResponse> {
            return localVarFp.tagAdminControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a tag
         * @summary Delete a tag
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerRemove(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.tagAdminControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Unassign a tag from a meal
         * @summary Unassign a tag from a meal
         * @param {string} id 
         * @param {string} mealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerUnassignTagFromMeal(id: string, mealId: string, options?: any): AxiosPromise<GenericTagResponse> {
            return localVarFp.tagAdminControllerUnassignTagFromMeal(id, mealId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a tag
         * @summary Update a tag
         * @param {string} id 
         * @param {UpdateTagDto} updateTagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagAdminControllerUpdate(id: string, updateTagDto: UpdateTagDto, options?: any): AxiosPromise<GenericTagResponse> {
            return localVarFp.tagAdminControllerUpdate(id, updateTagDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagInternalApi - object-oriented interface
 * @export
 * @class TagInternalApi
 * @extends {BaseAPI}
 */
export class TagInternalApi extends BaseAPI {
    /**
     * Assign a tag to a meal
     * @summary Assign a tag to a meal
     * @param {string} id 
     * @param {string} mealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagInternalApi
     */
    public tagAdminControllerAssignTagToMeal(id: string, mealId: string, options?: AxiosRequestConfig) {
        return TagInternalApiFp(this.configuration).tagAdminControllerAssignTagToMeal(id, mealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a tag
     * @summary Create a tag
     * @param {TagDto} tagDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagInternalApi
     */
    public tagAdminControllerCreate(tagDto: TagDto, options?: AxiosRequestConfig) {
        return TagInternalApiFp(this.configuration).tagAdminControllerCreate(tagDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all tags
     * @summary Get all tags
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {TagAdminControllerFindAllOrderEnum} [order] 
     * @param {TagAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagInternalApi
     */
    public tagAdminControllerFindAll(page?: number, limit?: number, order?: TagAdminControllerFindAllOrderEnum, sortBy?: TagAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return TagInternalApiFp(this.configuration).tagAdminControllerFindAll(page, limit, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tag by id
     * @summary Get a tag by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagInternalApi
     */
    public tagAdminControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return TagInternalApiFp(this.configuration).tagAdminControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a tag
     * @summary Delete a tag
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagInternalApi
     */
    public tagAdminControllerRemove(id: string, options?: AxiosRequestConfig) {
        return TagInternalApiFp(this.configuration).tagAdminControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unassign a tag from a meal
     * @summary Unassign a tag from a meal
     * @param {string} id 
     * @param {string} mealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagInternalApi
     */
    public tagAdminControllerUnassignTagFromMeal(id: string, mealId: string, options?: AxiosRequestConfig) {
        return TagInternalApiFp(this.configuration).tagAdminControllerUnassignTagFromMeal(id, mealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a tag
     * @summary Update a tag
     * @param {string} id 
     * @param {UpdateTagDto} updateTagDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagInternalApi
     */
    public tagAdminControllerUpdate(id: string, updateTagDto: UpdateTagDto, options?: AxiosRequestConfig) {
        return TagInternalApiFp(this.configuration).tagAdminControllerUpdate(id, updateTagDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TagAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type TagAdminControllerFindAllOrderEnum = typeof TagAdminControllerFindAllOrderEnum[keyof typeof TagAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const TagAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    MealCount: 'mealCount'
} as const;
export type TagAdminControllerFindAllSortByEnum = typeof TagAdminControllerFindAllSortByEnum[keyof typeof TagAdminControllerFindAllSortByEnum];


/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export const TemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new template with the specified details
         * @summary Create a new template
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesControllerCreateTemplate: async (createTemplateDto: CreateTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTemplateDto' is not null or undefined
            assertParamExists('templatesControllerCreateTemplate', 'createTemplateDto', createTemplateDto)
            const localVarPath = `/api/v1/internal/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTemplateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplatesApi - functional programming interface
 * @export
 */
export const TemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new template with the specified details
         * @summary Create a new template
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesControllerCreateTemplate(createTemplateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplatesApi - factory interface
 * @export
 */
export const TemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplatesApiFp(configuration)
    return {
        /**
         * Create a new template with the specified details
         * @summary Create a new template
         * @param {CreateTemplateDto} createTemplateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: any): AxiosPromise<object> {
            return localVarFp.templatesControllerCreateTemplate(createTemplateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
export class TemplatesApi extends BaseAPI {
    /**
     * Create a new template with the specified details
     * @summary Create a new template
     * @param {CreateTemplateDto} createTemplateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public templatesControllerCreateTemplate(createTemplateDto: CreateTemplateDto, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).templatesControllerCreateTemplate(createTemplateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersExternalApi - axios parameter creator
 * @export
 */
export const UsersExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Being used to register a new user
         * @summary Register a new user
         * @param {UserRegistrationDto} userRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateUser: async (userRegistrationDto: UserRegistrationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegistrationDto' is not null or undefined
            assertParamExists('usersControllerCreateUser', 'userRegistrationDto', userRegistrationDto)
            const localVarPath = `/api/v1/external/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegistrationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Being used to delete own user
         * @summary Delete own user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Being used when a user has forgotten their password
         * @summary Forgotten password
         * @param {ForgottenPasswordDto} forgottenPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerForgottenPassword: async (forgottenPasswordDto: ForgottenPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgottenPasswordDto' is not null or undefined
            assertParamExists('usersControllerForgottenPassword', 'forgottenPasswordDto', forgottenPasswordDto)
            const localVarPath = `/api/v1/external/users/password/forgotten/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgottenPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user profile by ID from token
         * @summary Get user profile by ID from token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Being used to request a password reset
         * @summary Request a password reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRequestPasswordReset: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external/users/password/reset/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Being used to reset password
         * @summary Reset password
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerResetPassword: async (resetPasswordDto: ResetPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDto' is not null or undefined
            assertParamExists('usersControllerResetPassword', 'resetPasswordDto', resetPasswordDto)
            const localVarPath = `/api/v1/external/users/password/reset/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Being used to update own user
         * @summary Update own user
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser: async (updateUserDto: UpdateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('usersControllerUpdateUser', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/v1/external/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Being used to upload profile photo
         * @summary Upload profile photo
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUploadProfilePhoto: async (file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('usersControllerUploadProfilePhoto', 'file', file)
            const localVarPath = `/api/v1/external/users/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersExternalApi - functional programming interface
 * @export
 */
export const UsersExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Being used to register a new user
         * @summary Register a new user
         * @param {UserRegistrationDto} userRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreateUser(userRegistrationDto: UserRegistrationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreateUser(userRegistrationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Being used to delete own user
         * @summary Delete own user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerDeleteUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDeleteUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Being used when a user has forgotten their password
         * @summary Forgotten password
         * @param {ForgottenPasswordDto} forgottenPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerForgottenPassword(forgottenPasswordDto: ForgottenPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerForgottenPassword(forgottenPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user profile by ID from token
         * @summary Get user profile by ID from token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUserById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUserById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Being used to request a password reset
         * @summary Request a password reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRequestPasswordReset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRequestPasswordReset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Being used to reset password
         * @summary Reset password
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerResetPassword(resetPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Being used to update own user
         * @summary Update own user
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateUser(updateUserDto: UpdateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateUser(updateUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Being used to upload profile photo
         * @summary Upload profile photo
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUploadProfilePhoto(file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUploadProfilePhoto(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersExternalApi - factory interface
 * @export
 */
export const UsersExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersExternalApiFp(configuration)
    return {
        /**
         * Being used to register a new user
         * @summary Register a new user
         * @param {UserRegistrationDto} userRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateUser(userRegistrationDto: UserRegistrationDto, options?: any): AxiosPromise<GenericUserResponse> {
            return localVarFp.usersControllerCreateUser(userRegistrationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Being used to delete own user
         * @summary Delete own user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser(options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.usersControllerDeleteUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Being used when a user has forgotten their password
         * @summary Forgotten password
         * @param {ForgottenPasswordDto} forgottenPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerForgottenPassword(forgottenPasswordDto: ForgottenPasswordDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.usersControllerForgottenPassword(forgottenPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user profile by ID from token
         * @summary Get user profile by ID from token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserById(options?: any): AxiosPromise<GenericUserResponse> {
            return localVarFp.usersControllerGetUserById(options).then((request) => request(axios, basePath));
        },
        /**
         * Being used to request a password reset
         * @summary Request a password reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRequestPasswordReset(options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.usersControllerRequestPasswordReset(options).then((request) => request(axios, basePath));
        },
        /**
         * Being used to reset password
         * @summary Reset password
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.usersControllerResetPassword(resetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Being used to update own user
         * @summary Update own user
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<GenericUserResponse> {
            return localVarFp.usersControllerUpdateUser(updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Being used to upload profile photo
         * @summary Upload profile photo
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUploadProfilePhoto(file: File, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.usersControllerUploadProfilePhoto(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersExternalApi - object-oriented interface
 * @export
 * @class UsersExternalApi
 * @extends {BaseAPI}
 */
export class UsersExternalApi extends BaseAPI {
    /**
     * Being used to register a new user
     * @summary Register a new user
     * @param {UserRegistrationDto} userRegistrationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerCreateUser(userRegistrationDto: UserRegistrationDto, options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerCreateUser(userRegistrationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Being used to delete own user
     * @summary Delete own user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerDeleteUser(options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerDeleteUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Being used when a user has forgotten their password
     * @summary Forgotten password
     * @param {ForgottenPasswordDto} forgottenPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerForgottenPassword(forgottenPasswordDto: ForgottenPasswordDto, options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerForgottenPassword(forgottenPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user profile by ID from token
     * @summary Get user profile by ID from token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerGetUserById(options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerGetUserById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Being used to request a password reset
     * @summary Request a password reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerRequestPasswordReset(options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerRequestPasswordReset(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Being used to reset password
     * @summary Reset password
     * @param {ResetPasswordDto} resetPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerResetPassword(resetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Being used to update own user
     * @summary Update own user
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerUpdateUser(updateUserDto: UpdateUserDto, options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerUpdateUser(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Being used to upload profile photo
     * @summary Upload profile photo
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersExternalApi
     */
    public usersControllerUploadProfilePhoto(file: File, options?: AxiosRequestConfig) {
        return UsersExternalApiFp(this.configuration).usersControllerUploadProfilePhoto(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersInternalApi - axios parameter creator
 * @export
 */
export const UsersInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a user by admin
         * @summary Create a user by admin
         * @param {UserCreationBySuperAdminDto} userCreationBySuperAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerCreateUserByAdmin: async (userCreationBySuperAdminDto: UserCreationBySuperAdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreationBySuperAdminDto' is not null or undefined
            assertParamExists('usersAdminControllerCreateUserByAdmin', 'userCreationBySuperAdminDto', userCreationBySuperAdminDto)
            const localVarPath = `/api/v1/internal/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreationBySuperAdminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user by their ID
         * @summary Delete user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerDeleteOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersAdminControllerDeleteOne', 'id', id)
            const localVarPath = `/api/v1/internal/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users with role by superadmin
         * @summary Get all users with role by superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindAll: async (page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllOrderEnum, sortBy?: UsersAdminControllerFindAllSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users by company id
         * @summary Get all users by company id
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindAllByCompany: async (page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllByCompanyOrderEnum, sortBy?: UsersAdminControllerFindAllByCompanySortByEnum, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/users/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all client users by superadmin
         * @summary Get all client users by superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllClientsOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllClientsSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindAllClients: async (page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllClientsOrderEnum, sortBy?: UsersAdminControllerFindAllClientsSortByEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/internal/users/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user by their ID
         * @summary Get user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindOneById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersAdminControllerFindOneById', 'id', id)
            const localVarPath = `/api/v1/internal/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user by their ID
         * @summary Update user by ID
         * @param {string} id 
         * @param {UpdateUserBySuperAdminDto} updateUserBySuperAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerUpdateUserByAdmin: async (id: string, updateUserBySuperAdminDto: UpdateUserBySuperAdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersAdminControllerUpdateUserByAdmin', 'id', id)
            // verify required parameter 'updateUserBySuperAdminDto' is not null or undefined
            assertParamExists('usersAdminControllerUpdateUserByAdmin', 'updateUserBySuperAdminDto', updateUserBySuperAdminDto)
            const localVarPath = `/api/v1/internal/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserBySuperAdminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersInternalApi - functional programming interface
 * @export
 */
export const UsersInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a user by admin
         * @summary Create a user by admin
         * @param {UserCreationBySuperAdminDto} userCreationBySuperAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdminControllerCreateUserByAdmin(userCreationBySuperAdminDto: UserCreationBySuperAdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericUserWithRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdminControllerCreateUserByAdmin(userCreationBySuperAdminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a user by their ID
         * @summary Delete user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdminControllerDeleteOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDeterminationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdminControllerDeleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all users with role by superadmin
         * @summary Get all users with role by superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllOrderEnum, sortBy?: UsersAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserWithRoleAndCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdminControllerFindAll(page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all users by company id
         * @summary Get all users by company id
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdminControllerFindAllByCompany(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllByCompanyOrderEnum, sortBy?: UsersAdminControllerFindAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserWithRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdminControllerFindAllByCompany(page, limit, search, order, sortBy, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all client users by superadmin
         * @summary Get all client users by superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllClientsOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllClientsSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdminControllerFindAllClients(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllClientsOrderEnum, sortBy?: UsersAdminControllerFindAllClientsSortByEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdminControllerFindAllClients(page, limit, search, order, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a user by their ID
         * @summary Get user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdminControllerFindOneById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericUserWithRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdminControllerFindOneById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a user by their ID
         * @summary Update user by ID
         * @param {string} id 
         * @param {UpdateUserBySuperAdminDto} updateUserBySuperAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdminControllerUpdateUserByAdmin(id: string, updateUserBySuperAdminDto: UpdateUserBySuperAdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericUserWithRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdminControllerUpdateUserByAdmin(id, updateUserBySuperAdminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersInternalApi - factory interface
 * @export
 */
export const UsersInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersInternalApiFp(configuration)
    return {
        /**
         * Create a user by admin
         * @summary Create a user by admin
         * @param {UserCreationBySuperAdminDto} userCreationBySuperAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerCreateUserByAdmin(userCreationBySuperAdminDto: UserCreationBySuperAdminDto, options?: any): AxiosPromise<GenericUserWithRoleResponse> {
            return localVarFp.usersAdminControllerCreateUserByAdmin(userCreationBySuperAdminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user by their ID
         * @summary Delete user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerDeleteOne(id: string, options?: any): AxiosPromise<SuccessDeterminationResponse> {
            return localVarFp.usersAdminControllerDeleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users with role by superadmin
         * @summary Get all users with role by superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllOrderEnum, sortBy?: UsersAdminControllerFindAllSortByEnum, options?: any): AxiosPromise<ListUserWithRoleAndCompanyResponse> {
            return localVarFp.usersAdminControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users by company id
         * @summary Get all users by company id
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllByCompanyOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllByCompanySortByEnum} [sortBy] 
         * @param {string} [id] The ID of the company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindAllByCompany(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllByCompanyOrderEnum, sortBy?: UsersAdminControllerFindAllByCompanySortByEnum, id?: string, options?: any): AxiosPromise<ListUserWithRoleResponse> {
            return localVarFp.usersAdminControllerFindAllByCompany(page, limit, search, order, sortBy, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all client users by superadmin
         * @summary Get all client users by superadmin
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {UsersAdminControllerFindAllClientsOrderEnum} [order] 
         * @param {UsersAdminControllerFindAllClientsSortByEnum} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindAllClients(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllClientsOrderEnum, sortBy?: UsersAdminControllerFindAllClientsSortByEnum, options?: any): AxiosPromise<ListUserResponse> {
            return localVarFp.usersAdminControllerFindAllClients(page, limit, search, order, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user by their ID
         * @summary Get user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerFindOneById(id: string, options?: any): AxiosPromise<GenericUserWithRoleResponse> {
            return localVarFp.usersAdminControllerFindOneById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a user by their ID
         * @summary Update user by ID
         * @param {string} id 
         * @param {UpdateUserBySuperAdminDto} updateUserBySuperAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdminControllerUpdateUserByAdmin(id: string, updateUserBySuperAdminDto: UpdateUserBySuperAdminDto, options?: any): AxiosPromise<GenericUserWithRoleResponse> {
            return localVarFp.usersAdminControllerUpdateUserByAdmin(id, updateUserBySuperAdminDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersInternalApi - object-oriented interface
 * @export
 * @class UsersInternalApi
 * @extends {BaseAPI}
 */
export class UsersInternalApi extends BaseAPI {
    /**
     * Create a user by admin
     * @summary Create a user by admin
     * @param {UserCreationBySuperAdminDto} userCreationBySuperAdminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersInternalApi
     */
    public usersAdminControllerCreateUserByAdmin(userCreationBySuperAdminDto: UserCreationBySuperAdminDto, options?: AxiosRequestConfig) {
        return UsersInternalApiFp(this.configuration).usersAdminControllerCreateUserByAdmin(userCreationBySuperAdminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user by their ID
     * @summary Delete user by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersInternalApi
     */
    public usersAdminControllerDeleteOne(id: string, options?: AxiosRequestConfig) {
        return UsersInternalApiFp(this.configuration).usersAdminControllerDeleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users with role by superadmin
     * @summary Get all users with role by superadmin
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {UsersAdminControllerFindAllOrderEnum} [order] 
     * @param {UsersAdminControllerFindAllSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersInternalApi
     */
    public usersAdminControllerFindAll(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllOrderEnum, sortBy?: UsersAdminControllerFindAllSortByEnum, options?: AxiosRequestConfig) {
        return UsersInternalApiFp(this.configuration).usersAdminControllerFindAll(page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users by company id
     * @summary Get all users by company id
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {UsersAdminControllerFindAllByCompanyOrderEnum} [order] 
     * @param {UsersAdminControllerFindAllByCompanySortByEnum} [sortBy] 
     * @param {string} [id] The ID of the company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersInternalApi
     */
    public usersAdminControllerFindAllByCompany(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllByCompanyOrderEnum, sortBy?: UsersAdminControllerFindAllByCompanySortByEnum, id?: string, options?: AxiosRequestConfig) {
        return UsersInternalApiFp(this.configuration).usersAdminControllerFindAllByCompany(page, limit, search, order, sortBy, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all client users by superadmin
     * @summary Get all client users by superadmin
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {UsersAdminControllerFindAllClientsOrderEnum} [order] 
     * @param {UsersAdminControllerFindAllClientsSortByEnum} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersInternalApi
     */
    public usersAdminControllerFindAllClients(page?: number, limit?: number, search?: string, order?: UsersAdminControllerFindAllClientsOrderEnum, sortBy?: UsersAdminControllerFindAllClientsSortByEnum, options?: AxiosRequestConfig) {
        return UsersInternalApiFp(this.configuration).usersAdminControllerFindAllClients(page, limit, search, order, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user by their ID
     * @summary Get user by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersInternalApi
     */
    public usersAdminControllerFindOneById(id: string, options?: AxiosRequestConfig) {
        return UsersInternalApiFp(this.configuration).usersAdminControllerFindOneById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a user by their ID
     * @summary Update user by ID
     * @param {string} id 
     * @param {UpdateUserBySuperAdminDto} updateUserBySuperAdminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersInternalApi
     */
    public usersAdminControllerUpdateUserByAdmin(id: string, updateUserBySuperAdminDto: UpdateUserBySuperAdminDto, options?: AxiosRequestConfig) {
        return UsersInternalApiFp(this.configuration).usersAdminControllerUpdateUserByAdmin(id, updateUserBySuperAdminDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UsersAdminControllerFindAllOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type UsersAdminControllerFindAllOrderEnum = typeof UsersAdminControllerFindAllOrderEnum[keyof typeof UsersAdminControllerFindAllOrderEnum];
/**
 * @export
 */
export const UsersAdminControllerFindAllSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Email: 'email',
    Role: 'role',
    Title: 'title',
    Name: 'name',
    Surname: 'surname',
    Gender: 'gender',
    BirthDate: 'birthDate'
} as const;
export type UsersAdminControllerFindAllSortByEnum = typeof UsersAdminControllerFindAllSortByEnum[keyof typeof UsersAdminControllerFindAllSortByEnum];
/**
 * @export
 */
export const UsersAdminControllerFindAllByCompanyOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type UsersAdminControllerFindAllByCompanyOrderEnum = typeof UsersAdminControllerFindAllByCompanyOrderEnum[keyof typeof UsersAdminControllerFindAllByCompanyOrderEnum];
/**
 * @export
 */
export const UsersAdminControllerFindAllByCompanySortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Email: 'email',
    Role: 'role',
    Title: 'title',
    Name: 'name',
    Surname: 'surname',
    Gender: 'gender',
    BirthDate: 'birthDate'
} as const;
export type UsersAdminControllerFindAllByCompanySortByEnum = typeof UsersAdminControllerFindAllByCompanySortByEnum[keyof typeof UsersAdminControllerFindAllByCompanySortByEnum];
/**
 * @export
 */
export const UsersAdminControllerFindAllClientsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type UsersAdminControllerFindAllClientsOrderEnum = typeof UsersAdminControllerFindAllClientsOrderEnum[keyof typeof UsersAdminControllerFindAllClientsOrderEnum];
/**
 * @export
 */
export const UsersAdminControllerFindAllClientsSortByEnum = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Email: 'email',
    Role: 'role',
    Title: 'title',
    Name: 'name',
    Surname: 'surname',
    Gender: 'gender',
    BirthDate: 'birthDate'
} as const;
export type UsersAdminControllerFindAllClientsSortByEnum = typeof UsersAdminControllerFindAllClientsSortByEnum[keyof typeof UsersAdminControllerFindAllClientsSortByEnum];


